; DO NOT MODIFY.
;
; This file was automatically generated.

#lang rosette

(provide (all-defined-out))

(require serval/lib/core
         serval/llvm
         serval/ubsan)

(define-global @bpf2rv32)
(define-global @.str)
(define-global @bpf_jit_emit_insn.__print_once)
(define-global @.str.1)
(define-global @.str.2)

(define (@bpf_jit_emit_insn %0 %1 %2)
; %3
  (define-label (%3) #:merge #f
    (set! %4 (alloca (mcell 1) #:align 1))
    (set! %5 (alloca (mcell 8) #:align 8))
    (set! %6 (getelementptr %0 (array-offset (bv #x00000000 32) 8) (struct-offset 0)))
    (set! %7 (load %6 (bitvector 8) #:align 4))
    (set! %8 (and %7 (bv #x05 8)))
    (set! %9 (or %8 (bv #x02 8)))
    (set! %10 (icmp/eq %9 (bv #x07 8)))
    (set! %11 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 0)))
    (set! %12 (load %11 pointer #:align 4))
    (set! %13 (getelementptr %12 (array-offset (bv #x00000000 32) 40) (struct-offset 40) (array-offset (bv #x00000000 32) 8)))
    (set! %14 (ptrtoint %0 (bitvector 32)))
    (set! %15 (ptrtoint %13 (bitvector 32)))
    (set! %16 (sub %14 %15))
    (set! %17 (ashr %16 (bv #x00000003 32)))
    (set! %18 (getelementptr %0 (array-offset (bv #x00000000 32) 8) (struct-offset 2)))
    (set! %19 (load %18 (bitvector 16) #:align 2))
    (set! %20 (getelementptr %0 (array-offset (bv #x00000000 32) 8) (struct-offset 4)))
    (set! %21 (load %20 (bitvector 32) #:align 4))
    (set! %22 (getelementptr %0 (array-offset (bv #x00000000 32) 8) (struct-offset 1)))
    (set! %23 (load %22 (bitvector 8) #:align 1))
    (set! %24 (and %23 (bv #x0f 8)))
    (set! %25 (zext %24 (bitvector 32)))
    (set! %26 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset %25 2) (array-offset (bv #x00000000 32) 1)))
    (set! %27 (lshr %23 (bv #x04 8)))
    (set! %28 (zext %27 (bitvector 32)))
    (set! %29 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset %28 2) (array-offset (bv #x00000000 32) 1)))
    (set! %30 (zext %7 (bitvector 32)))
    (switch %7 %3986 [(bv #xbf 8) %31] [(bv #x0f 8) %31] [(bv #x07 8) %31] [(bv #x1f 8) %31] [(bv #x17 8) %31] [(bv #x5f 8) %31] [(bv #x4f 8) %31] [(bv #xaf 8) %31] [(bv #x2f 8) %31] [(bv #x27 8) %31] [(bv #x6f 8) %31] [(bv #x7f 8) %31] [(bv #xcf 8) %31] [(bv #x87 8) %98] [(bv #x3f 8) %3982] [(bv #x37 8) %3982] [(bv #x9f 8) %3982] [(bv #x97 8) %3982] [(bv #xb7 8) %99] [(bv #x57 8) %99] [(bv #x47 8) %99] [(bv #xa7 8) %99] [(bv #x67 8) %99] [(bv #x77 8) %99] [(bv #xc7 8) %99] [(bv #xbc 8) %874] [(bv #x0c 8) %975] [(bv #x1c 8) %975] [(bv #x5c 8) %975] [(bv #x4c 8) %975] [(bv #xac 8) %975] [(bv #x2c 8) %975] [(bv #x24 8) %975] [(bv #x3c 8) %975] [(bv #x34 8) %975] [(bv #x9c 8) %975] [(bv #x94 8) %975] [(bv #x6c 8) %975] [(bv #x7c 8) %975] [(bv #xcc 8) %975] [(bv #xb4 8) %1046] [(bv #x04 8) %1046] [(bv #x14 8) %1046] [(bv #x54 8) %1046] [(bv #x44 8) %1046] [(bv #xa4 8) %1046] [(bv #x64 8) %1046] [(bv #x74 8) %1046] [(bv #xc4 8) %1046] [(bv #x84 8) %1673] [(bv #xd4 8) %1674] [(bv #xdc 8) %1822] [(bv #x05 8) %2076] [(bv #x85 8) %2155] [(bv #xf5 8) %2260] [(bv #x1d 8) %2346] [(bv #x15 8) %2346] [(bv #x1e 8) %2346] [(bv #x16 8) %2346] [(bv #x5d 8) %2346] [(bv #x55 8) %2346] [(bv #x5e 8) %2346] [(bv #x56 8) %2346] [(bv #xbd 8) %2346] [(bv #xb5 8) %2346] [(bv #xbe 8) %2346] [(bv #xb6 8) %2346] [(bv #xad 8) %2346] [(bv #xa5 8) %2346] [(bv #xae 8) %2346] [(bv #xa6 8) %2346] [(bv #x3d 8) %2346] [(bv #x35 8) %2346] [(bv #x3e 8) %2346] [(bv #x36 8) %2346] [(bv #x2d 8) %2346] [(bv #x25 8) %2346] [(bv #x2e 8) %2346] [(bv #x26 8) %2346] [(bv #xdd 8) %2346] [(bv #xd5 8) %2346] [(bv #xde 8) %2346] [(bv #xd6 8) %2346] [(bv #xcd 8) %2346] [(bv #xc5 8) %2346] [(bv #xce 8) %2346] [(bv #xc6 8) %2346] [(bv #x7d 8) %2346] [(bv #x75 8) %2346] [(bv #x7e 8) %2346] [(bv #x76 8) %2346] [(bv #x6d 8) %2346] [(bv #x65 8) %2346] [(bv #x6e 8) %2346] [(bv #x66 8) %2346] [(bv #x4d 8) %2346] [(bv #x45 8) %2346] [(bv #x4e 8) %2346] [(bv #x46 8) %2346] [(bv #x95 8) %3121] [(bv #x18 8) %3183] [(bv #x71 8) %3383] [(bv #x69 8) %3383] [(bv #x61 8) %3383] [(bv #x79 8) %3383] [(bv #x72 8) %3694] [(bv #x6a 8) %3694] [(bv #x62 8) %3694] [(bv #x7a 8) %3694] [(bv #x73 8) %3694] [(bv #x6b 8) %3694] [(bv #x63 8) %3694] [(bv #x7b 8) %3694] [(bv #xc3 8) %3694] [(bv #xdb 8) %3982]))

; %31
  (define-label (%31) #:merge #f
    (set! %32 (and %30 (bv #x00000008 32)))
    (set! %33 (icmp/eq %32 (bv #x00000000 32)))
    (br %33 %34 %95))

; %34
  (define-label (%34) #:merge #f
    (set! %35 (add %21 (bv #x00000800 32)))
    (set! %36 (and %21 (bv #x00000fff 32)))
    (set! %37 (icmp/ult %35 (bv #x00001000 32)))
    (set! %38 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %39 (load %38 pointer #:align 4))
    (set! %40 (icmp/eq %39 nullptr))
    (br %37 %65 %41))

; %41
  (define-label (%41) #:merge #f
    (br %40 %42 %46))

; %42
  (define-label (%42) #:merge #f
    (set! %43 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %44 (load %43 (bitvector 32) #:align 4))
    (set! %45 (add %44 (bv #x00000001 32)))
    (store %45 %43 (bitvector 32) #:align 4)
    (br %61))

; %46
  (define-label (%46) #:merge #f
    (set! %47 (and %35 (bv #xfffff000 32)))
    (set! %48 (or %47 (bv #x00000eb7 32)))
    (set! %49 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %50 (load %49 (bitvector 32) #:align 4))
    (set! %51 (getelementptr %39 (array-offset %50 4)))
    (store %48 %51 (bitvector 32) #:align 4)
    (set! %52 (load %38 pointer #:align 4))
    (set! %53 (load %49 (bitvector 32) #:align 4))
    (set! %54 (add %53 (bv #x00000001 32)))
    (store %54 %49 (bitvector 32) #:align 4)
    (set! %55 (icmp/eq %52 nullptr))
    (br %55 %61 %56))

; %56
  (define-label (%56) #:merge #f
    (set! %57 (shl %36 (bv #x00000014 32)))
    (set! %58 (or %57 (bv #x000e8e93 32)))
    (set! %59 (getelementptr %52 (array-offset %54 4)))
    (store %58 %59 (bitvector 32) #:align 4)
    (set! %60 (load %49 (bitvector 32) #:align 4))
    (br %61))

; %61
  (define-label (%61) #:merge #f
    (set! %62 (phi [%49 %46] [%49 %56] [%43 %42]))
    (set! %63 (phi [%54 %46] [%60 %56] [%45 %42]))
    (set! %64 (add %63 (bv #x00000001 32)))
    (store %64 %62 (bitvector 32) #:align 4)
    (br %76))

; %65
  (define-label (%65) #:merge #f
    (br %40 %72 %66))

; %66
  (define-label (%66) #:merge #f
    (set! %67 (shl %36 (bv #x00000014 32)))
    (set! %68 (or %67 (bv #x00000e93 32)))
    (set! %69 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %70 (load %69 (bitvector 32) #:align 4))
    (set! %71 (getelementptr %39 (array-offset %70 4)))
    (store %68 %71 (bitvector 32) #:align 4)
    (br %72))

; %72
  (define-label (%72) #:merge #f
    (set! %73 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %74 (load %73 (bitvector 32) #:align 4))
    (set! %75 (add %74 (bv #x00000001 32)))
    (store %75 %73 (bitvector 32) #:align 4)
    (br %76))

; %76
  (define-label (%76) #:merge #f
    (set! %77 (phi [%64 %61] [%75 %72]))
    (set! %78 (icmp/sgt %21 (bv #xffffffff 32)))
    (set! %79 (load %38 pointer #:align 4))
    (set! %80 (icmp/eq %79 nullptr))
    (br %78 %81 %86))

; %81
  (define-label (%81) #:merge #f
    (br %80 %91 %82))

; %82
  (define-label (%82) #:merge #f
    (set! %83 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %84 (getelementptr %79 (array-offset %77 4)))
    (store (bv #x00000f13 32) %84 (bitvector 32) #:align 4)
    (set! %85 (load %83 (bitvector 32) #:align 4))
    (br %91))

; %86
  (define-label (%86) #:merge #f
    (br %80 %91 %87))

; %87
  (define-label (%87) #:merge #f
    (set! %88 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %89 (getelementptr %79 (array-offset %77 4)))
    (store (bv #xfff00f13 32) %89 (bitvector 32) #:align 4)
    (set! %90 (load %88 (bitvector 32) #:align 4))
    (br %91))

; %91
  (define-label (%91) #:merge #f
    (set! %92 (phi [%85 %82] [%77 %81] [%90 %87] [%77 %86]))
    (set! %93 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %94 (add %92 (bv #x00000001 32)))
    (store %94 %93 (bitvector 32) #:align 4)
    (br %95))

; %95
  (define-label (%95) #:merge #f
    (set! %96 (phi [%29 %31] [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000d 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %91]))
    (set! %97 (and %7 (bv #xf0 8)))
    (call @emit_alu_r64 %26 %96 %1 %97)
    (br %3989))

; %98
  (define-label (%98) #:merge #f
    (call @emit_alu_r64 %26 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset (bv #x0000000d 32) 2) (array-offset (bv #x00000000 32) 1)) %1 (bv #x80 8))
    (br %3989))

; %99
  (define-label (%99) #:merge #f
    (set! %100 (and %7 (bv #xf0 8)))
    (set! %101 (load %26 (bitvector 8) #:align 1))
    (set! %102 (lshr (bv #x00000bc0 32) %25))
    (set! %103 (and %102 (bv #x00000001 32)))
    (set! %104 (icmp/ne %103 (bv #x00000000 32)))
    (br %104 %105 %136))

; %105
  (define-label (%105) #:merge #f
    (set! %106 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %107 (load %106 pointer #:align 4))
    (set! %108 (icmp/eq %107 nullptr))
    (br %108 %109 %113))

; %109
  (define-label (%109) #:merge #f
    (set! %110 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %111 (load %110 (bitvector 32) #:align 4))
    (set! %112 (add %111 (bv #x00000001 32)))
    (store %112 %110 (bitvector 32) #:align 4)
    (br %132))

; %113
  (define-label (%113) #:merge #f
    (set! %114 (sext %101 (bitvector 32)))
    (set! %115 (shl %114 (bv #x00000014 32)))
    (set! %116 (or %115 (bv #x00042e03 32)))
    (set! %117 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %118 (load %117 (bitvector 32) #:align 4))
    (set! %119 (getelementptr %107 (array-offset %118 4)))
    (store %116 %119 (bitvector 32) #:align 4)
    (set! %120 (load %106 pointer #:align 4))
    (set! %121 (load %117 (bitvector 32) #:align 4))
    (set! %122 (add %121 (bv #x00000001 32)))
    (store %122 %117 (bitvector 32) #:align 4)
    (set! %123 (icmp/eq %120 nullptr))
    (br %123 %132 %124))

; %124
  (define-label (%124) #:merge #f
    (set! %125 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset %25 2) (array-offset (bv #x00000001 32) 1)))
    (set! %126 (load %125 (bitvector 8) #:align 1))
    (set! %127 (sext %126 (bitvector 32)))
    (set! %128 (shl %127 (bv #x00000014 32)))
    (set! %129 (or %128 (bv #x00042383 32)))
    (set! %130 (getelementptr %120 (array-offset %122 4)))
    (store %129 %130 (bitvector 32) #:align 4)
    (set! %131 (load %117 (bitvector 32) #:align 4))
    (br %132))

; %132
  (define-label (%132) #:merge #f
    (set! %133 (phi [%117 %113] [%117 %124] [%110 %109]))
    (set! %134 (phi [%122 %113] [%131 %124] [%112 %109]))
    (set! %135 (add %134 (bv #x00000001 32)))
    (store %135 %133 (bitvector 32) #:align 4)
    (br %136))

; %136
  (define-label (%136) #:merge #f
    (set! %137 (phi [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000c 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %132] [%26 %99]))
    (set! %138 (zext %100 (bitvector 32)))
    (set! %139 (add %138 (bv #xffffffc0 32)))
    (set! %140 (lshr %139 (bv #x00000004 32)))
    (switch %140 %823 [(bv #x00000007 32) %141] [(bv #x00000001 32) %226] [(bv #x00000000 32) %313] [(bv #x00000006 32) %400] [(bv #x00000002 32) %489] [(bv #x00000003 32) %601] [(bv #x00000008 32) %713]))

; %141
  (define-label (%141) #:merge #f
    (set! %142 (getelementptr %137 (array-offset (bv #x00000001 32) 1)))
    (set! %143 (load %142 (bitvector 8) #:align 1))
    (set! %144 (add %21 (bv #x00000800 32)))
    (set! %145 (and %21 (bv #x00000fff 32)))
    (set! %146 (icmp/ult %144 (bv #x00001000 32)))
    (br %146 %180 %147))

; %147
  (define-label (%147) #:merge #f
    (set! %148 (zext %143 (bitvector 32)))
    (set! %149 (shl %148 (bv #x00000007 32)))
    (set! %150 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %151 (load %150 pointer #:align 4))
    (set! %152 (icmp/eq %151 nullptr))
    (br %152 %153 %157))

; %153
  (define-label (%153) #:merge #f
    (set! %154 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %155 (load %154 (bitvector 32) #:align 4))
    (set! %156 (add %155 (bv #x00000001 32)))
    (store %156 %154 (bitvector 32) #:align 4)
    (br %176))

; %157
  (define-label (%157) #:merge #f
    (set! %158 (and %144 (bv #xfffff000 32)))
    (set! %159 (or %158 %149))
    (set! %160 (or %159 (bv #x00000037 32)))
    (set! %161 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %162 (load %161 (bitvector 32) #:align 4))
    (set! %163 (getelementptr %151 (array-offset %162 4)))
    (store %160 %163 (bitvector 32) #:align 4)
    (set! %164 (load %150 pointer #:align 4))
    (set! %165 (load %161 (bitvector 32) #:align 4))
    (set! %166 (add %165 (bv #x00000001 32)))
    (store %166 %161 (bitvector 32) #:align 4)
    (set! %167 (icmp/eq %164 nullptr))
    (br %167 %176 %168))

; %168
  (define-label (%168) #:merge #f
    (set! %169 (shl %148 (bv #x0000000f 32)))
    (set! %170 (shl %145 (bv #x00000014 32)))
    (set! %171 (or %170 %149))
    (set! %172 (or %171 %169))
    (set! %173 (or %172 (bv #x00000013 32)))
    (set! %174 (getelementptr %164 (array-offset %166 4)))
    (store %173 %174 (bitvector 32) #:align 4)
    (set! %175 (load %161 (bitvector 32) #:align 4))
    (br %176))

; %176
  (define-label (%176) #:merge #f
    (set! %177 (phi [%161 %157] [%161 %168] [%154 %153]))
    (set! %178 (phi [%166 %157] [%175 %168] [%156 %153]))
    (set! %179 (add %178 (bv #x00000001 32)))
    (store %179 %177 (bitvector 32) #:align 4)
    (br %197))

; %180
  (define-label (%180) #:merge #f
    (set! %181 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %182 (load %181 pointer #:align 4))
    (set! %183 (icmp/eq %182 nullptr))
    (br %183 %193 %184))

; %184
  (define-label (%184) #:merge #f
    (set! %185 (zext %143 (bitvector 32)))
    (set! %186 (shl %185 (bv #x00000007 32)))
    (set! %187 (shl %145 (bv #x00000014 32)))
    (set! %188 (or %187 %186))
    (set! %189 (or %188 (bv #x00000013 32)))
    (set! %190 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %191 (load %190 (bitvector 32) #:align 4))
    (set! %192 (getelementptr %182 (array-offset %191 4)))
    (store %189 %192 (bitvector 32) #:align 4)
    (br %193))

; %193
  (define-label (%193) #:merge #f
    (set! %194 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %195 (load %194 (bitvector 32) #:align 4))
    (set! %196 (add %195 (bv #x00000001 32)))
    (store %196 %194 (bitvector 32) #:align 4)
    (br %197))

; %197
  (define-label (%197) #:merge #f
    (set! %198 (phi [%179 %176] [%196 %193]))
    (set! %199 (icmp/sgt %21 (bv #xffffffff 32)))
    (set! %200 (load %137 (bitvector 8) #:align 1))
    (set! %201 (zext %200 (bitvector 32)))
    (set! %202 (shl %201 (bv #x00000007 32)))
    (set! %203 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %204 (load %203 pointer #:align 4))
    (set! %205 (icmp/eq %204 nullptr))
    (br %199 %206 %216))

; %206
  (define-label (%206) #:merge #f
    (br %205 %212 %207))

; %207
  (define-label (%207) #:merge #f
    (set! %208 (or %202 (bv #x00000013 32)))
    (set! %209 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %210 (getelementptr %204 (array-offset %198 4)))
    (store %208 %210 (bitvector 32) #:align 4)
    (set! %211 (load %209 (bitvector 32) #:align 4))
    (br %212))

; %212
  (define-label (%212) #:merge #f
    (set! %213 (phi [%211 %207] [%198 %206]))
    (set! %214 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %215 (add %213 (bv #x00000001 32)))
    (store %215 %214 (bitvector 32) #:align 4)
    (br %823))

; %216
  (define-label (%216) #:merge #f
    (br %205 %222 %217))

; %217
  (define-label (%217) #:merge #f
    (set! %218 (or %202 (bv #xfff00013 32)))
    (set! %219 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %220 (getelementptr %204 (array-offset %198 4)))
    (store %218 %220 (bitvector 32) #:align 4)
    (set! %221 (load %219 (bitvector 32) #:align 4))
    (br %222))

; %222
  (define-label (%222) #:merge #f
    (set! %223 (phi [%221 %217] [%198 %216]))
    (set! %224 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %225 (add %223 (bv #x00000001 32)))
    (store %225 %224 (bitvector 32) #:align 4)
    (br %823))

; %226
  (define-label (%226) #:merge #f
    (set! %227 (add %21 (bv #x00000800 32)))
    (set! %228 (icmp/ult %227 (bv #x00001000 32)))
    (br %228 %229 %250))

; %229
  (define-label (%229) #:merge #f
    (set! %230 (getelementptr %137 (array-offset (bv #x00000001 32) 1)))
    (set! %231 (load %230 (bitvector 8) #:align 1))
    (set! %232 (zext %231 (bitvector 32)))
    (set! %233 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %234 (load %233 pointer #:align 4))
    (set! %235 (icmp/eq %234 nullptr))
    (br %235 %246 %236))

; %236
  (define-label (%236) #:merge #f
    (set! %237 (shl %232 (bv #x00000007 32)))
    (set! %238 (shl %232 (bv #x0000000f 32)))
    (set! %239 (shl %21 (bv #x00000014 32)))
    (set! %240 (or %239 %238))
    (set! %241 (or %240 %237))
    (set! %242 (or %241 (bv #x00007013 32)))
    (set! %243 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %244 (load %243 (bitvector 32) #:align 4))
    (set! %245 (getelementptr %234 (array-offset %244 4)))
    (store %242 %245 (bitvector 32) #:align 4)
    (br %246))

; %246
  (define-label (%246) #:merge #f
    (set! %247 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %248 (load %247 (bitvector 32) #:align 4))
    (set! %249 (add %248 (bv #x00000001 32)))
    (store %249 %247 (bitvector 32) #:align 4)
    (br %294))

; %250
  (define-label (%250) #:merge #f
    (set! %251 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %252 (load %251 pointer #:align 4))
    (set! %253 (icmp/eq %252 nullptr))
    (br %253 %254 %258))

; %254
  (define-label (%254) #:merge #f
    (set! %255 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %256 (load %255 (bitvector 32) #:align 4))
    (set! %257 (add %256 (bv #x00000001 32)))
    (store %257 %255 (bitvector 32) #:align 4)
    (br %268))

; %258
  (define-label (%258) #:merge #f
    (set! %259 (and %227 (bv #xfffff000 32)))
    (set! %260 (or %259 (bv #x000002b7 32)))
    (set! %261 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %262 (load %261 (bitvector 32) #:align 4))
    (set! %263 (getelementptr %252 (array-offset %262 4)))
    (store %260 %263 (bitvector 32) #:align 4)
    (set! %264 (load %251 pointer #:align 4))
    (set! %265 (load %261 (bitvector 32) #:align 4))
    (set! %266 (add %265 (bv #x00000001 32)))
    (store %266 %261 (bitvector 32) #:align 4)
    (set! %267 (icmp/eq %264 nullptr))
    (br %267 %268 %272))

; %268
  (define-label (%268) #:merge #f
    (set! %269 (phi [%255 %254] [%261 %258]))
    (set! %270 (phi [%257 %254] [%266 %258]))
    (set! %271 (add %270 (bv #x00000001 32)))
    (store %271 %269 (bitvector 32) #:align 4)
    (br %290))

; %272
  (define-label (%272) #:merge #f
    (set! %273 (shl %21 (bv #x00000014 32)))
    (set! %274 (or %273 (bv #x00028293 32)))
    (set! %275 (getelementptr %264 (array-offset %266 4)))
    (store %274 %275 (bitvector 32) #:align 4)
    (set! %276 (load %261 (bitvector 32) #:align 4))
    (set! %277 (load %251 pointer #:align 4))
    (set! %278 (add %276 (bv #x00000001 32)))
    (store %278 %261 (bitvector 32) #:align 4)
    (set! %279 (getelementptr %137 (array-offset (bv #x00000001 32) 1)))
    (set! %280 (load %279 (bitvector 8) #:align 1))
    (set! %281 (zext %280 (bitvector 32)))
    (set! %282 (icmp/eq %277 nullptr))
    (br %282 %290 %283))

; %283
  (define-label (%283) #:merge #f
    (set! %284 (shl %281 (bv #x00000007 32)))
    (set! %285 (shl %281 (bv #x0000000f 32)))
    (set! %286 (or %284 %285))
    (set! %287 (or %286 (bv #x00507033 32)))
    (set! %288 (getelementptr %277 (array-offset %278 4)))
    (store %287 %288 (bitvector 32) #:align 4)
    (set! %289 (load %261 (bitvector 32) #:align 4))
    (br %290))

; %290
  (define-label (%290) #:merge #f
    (set! %291 (phi [%278 %272] [%289 %283] [%271 %268]))
    (set! %292 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %293 (add %291 (bv #x00000001 32)))
    (store %293 %292 (bitvector 32) #:align 4)
    (br %294))

; %294
  (define-label (%294) #:merge #f
    (set! %295 (phi [%293 %290] [%249 %246]))
    (set! %296 (icmp/sgt %21 (bv #xffffffff 32)))
    (br %296 %297 %823))

; %297
  (define-label (%297) #:merge #f
    (set! %298 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %299 (load %298 pointer #:align 4))
    (set! %300 (icmp/eq %299 nullptr))
    (br %300 %309 %301))

; %301
  (define-label (%301) #:merge #f
    (set! %302 (load %137 (bitvector 8) #:align 1))
    (set! %303 (zext %302 (bitvector 32)))
    (set! %304 (shl %303 (bv #x00000007 32)))
    (set! %305 (or %304 (bv #x00000013 32)))
    (set! %306 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %307 (getelementptr %299 (array-offset %295 4)))
    (store %305 %307 (bitvector 32) #:align 4)
    (set! %308 (load %306 (bitvector 32) #:align 4))
    (br %309))

; %309
  (define-label (%309) #:merge #f
    (set! %310 (phi [%295 %297] [%308 %301]))
    (set! %311 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %312 (add %310 (bv #x00000001 32)))
    (store %312 %311 (bitvector 32) #:align 4)
    (br %823))

; %313
  (define-label (%313) #:merge #f
    (set! %314 (add %21 (bv #x00000800 32)))
    (set! %315 (icmp/ult %314 (bv #x00001000 32)))
    (br %315 %316 %337))

; %316
  (define-label (%316) #:merge #f
    (set! %317 (getelementptr %137 (array-offset (bv #x00000001 32) 1)))
    (set! %318 (load %317 (bitvector 8) #:align 1))
    (set! %319 (zext %318 (bitvector 32)))
    (set! %320 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %321 (load %320 pointer #:align 4))
    (set! %322 (icmp/eq %321 nullptr))
    (br %322 %333 %323))

; %323
  (define-label (%323) #:merge #f
    (set! %324 (shl %319 (bv #x00000007 32)))
    (set! %325 (shl %319 (bv #x0000000f 32)))
    (set! %326 (shl %21 (bv #x00000014 32)))
    (set! %327 (or %326 %325))
    (set! %328 (or %327 %324))
    (set! %329 (or %328 (bv #x00006013 32)))
    (set! %330 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %331 (load %330 (bitvector 32) #:align 4))
    (set! %332 (getelementptr %321 (array-offset %331 4)))
    (store %329 %332 (bitvector 32) #:align 4)
    (br %333))

; %333
  (define-label (%333) #:merge #f
    (set! %334 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %335 (load %334 (bitvector 32) #:align 4))
    (set! %336 (add %335 (bv #x00000001 32)))
    (store %336 %334 (bitvector 32) #:align 4)
    (br %381))

; %337
  (define-label (%337) #:merge #f
    (set! %338 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %339 (load %338 pointer #:align 4))
    (set! %340 (icmp/eq %339 nullptr))
    (br %340 %341 %345))

; %341
  (define-label (%341) #:merge #f
    (set! %342 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %343 (load %342 (bitvector 32) #:align 4))
    (set! %344 (add %343 (bv #x00000001 32)))
    (store %344 %342 (bitvector 32) #:align 4)
    (br %355))

; %345
  (define-label (%345) #:merge #f
    (set! %346 (and %314 (bv #xfffff000 32)))
    (set! %347 (or %346 (bv #x000002b7 32)))
    (set! %348 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %349 (load %348 (bitvector 32) #:align 4))
    (set! %350 (getelementptr %339 (array-offset %349 4)))
    (store %347 %350 (bitvector 32) #:align 4)
    (set! %351 (load %338 pointer #:align 4))
    (set! %352 (load %348 (bitvector 32) #:align 4))
    (set! %353 (add %352 (bv #x00000001 32)))
    (store %353 %348 (bitvector 32) #:align 4)
    (set! %354 (icmp/eq %351 nullptr))
    (br %354 %355 %359))

; %355
  (define-label (%355) #:merge #f
    (set! %356 (phi [%342 %341] [%348 %345]))
    (set! %357 (phi [%344 %341] [%353 %345]))
    (set! %358 (add %357 (bv #x00000001 32)))
    (store %358 %356 (bitvector 32) #:align 4)
    (br %377))

; %359
  (define-label (%359) #:merge #f
    (set! %360 (shl %21 (bv #x00000014 32)))
    (set! %361 (or %360 (bv #x00028293 32)))
    (set! %362 (getelementptr %351 (array-offset %353 4)))
    (store %361 %362 (bitvector 32) #:align 4)
    (set! %363 (load %348 (bitvector 32) #:align 4))
    (set! %364 (load %338 pointer #:align 4))
    (set! %365 (add %363 (bv #x00000001 32)))
    (store %365 %348 (bitvector 32) #:align 4)
    (set! %366 (getelementptr %137 (array-offset (bv #x00000001 32) 1)))
    (set! %367 (load %366 (bitvector 8) #:align 1))
    (set! %368 (zext %367 (bitvector 32)))
    (set! %369 (icmp/eq %364 nullptr))
    (br %369 %377 %370))

; %370
  (define-label (%370) #:merge #f
    (set! %371 (shl %368 (bv #x00000007 32)))
    (set! %372 (shl %368 (bv #x0000000f 32)))
    (set! %373 (or %371 %372))
    (set! %374 (or %373 (bv #x00506033 32)))
    (set! %375 (getelementptr %364 (array-offset %365 4)))
    (store %374 %375 (bitvector 32) #:align 4)
    (set! %376 (load %348 (bitvector 32) #:align 4))
    (br %377))

; %377
  (define-label (%377) #:merge #f
    (set! %378 (phi [%365 %359] [%376 %370] [%358 %355]))
    (set! %379 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %380 (add %378 (bv #x00000001 32)))
    (store %380 %379 (bitvector 32) #:align 4)
    (br %381))

; %381
  (define-label (%381) #:merge #f
    (set! %382 (phi [%380 %377] [%336 %333]))
    (set! %383 (icmp/slt %21 (bv #x00000000 32)))
    (br %383 %384 %823))

; %384
  (define-label (%384) #:merge #f
    (set! %385 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %386 (load %385 pointer #:align 4))
    (set! %387 (icmp/eq %386 nullptr))
    (br %387 %396 %388))

; %388
  (define-label (%388) #:merge #f
    (set! %389 (load %137 (bitvector 8) #:align 1))
    (set! %390 (zext %389 (bitvector 32)))
    (set! %391 (shl %390 (bv #x00000007 32)))
    (set! %392 (or %391 (bv #xfff06013 32)))
    (set! %393 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %394 (getelementptr %386 (array-offset %382 4)))
    (store %392 %394 (bitvector 32) #:align 4)
    (set! %395 (load %393 (bitvector 32) #:align 4))
    (br %396))

; %396
  (define-label (%396) #:merge #f
    (set! %397 (phi [%382 %384] [%395 %388]))
    (set! %398 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %399 (add %397 (bv #x00000001 32)))
    (store %399 %398 (bitvector 32) #:align 4)
    (br %823))

; %400
  (define-label (%400) #:merge #f
    (set! %401 (add %21 (bv #x00000800 32)))
    (set! %402 (icmp/ult %401 (bv #x00001000 32)))
    (br %402 %403 %424))

; %403
  (define-label (%403) #:merge #f
    (set! %404 (getelementptr %137 (array-offset (bv #x00000001 32) 1)))
    (set! %405 (load %404 (bitvector 8) #:align 1))
    (set! %406 (zext %405 (bitvector 32)))
    (set! %407 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %408 (load %407 pointer #:align 4))
    (set! %409 (icmp/eq %408 nullptr))
    (br %409 %420 %410))

; %410
  (define-label (%410) #:merge #f
    (set! %411 (shl %406 (bv #x00000007 32)))
    (set! %412 (shl %406 (bv #x0000000f 32)))
    (set! %413 (shl %21 (bv #x00000014 32)))
    (set! %414 (or %413 %412))
    (set! %415 (or %414 %411))
    (set! %416 (or %415 (bv #x00004013 32)))
    (set! %417 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %418 (load %417 (bitvector 32) #:align 4))
    (set! %419 (getelementptr %408 (array-offset %418 4)))
    (store %416 %419 (bitvector 32) #:align 4)
    (br %420))

; %420
  (define-label (%420) #:merge #f
    (set! %421 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %422 (load %421 (bitvector 32) #:align 4))
    (set! %423 (add %422 (bv #x00000001 32)))
    (store %423 %421 (bitvector 32) #:align 4)
    (br %468))

; %424
  (define-label (%424) #:merge #f
    (set! %425 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %426 (load %425 pointer #:align 4))
    (set! %427 (icmp/eq %426 nullptr))
    (br %427 %428 %432))

; %428
  (define-label (%428) #:merge #f
    (set! %429 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %430 (load %429 (bitvector 32) #:align 4))
    (set! %431 (add %430 (bv #x00000001 32)))
    (store %431 %429 (bitvector 32) #:align 4)
    (br %442))

; %432
  (define-label (%432) #:merge #f
    (set! %433 (and %401 (bv #xfffff000 32)))
    (set! %434 (or %433 (bv #x000002b7 32)))
    (set! %435 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %436 (load %435 (bitvector 32) #:align 4))
    (set! %437 (getelementptr %426 (array-offset %436 4)))
    (store %434 %437 (bitvector 32) #:align 4)
    (set! %438 (load %425 pointer #:align 4))
    (set! %439 (load %435 (bitvector 32) #:align 4))
    (set! %440 (add %439 (bv #x00000001 32)))
    (store %440 %435 (bitvector 32) #:align 4)
    (set! %441 (icmp/eq %438 nullptr))
    (br %441 %442 %446))

; %442
  (define-label (%442) #:merge #f
    (set! %443 (phi [%429 %428] [%435 %432]))
    (set! %444 (phi [%431 %428] [%440 %432]))
    (set! %445 (add %444 (bv #x00000001 32)))
    (store %445 %443 (bitvector 32) #:align 4)
    (br %464))

; %446
  (define-label (%446) #:merge #f
    (set! %447 (shl %21 (bv #x00000014 32)))
    (set! %448 (or %447 (bv #x00028293 32)))
    (set! %449 (getelementptr %438 (array-offset %440 4)))
    (store %448 %449 (bitvector 32) #:align 4)
    (set! %450 (load %435 (bitvector 32) #:align 4))
    (set! %451 (load %425 pointer #:align 4))
    (set! %452 (add %450 (bv #x00000001 32)))
    (store %452 %435 (bitvector 32) #:align 4)
    (set! %453 (getelementptr %137 (array-offset (bv #x00000001 32) 1)))
    (set! %454 (load %453 (bitvector 8) #:align 1))
    (set! %455 (zext %454 (bitvector 32)))
    (set! %456 (icmp/eq %451 nullptr))
    (br %456 %464 %457))

; %457
  (define-label (%457) #:merge #f
    (set! %458 (shl %455 (bv #x00000007 32)))
    (set! %459 (shl %455 (bv #x0000000f 32)))
    (set! %460 (or %458 %459))
    (set! %461 (or %460 (bv #x00504033 32)))
    (set! %462 (getelementptr %451 (array-offset %452 4)))
    (store %461 %462 (bitvector 32) #:align 4)
    (set! %463 (load %435 (bitvector 32) #:align 4))
    (br %464))

; %464
  (define-label (%464) #:merge #f
    (set! %465 (phi [%452 %446] [%463 %457] [%445 %442]))
    (set! %466 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %467 (add %465 (bv #x00000001 32)))
    (store %467 %466 (bitvector 32) #:align 4)
    (br %468))

; %468
  (define-label (%468) #:merge #f
    (set! %469 (phi [%467 %464] [%423 %420]))
    (set! %470 (icmp/slt %21 (bv #x00000000 32)))
    (br %470 %471 %823))

; %471
  (define-label (%471) #:merge #f
    (set! %472 (load %137 (bitvector 8) #:align 1))
    (set! %473 (zext %472 (bitvector 32)))
    (set! %474 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %475 (load %474 pointer #:align 4))
    (set! %476 (icmp/eq %475 nullptr))
    (br %476 %485 %477))

; %477
  (define-label (%477) #:merge #f
    (set! %478 (shl %473 (bv #x00000007 32)))
    (set! %479 (shl %473 (bv #x0000000f 32)))
    (set! %480 (or %478 %479))
    (set! %481 (or %480 (bv #xfff04013 32)))
    (set! %482 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %483 (getelementptr %475 (array-offset %469 4)))
    (store %481 %483 (bitvector 32) #:align 4)
    (set! %484 (load %482 (bitvector 32) #:align 4))
    (br %485))

; %485
  (define-label (%485) #:merge #f
    (set! %486 (phi [%469 %471] [%484 %477]))
    (set! %487 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %488 (add %486 (bv #x00000001 32)))
    (store %488 %487 (bitvector 32) #:align 4)
    (br %823))

; %489
  (define-label (%489) #:merge #f
    (set! %490 (icmp/sgt %21 (bv #x0000001f 32)))
    (br %490 %491 %530))

; %491
  (define-label (%491) #:merge #f
    (set! %492 (getelementptr %137 (array-offset (bv #x00000001 32) 1)))
    (set! %493 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %494 (load %493 pointer #:align 4))
    (set! %495 (icmp/eq %494 nullptr))
    (br %495 %496 %500))

; %496
  (define-label (%496) #:merge #f
    (set! %497 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %498 (load %497 (bitvector 32) #:align 4))
    (set! %499 (add %498 (bv #x00000001 32)))
    (store %499 %497 (bitvector 32) #:align 4)
    (br %526))

; %500
  (define-label (%500) #:merge #f
    (set! %501 (load %137 (bitvector 8) #:align 1))
    (set! %502 (zext %501 (bitvector 32)))
    (set! %503 (shl %502 (bv #x00000007 32)))
    (set! %504 (load %492 (bitvector 8) #:align 1))
    (set! %505 (zext %504 (bitvector 32)))
    (set! %506 (shl %505 (bv #x0000000f 32)))
    (set! %507 (shl %21 (bv #x00000014 32)))
    (set! %508 (add %507 (bv #xfe000000 32)))
    (set! %509 (or %508 %503))
    (set! %510 (or %509 %506))
    (set! %511 (or %510 (bv #x00001013 32)))
    (set! %512 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %513 (load %512 (bitvector 32) #:align 4))
    (set! %514 (getelementptr %494 (array-offset %513 4)))
    (store %511 %514 (bitvector 32) #:align 4)
    (set! %515 (load %493 pointer #:align 4))
    (set! %516 (load %512 (bitvector 32) #:align 4))
    (set! %517 (add %516 (bv #x00000001 32)))
    (store %517 %512 (bitvector 32) #:align 4)
    (set! %518 (icmp/eq %515 nullptr))
    (br %518 %526 %519))

; %519
  (define-label (%519) #:merge #f
    (set! %520 (load %492 (bitvector 8) #:align 1))
    (set! %521 (zext %520 (bitvector 32)))
    (set! %522 (shl %521 (bv #x00000007 32)))
    (set! %523 (or %522 (bv #x00000013 32)))
    (set! %524 (getelementptr %515 (array-offset %517 4)))
    (store %523 %524 (bitvector 32) #:align 4)
    (set! %525 (load %512 (bitvector 32) #:align 4))
    (br %526))

; %526
  (define-label (%526) #:merge #f
    (set! %527 (phi [%512 %500] [%512 %519] [%497 %496]))
    (set! %528 (phi [%517 %500] [%525 %519] [%499 %496]))
    (set! %529 (add %528 (bv #x00000001 32)))
    (store %529 %527 (bitvector 32) #:align 4)
    (br %823))

; %530
  (define-label (%530) #:merge #f
    (set! %531 (icmp/eq %21 (bv #x00000000 32)))
    (br %531 %823 %532))

; %532
  (define-label (%532) #:merge #f
    (set! %533 (getelementptr %137 (array-offset (bv #x00000001 32) 1)))
    (set! %534 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %535 (load %534 pointer #:align 4))
    (set! %536 (icmp/eq %535 nullptr))
    (br %536 %537 %539))

; %537
  (define-label (%537) #:merge #f
    (set! %538 (shl %21 (bv #x00000014 32)))
    (br %551))

; %539
  (define-label (%539) #:merge #f
    (set! %540 (load %533 (bitvector 8) #:align 1))
    (set! %541 (zext %540 (bitvector 32)))
    (set! %542 (shl %541 (bv #x0000000f 32)))
    (set! %543 (shl %21 (bv #x00000014 32)))
    (set! %544 (sub (bv #x02000000 32) %543))
    (set! %545 (or %544 %542))
    (set! %546 (or %545 (bv #x00005293 32)))
    (set! %547 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %548 (load %547 (bitvector 32) #:align 4))
    (set! %549 (getelementptr %535 (array-offset %548 4)))
    (store %546 %549 (bitvector 32) #:align 4)
    (set! %550 (load %534 pointer #:align 4))
    (br %551))

; %551
  (define-label (%551) #:merge #f
    (set! %552 (phi [%538 %537] [%543 %539]))
    (set! %553 (phi [#(struct:nullptr) %537] [%550 %539]))
    (set! %554 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %555 (load %554 (bitvector 32) #:align 4))
    (set! %556 (add %555 (bv #x00000001 32)))
    (store %556 %554 (bitvector 32) #:align 4)
    (set! %557 (load %137 (bitvector 8) #:align 1))
    (set! %558 (zext %557 (bitvector 32)))
    (set! %559 (icmp/eq %553 nullptr))
    (br %559 %560 %562))

; %560
  (define-label (%560) #:merge #f
    (set! %561 (add %555 (bv #x00000002 32)))
    (store %561 %554 (bitvector 32) #:align 4)
    (br %575))

; %562
  (define-label (%562) #:merge #f
    (set! %563 (shl %558 (bv #x00000007 32)))
    (set! %564 (shl %558 (bv #x0000000f 32)))
    (set! %565 (or %552 %564))
    (set! %566 (or %565 %563))
    (set! %567 (or %566 (bv #x00001013 32)))
    (set! %568 (getelementptr %553 (array-offset %556 4)))
    (store %567 %568 (bitvector 32) #:align 4)
    (set! %569 (load %554 (bitvector 32) #:align 4))
    (set! %570 (load %534 pointer #:align 4))
    (set! %571 (add %569 (bv #x00000001 32)))
    (store %571 %554 (bitvector 32) #:align 4)
    (set! %572 (load %137 (bitvector 8) #:align 1))
    (set! %573 (zext %572 (bitvector 32)))
    (set! %574 (icmp/eq %570 nullptr))
    (br %574 %575 %578))

; %575
  (define-label (%575) #:merge #f
    (set! %576 (phi [%561 %560] [%571 %562]))
    (set! %577 (add %576 (bv #x00000001 32)))
    (store %577 %554 (bitvector 32) #:align 4)
    (br %598))

; %578
  (define-label (%578) #:merge #f
    (set! %579 (shl %573 (bv #x00000007 32)))
    (set! %580 (shl %573 (bv #x00000014 32)))
    (set! %581 (or %579 %580))
    (set! %582 (or %581 (bv #x0002e033 32)))
    (set! %583 (getelementptr %570 (array-offset %571 4)))
    (store %582 %583 (bitvector 32) #:align 4)
    (set! %584 (load %554 (bitvector 32) #:align 4))
    (set! %585 (load %534 pointer #:align 4))
    (set! %586 (add %584 (bv #x00000001 32)))
    (store %586 %554 (bitvector 32) #:align 4)
    (set! %587 (load %533 (bitvector 8) #:align 1))
    (set! %588 (zext %587 (bitvector 32)))
    (set! %589 (icmp/eq %585 nullptr))
    (br %589 %598 %590))

; %590
  (define-label (%590) #:merge #f
    (set! %591 (shl %588 (bv #x00000007 32)))
    (set! %592 (shl %588 (bv #x0000000f 32)))
    (set! %593 (or %552 %592))
    (set! %594 (or %593 %591))
    (set! %595 (or %594 (bv #x00001013 32)))
    (set! %596 (getelementptr %585 (array-offset %586 4)))
    (store %595 %596 (bitvector 32) #:align 4)
    (set! %597 (load %554 (bitvector 32) #:align 4))
    (br %598))

; %598
  (define-label (%598) #:merge #f
    (set! %599 (phi [%586 %578] [%597 %590] [%577 %575]))
    (set! %600 (add %599 (bv #x00000001 32)))
    (store %600 %554 (bitvector 32) #:align 4)
    (br %823))

; %601
  (define-label (%601) #:merge #f
    (set! %602 (icmp/sgt %21 (bv #x0000001f 32)))
    (br %602 %603 %642))

; %603
  (define-label (%603) #:merge #f
    (set! %604 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %605 (load %604 pointer #:align 4))
    (set! %606 (icmp/eq %605 nullptr))
    (br %606 %607 %611))

; %607
  (define-label (%607) #:merge #f
    (set! %608 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %609 (load %608 (bitvector 32) #:align 4))
    (set! %610 (add %609 (bv #x00000001 32)))
    (store %610 %608 (bitvector 32) #:align 4)
    (br %638))

; %611
  (define-label (%611) #:merge #f
    (set! %612 (getelementptr %137 (array-offset (bv #x00000001 32) 1)))
    (set! %613 (load %612 (bitvector 8) #:align 1))
    (set! %614 (zext %613 (bitvector 32)))
    (set! %615 (shl %614 (bv #x00000007 32)))
    (set! %616 (load %137 (bitvector 8) #:align 1))
    (set! %617 (zext %616 (bitvector 32)))
    (set! %618 (shl %617 (bv #x0000000f 32)))
    (set! %619 (shl %21 (bv #x00000014 32)))
    (set! %620 (add %619 (bv #xfe000000 32)))
    (set! %621 (or %620 %615))
    (set! %622 (or %621 %618))
    (set! %623 (or %622 (bv #x00005013 32)))
    (set! %624 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %625 (load %624 (bitvector 32) #:align 4))
    (set! %626 (getelementptr %605 (array-offset %625 4)))
    (store %623 %626 (bitvector 32) #:align 4)
    (set! %627 (load %604 pointer #:align 4))
    (set! %628 (load %624 (bitvector 32) #:align 4))
    (set! %629 (add %628 (bv #x00000001 32)))
    (store %629 %624 (bitvector 32) #:align 4)
    (set! %630 (icmp/eq %627 nullptr))
    (br %630 %638 %631))

; %631
  (define-label (%631) #:merge #f
    (set! %632 (load %137 (bitvector 8) #:align 1))
    (set! %633 (zext %632 (bitvector 32)))
    (set! %634 (shl %633 (bv #x00000007 32)))
    (set! %635 (or %634 (bv #x00000013 32)))
    (set! %636 (getelementptr %627 (array-offset %629 4)))
    (store %635 %636 (bitvector 32) #:align 4)
    (set! %637 (load %624 (bitvector 32) #:align 4))
    (br %638))

; %638
  (define-label (%638) #:merge #f
    (set! %639 (phi [%624 %611] [%624 %631] [%608 %607]))
    (set! %640 (phi [%629 %611] [%637 %631] [%610 %607]))
    (set! %641 (add %640 (bv #x00000001 32)))
    (store %641 %639 (bitvector 32) #:align 4)
    (br %823))

; %642
  (define-label (%642) #:merge #f
    (set! %643 (icmp/eq %21 (bv #x00000000 32)))
    (br %643 %823 %644))

; %644
  (define-label (%644) #:merge #f
    (set! %645 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %646 (load %645 pointer #:align 4))
    (set! %647 (icmp/eq %646 nullptr))
    (br %647 %648 %650))

; %648
  (define-label (%648) #:merge #f
    (set! %649 (shl %21 (bv #x00000014 32)))
    (br %662))

; %650
  (define-label (%650) #:merge #f
    (set! %651 (load %137 (bitvector 8) #:align 1))
    (set! %652 (zext %651 (bitvector 32)))
    (set! %653 (shl %652 (bv #x0000000f 32)))
    (set! %654 (shl %21 (bv #x00000014 32)))
    (set! %655 (sub (bv #x02000000 32) %654))
    (set! %656 (or %655 %653))
    (set! %657 (or %656 (bv #x00001293 32)))
    (set! %658 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %659 (load %658 (bitvector 32) #:align 4))
    (set! %660 (getelementptr %646 (array-offset %659 4)))
    (store %657 %660 (bitvector 32) #:align 4)
    (set! %661 (load %645 pointer #:align 4))
    (br %662))

; %662
  (define-label (%662) #:merge #f
    (set! %663 (phi [%649 %648] [%654 %650]))
    (set! %664 (phi [#(struct:nullptr) %648] [%661 %650]))
    (set! %665 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %666 (load %665 (bitvector 32) #:align 4))
    (set! %667 (add %666 (bv #x00000001 32)))
    (store %667 %665 (bitvector 32) #:align 4)
    (set! %668 (getelementptr %137 (array-offset (bv #x00000001 32) 1)))
    (set! %669 (load %668 (bitvector 8) #:align 1))
    (set! %670 (zext %669 (bitvector 32)))
    (set! %671 (icmp/eq %664 nullptr))
    (br %671 %672 %674))

; %672
  (define-label (%672) #:merge #f
    (set! %673 (add %666 (bv #x00000002 32)))
    (store %673 %665 (bitvector 32) #:align 4)
    (br %687))

; %674
  (define-label (%674) #:merge #f
    (set! %675 (shl %670 (bv #x00000007 32)))
    (set! %676 (shl %670 (bv #x0000000f 32)))
    (set! %677 (or %663 %676))
    (set! %678 (or %677 %675))
    (set! %679 (or %678 (bv #x00005013 32)))
    (set! %680 (getelementptr %664 (array-offset %667 4)))
    (store %679 %680 (bitvector 32) #:align 4)
    (set! %681 (load %665 (bitvector 32) #:align 4))
    (set! %682 (load %645 pointer #:align 4))
    (set! %683 (add %681 (bv #x00000001 32)))
    (store %683 %665 (bitvector 32) #:align 4)
    (set! %684 (load %668 (bitvector 8) #:align 1))
    (set! %685 (zext %684 (bitvector 32)))
    (set! %686 (icmp/eq %682 nullptr))
    (br %686 %687 %690))

; %687
  (define-label (%687) #:merge #f
    (set! %688 (phi [%673 %672] [%683 %674]))
    (set! %689 (add %688 (bv #x00000001 32)))
    (store %689 %665 (bitvector 32) #:align 4)
    (br %710))

; %690
  (define-label (%690) #:merge #f
    (set! %691 (shl %685 (bv #x00000007 32)))
    (set! %692 (shl %685 (bv #x00000014 32)))
    (set! %693 (or %691 %692))
    (set! %694 (or %693 (bv #x0002e033 32)))
    (set! %695 (getelementptr %682 (array-offset %683 4)))
    (store %694 %695 (bitvector 32) #:align 4)
    (set! %696 (load %665 (bitvector 32) #:align 4))
    (set! %697 (load %645 pointer #:align 4))
    (set! %698 (add %696 (bv #x00000001 32)))
    (store %698 %665 (bitvector 32) #:align 4)
    (set! %699 (load %137 (bitvector 8) #:align 1))
    (set! %700 (zext %699 (bitvector 32)))
    (set! %701 (icmp/eq %697 nullptr))
    (br %701 %710 %702))

; %702
  (define-label (%702) #:merge #f
    (set! %703 (shl %700 (bv #x00000007 32)))
    (set! %704 (shl %700 (bv #x0000000f 32)))
    (set! %705 (or %663 %704))
    (set! %706 (or %705 %703))
    (set! %707 (or %706 (bv #x00005013 32)))
    (set! %708 (getelementptr %697 (array-offset %698 4)))
    (store %707 %708 (bitvector 32) #:align 4)
    (set! %709 (load %665 (bitvector 32) #:align 4))
    (br %710))

; %710
  (define-label (%710) #:merge #f
    (set! %711 (phi [%698 %690] [%709 %702] [%689 %687]))
    (set! %712 (add %711 (bv #x00000001 32)))
    (store %712 %665 (bitvector 32) #:align 4)
    (br %823))

; %713
  (define-label (%713) #:merge #f
    (set! %714 (icmp/sgt %21 (bv #x0000001f 32)))
    (br %714 %715 %754))

; %715
  (define-label (%715) #:merge #f
    (set! %716 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %717 (load %716 pointer #:align 4))
    (set! %718 (icmp/eq %717 nullptr))
    (br %718 %736 %719))

; %719
  (define-label (%719) #:merge #f
    (set! %720 (getelementptr %137 (array-offset (bv #x00000001 32) 1)))
    (set! %721 (load %720 (bitvector 8) #:align 1))
    (set! %722 (zext %721 (bitvector 32)))
    (set! %723 (shl %722 (bv #x00000007 32)))
    (set! %724 (load %137 (bitvector 8) #:align 1))
    (set! %725 (zext %724 (bitvector 32)))
    (set! %726 (shl %725 (bv #x0000000f 32)))
    (set! %727 (shl %21 (bv #x00000014 32)))
    (set! %728 (add %727 (bv #xfe000000 32)))
    (set! %729 (or %728 %723))
    (set! %730 (or %729 %726))
    (set! %731 (or %730 (bv #x40005013 32)))
    (set! %732 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %733 (load %732 (bitvector 32) #:align 4))
    (set! %734 (getelementptr %717 (array-offset %733 4)))
    (store %731 %734 (bitvector 32) #:align 4)
    (set! %735 (load %716 pointer #:align 4))
    (br %736))

; %736
  (define-label (%736) #:merge #f
    (set! %737 (phi [#(struct:nullptr) %715] [%735 %719]))
    (set! %738 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %739 (load %738 (bitvector 32) #:align 4))
    (set! %740 (add %739 (bv #x00000001 32)))
    (store %740 %738 (bitvector 32) #:align 4)
    (set! %741 (load %137 (bitvector 8) #:align 1))
    (set! %742 (zext %741 (bitvector 32)))
    (set! %743 (icmp/eq %737 nullptr))
    (br %743 %751 %744))

; %744
  (define-label (%744) #:merge #f
    (set! %745 (shl %742 (bv #x00000007 32)))
    (set! %746 (shl %742 (bv #x0000000f 32)))
    (set! %747 (or %745 %746))
    (set! %748 (or %747 (bv #x41f05013 32)))
    (set! %749 (getelementptr %737 (array-offset %740 4)))
    (store %748 %749 (bitvector 32) #:align 4)
    (set! %750 (load %738 (bitvector 32) #:align 4))
    (br %751))

; %751
  (define-label (%751) #:merge #f
    (set! %752 (phi [%740 %736] [%750 %744]))
    (set! %753 (add %752 (bv #x00000001 32)))
    (store %753 %738 (bitvector 32) #:align 4)
    (br %823))

; %754
  (define-label (%754) #:merge #f
    (set! %755 (icmp/eq %21 (bv #x00000000 32)))
    (br %755 %823 %756))

; %756
  (define-label (%756) #:merge #f
    (set! %757 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %758 (load %757 pointer #:align 4))
    (set! %759 (icmp/eq %758 nullptr))
    (br %759 %772 %760))

; %760
  (define-label (%760) #:merge #f
    (set! %761 (load %137 (bitvector 8) #:align 1))
    (set! %762 (zext %761 (bitvector 32)))
    (set! %763 (shl %762 (bv #x0000000f 32)))
    (set! %764 (shl %21 (bv #x00000014 32)))
    (set! %765 (sub (bv #x02000000 32) %764))
    (set! %766 (or %765 %763))
    (set! %767 (or %766 (bv #x00001293 32)))
    (set! %768 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %769 (load %768 (bitvector 32) #:align 4))
    (set! %770 (getelementptr %758 (array-offset %769 4)))
    (store %767 %770 (bitvector 32) #:align 4)
    (set! %771 (load %757 pointer #:align 4))
    (br %772))

; %772
  (define-label (%772) #:merge #f
    (set! %773 (phi [#(struct:nullptr) %756] [%771 %760]))
    (set! %774 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %775 (load %774 (bitvector 32) #:align 4))
    (set! %776 (add %775 (bv #x00000001 32)))
    (store %776 %774 (bitvector 32) #:align 4)
    (set! %777 (getelementptr %137 (array-offset (bv #x00000001 32) 1)))
    (set! %778 (load %777 (bitvector 8) #:align 1))
    (set! %779 (zext %778 (bitvector 32)))
    (set! %780 (icmp/eq %773 nullptr))
    (br %780 %781 %783))

; %781
  (define-label (%781) #:merge #f
    (set! %782 (add %775 (bv #x00000002 32)))
    (store %782 %774 (bitvector 32) #:align 4)
    (br %797))

; %783
  (define-label (%783) #:merge #f
    (set! %784 (shl %779 (bv #x00000007 32)))
    (set! %785 (shl %779 (bv #x0000000f 32)))
    (set! %786 (shl %21 (bv #x00000014 32)))
    (set! %787 (or %786 %785))
    (set! %788 (or %787 %784))
    (set! %789 (or %788 (bv #x00005013 32)))
    (set! %790 (getelementptr %773 (array-offset %776 4)))
    (store %789 %790 (bitvector 32) #:align 4)
    (set! %791 (load %774 (bitvector 32) #:align 4))
    (set! %792 (load %757 pointer #:align 4))
    (set! %793 (add %791 (bv #x00000001 32)))
    (store %793 %774 (bitvector 32) #:align 4)
    (set! %794 (load %777 (bitvector 8) #:align 1))
    (set! %795 (zext %794 (bitvector 32)))
    (set! %796 (icmp/eq %792 nullptr))
    (br %796 %797 %800))

; %797
  (define-label (%797) #:merge #f
    (set! %798 (phi [%782 %781] [%793 %783]))
    (set! %799 (add %798 (bv #x00000001 32)))
    (store %799 %774 (bitvector 32) #:align 4)
    (br %820))

; %800
  (define-label (%800) #:merge #f
    (set! %801 (shl %795 (bv #x00000007 32)))
    (set! %802 (shl %795 (bv #x00000014 32)))
    (set! %803 (or %801 %802))
    (set! %804 (or %803 (bv #x0002e033 32)))
    (set! %805 (getelementptr %792 (array-offset %793 4)))
    (store %804 %805 (bitvector 32) #:align 4)
    (set! %806 (load %774 (bitvector 32) #:align 4))
    (set! %807 (load %757 pointer #:align 4))
    (set! %808 (add %806 (bv #x00000001 32)))
    (store %808 %774 (bitvector 32) #:align 4)
    (set! %809 (load %137 (bitvector 8) #:align 1))
    (set! %810 (zext %809 (bitvector 32)))
    (set! %811 (icmp/eq %807 nullptr))
    (br %811 %820 %812))

; %812
  (define-label (%812) #:merge #f
    (set! %813 (shl %810 (bv #x00000007 32)))
    (set! %814 (shl %810 (bv #x0000000f 32)))
    (set! %815 (or %786 %814))
    (set! %816 (or %815 %813))
    (set! %817 (or %816 (bv #x40005013 32)))
    (set! %818 (getelementptr %807 (array-offset %808 4)))
    (store %817 %818 (bitvector 32) #:align 4)
    (set! %819 (load %774 (bitvector 32) #:align 4))
    (br %820))

; %820
  (define-label (%820) #:merge #f
    (set! %821 (phi [%808 %800] [%819 %812] [%799 %797]))
    (set! %822 (add %821 (bv #x00000001 32)))
    (store %822 %774 (bitvector 32) #:align 4)
    (br %823))

; %823
  (define-label (%823) #:merge #f
    (br %104 %824 %3989))

; %824
  (define-label (%824) #:merge #f
    (set! %825 (sext %101 (bitvector 16)))
    (set! %826 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %827 (load %826 pointer #:align 4))
    (set! %828 (icmp/eq %827 nullptr))
    (br %828 %846 %829))

; %829
  (define-label (%829) #:merge #f
    (set! %830 (lshr %825 (bv #x0005 16)))
    (set! %831 (zext %830 (bitvector 32)))
    (set! %832 (shl %831 (bv #x00000019 32)))
    (set! %833 (load %137 (bitvector 8) #:align 1))
    (set! %834 (zext %833 (bitvector 32)))
    (set! %835 (shl %834 (bv #x00000014 32)))
    (set! %836 (shl %825 (bv #x0007 16)))
    (set! %837 (and %836 (bv #x0f80 16)))
    (set! %838 (zext %837 (bitvector 32)))
    (set! %839 (or %832 %838))
    (set! %840 (or %839 %835))
    (set! %841 (or %840 (bv #x00042023 32)))
    (set! %842 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %843 (load %842 (bitvector 32) #:align 4))
    (set! %844 (getelementptr %827 (array-offset %843 4)))
    (store %841 %844 (bitvector 32) #:align 4)
    (set! %845 (load %826 pointer #:align 4))
    (br %846))

; %846
  (define-label (%846) #:merge #f
    (set! %847 (phi [#(struct:nullptr) %824] [%845 %829]))
    (set! %848 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %849 (load %848 (bitvector 32) #:align 4))
    (set! %850 (add %849 (bv #x00000001 32)))
    (store %850 %848 (bitvector 32) #:align 4)
    (set! %851 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset %25 2) (array-offset (bv #x00000001 32) 1)))
    (set! %852 (load %851 (bitvector 8) #:align 1))
    (set! %853 (sext %852 (bitvector 16)))
    (set! %854 (icmp/eq %847 nullptr))
    (br %854 %871 %855))

; %855
  (define-label (%855) #:merge #f
    (set! %856 (lshr %853 (bv #x0005 16)))
    (set! %857 (zext %856 (bitvector 32)))
    (set! %858 (shl %857 (bv #x00000019 32)))
    (set! %859 (getelementptr %137 (array-offset (bv #x00000001 32) 1)))
    (set! %860 (load %859 (bitvector 8) #:align 1))
    (set! %861 (zext %860 (bitvector 32)))
    (set! %862 (shl %861 (bv #x00000014 32)))
    (set! %863 (shl %853 (bv #x0007 16)))
    (set! %864 (and %863 (bv #x0f80 16)))
    (set! %865 (zext %864 (bitvector 32)))
    (set! %866 (or %858 %865))
    (set! %867 (or %866 %862))
    (set! %868 (or %867 (bv #x00042023 32)))
    (set! %869 (getelementptr %847 (array-offset %850 4)))
    (store %868 %869 (bitvector 32) #:align 4)
    (set! %870 (load %848 (bitvector 32) #:align 4))
    (br %871))

; %871
  (define-label (%871) #:merge #f
    (set! %872 (phi [%850 %846] [%870 %855]))
    (set! %873 (add %872 (bv #x00000001 32)))
    (store %873 %848 (bitvector 32) #:align 4)
    (br %3989))

; %874
  (define-label (%874) #:merge #f
    (set! %875 (icmp/eq %21 (bv #x00000001 32)))
    (br %875 %876 %1043))

; %876
  (define-label (%876) #:merge #f
    (set! %877 (load %26 (bitvector 8) #:align 1))
    (set! %878 (lshr (bv #x00000bc0 32) %25))
    (set! %879 (and %878 (bv #x00000001 32)))
    (set! %880 (icmp/ne %879 (bv #x00000000 32)))
    (br %880 %881 %912))

; %881
  (define-label (%881) #:merge #f
    (set! %882 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %883 (load %882 pointer #:align 4))
    (set! %884 (icmp/eq %883 nullptr))
    (br %884 %885 %889))

; %885
  (define-label (%885) #:merge #f
    (set! %886 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %887 (load %886 (bitvector 32) #:align 4))
    (set! %888 (add %887 (bv #x00000001 32)))
    (store %888 %886 (bitvector 32) #:align 4)
    (br %908))

; %889
  (define-label (%889) #:merge #f
    (set! %890 (sext %877 (bitvector 32)))
    (set! %891 (shl %890 (bv #x00000014 32)))
    (set! %892 (or %891 (bv #x00042e03 32)))
    (set! %893 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %894 (load %893 (bitvector 32) #:align 4))
    (set! %895 (getelementptr %883 (array-offset %894 4)))
    (store %892 %895 (bitvector 32) #:align 4)
    (set! %896 (load %882 pointer #:align 4))
    (set! %897 (load %893 (bitvector 32) #:align 4))
    (set! %898 (add %897 (bv #x00000001 32)))
    (store %898 %893 (bitvector 32) #:align 4)
    (set! %899 (icmp/eq %896 nullptr))
    (br %899 %908 %900))

; %900
  (define-label (%900) #:merge #f
    (set! %901 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset %25 2) (array-offset (bv #x00000001 32) 1)))
    (set! %902 (load %901 (bitvector 8) #:align 1))
    (set! %903 (sext %902 (bitvector 32)))
    (set! %904 (shl %903 (bv #x00000014 32)))
    (set! %905 (or %904 (bv #x00042383 32)))
    (set! %906 (getelementptr %896 (array-offset %898 4)))
    (store %905 %906 (bitvector 32) #:align 4)
    (set! %907 (load %893 (bitvector 32) #:align 4))
    (br %908))

; %908
  (define-label (%908) #:merge #f
    (set! %909 (phi [%893 %889] [%893 %900] [%886 %885]))
    (set! %910 (phi [%898 %889] [%907 %900] [%888 %885]))
    (set! %911 (add %910 (bv #x00000001 32)))
    (store %911 %909 (bitvector 32) #:align 4)
    (br %912))

; %912
  (define-label (%912) #:merge #f
    (set! %913 (phi [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000c 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %908] [%26 %876]))
    (set! %914 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %915 (load %914 pointer #:align 4))
    (set! %916 (icmp/eq %915 nullptr))
    (br %916 %925 %917))

; %917
  (define-label (%917) #:merge #f
    (set! %918 (load %913 (bitvector 8) #:align 1))
    (set! %919 (zext %918 (bitvector 32)))
    (set! %920 (shl %919 (bv #x00000007 32)))
    (set! %921 (or %920 (bv #x00000013 32)))
    (set! %922 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %923 (load %922 (bitvector 32) #:align 4))
    (set! %924 (getelementptr %915 (array-offset %923 4)))
    (store %921 %924 (bitvector 32) #:align 4)
    (br %925))

; %925
  (define-label (%925) #:merge #f
    (set! %926 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %927 (load %926 (bitvector 32) #:align 4))
    (set! %928 (add %927 (bv #x00000001 32)))
    (store %928 %926 (bitvector 32) #:align 4)
    (br %880 %929 %3989))

; %929
  (define-label (%929) #:merge #f
    (set! %930 (sext %877 (bitvector 16)))
    (set! %931 (load %914 pointer #:align 4))
    (set! %932 (icmp/eq %931 nullptr))
    (br %932 %933 %935))

; %933
  (define-label (%933) #:merge #f
    (set! %934 (add %927 (bv #x00000002 32)))
    (store %934 %926 (bitvector 32) #:align 4)
    (br %972))

; %935
  (define-label (%935) #:merge #f
    (set! %936 (lshr %930 (bv #x0005 16)))
    (set! %937 (zext %936 (bitvector 32)))
    (set! %938 (shl %937 (bv #x00000019 32)))
    (set! %939 (load %913 (bitvector 8) #:align 1))
    (set! %940 (zext %939 (bitvector 32)))
    (set! %941 (shl %940 (bv #x00000014 32)))
    (set! %942 (shl %930 (bv #x0007 16)))
    (set! %943 (and %942 (bv #x0f80 16)))
    (set! %944 (zext %943 (bitvector 32)))
    (set! %945 (or %938 %944))
    (set! %946 (or %945 %941))
    (set! %947 (or %946 (bv #x00042023 32)))
    (set! %948 (getelementptr %931 (array-offset %928 4)))
    (store %947 %948 (bitvector 32) #:align 4)
    (set! %949 (load %914 pointer #:align 4))
    (set! %950 (load %926 (bitvector 32) #:align 4))
    (set! %951 (add %950 (bv #x00000001 32)))
    (store %951 %926 (bitvector 32) #:align 4)
    (set! %952 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset %25 2) (array-offset (bv #x00000001 32) 1)))
    (set! %953 (load %952 (bitvector 8) #:align 1))
    (set! %954 (sext %953 (bitvector 16)))
    (set! %955 (icmp/eq %949 nullptr))
    (br %955 %972 %956))

; %956
  (define-label (%956) #:merge #f
    (set! %957 (lshr %954 (bv #x0005 16)))
    (set! %958 (zext %957 (bitvector 32)))
    (set! %959 (shl %958 (bv #x00000019 32)))
    (set! %960 (getelementptr %913 (array-offset (bv #x00000001 32) 1)))
    (set! %961 (load %960 (bitvector 8) #:align 1))
    (set! %962 (zext %961 (bitvector 32)))
    (set! %963 (shl %962 (bv #x00000014 32)))
    (set! %964 (shl %954 (bv #x0007 16)))
    (set! %965 (and %964 (bv #x0f80 16)))
    (set! %966 (zext %965 (bitvector 32)))
    (set! %967 (or %959 %966))
    (set! %968 (or %967 %963))
    (set! %969 (or %968 (bv #x00042023 32)))
    (set! %970 (getelementptr %949 (array-offset %951 4)))
    (store %969 %970 (bitvector 32) #:align 4)
    (set! %971 (load %926 (bitvector 32) #:align 4))
    (br %972))

; %972
  (define-label (%972) #:merge #f
    (set! %973 (phi [%951 %935] [%971 %956] [%934 %933]))
    (set! %974 (add %973 (bv #x00000001 32)))
    (store %974 %926 (bitvector 32) #:align 4)
    (br %3989))

; %975
  (define-label (%975) #:merge #f
    (set! %976 (and %30 (bv #x00000008 32)))
    (set! %977 (icmp/eq %976 (bv #x00000000 32)))
    (br %977 %978 %1043))

; %978
  (define-label (%978) #:merge #f
    (set! %979 (add %21 (bv #x00000800 32)))
    (set! %980 (and %21 (bv #x00000fff 32)))
    (set! %981 (icmp/ult %979 (bv #x00001000 32)))
    (set! %982 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %983 (load %982 pointer #:align 4))
    (set! %984 (icmp/eq %983 nullptr))
    (br %981 %1009 %985))

; %985
  (define-label (%985) #:merge #f
    (br %984 %986 %990))

; %986
  (define-label (%986) #:merge #f
    (set! %987 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %988 (load %987 (bitvector 32) #:align 4))
    (set! %989 (add %988 (bv #x00000001 32)))
    (store %989 %987 (bitvector 32) #:align 4)
    (br %1005))

; %990
  (define-label (%990) #:merge #f
    (set! %991 (and %979 (bv #xfffff000 32)))
    (set! %992 (or %991 (bv #x00000eb7 32)))
    (set! %993 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %994 (load %993 (bitvector 32) #:align 4))
    (set! %995 (getelementptr %983 (array-offset %994 4)))
    (store %992 %995 (bitvector 32) #:align 4)
    (set! %996 (load %982 pointer #:align 4))
    (set! %997 (load %993 (bitvector 32) #:align 4))
    (set! %998 (add %997 (bv #x00000001 32)))
    (store %998 %993 (bitvector 32) #:align 4)
    (set! %999 (icmp/eq %996 nullptr))
    (br %999 %1005 %1000))

; %1000
  (define-label (%1000) #:merge #f
    (set! %1001 (shl %980 (bv #x00000014 32)))
    (set! %1002 (or %1001 (bv #x000e8e93 32)))
    (set! %1003 (getelementptr %996 (array-offset %998 4)))
    (store %1002 %1003 (bitvector 32) #:align 4)
    (set! %1004 (load %993 (bitvector 32) #:align 4))
    (br %1005))

; %1005
  (define-label (%1005) #:merge #f
    (set! %1006 (phi [%993 %990] [%993 %1000] [%987 %986]))
    (set! %1007 (phi [%998 %990] [%1004 %1000] [%989 %986]))
    (set! %1008 (add %1007 (bv #x00000001 32)))
    (store %1008 %1006 (bitvector 32) #:align 4)
    (br %1020))

; %1009
  (define-label (%1009) #:merge #f
    (br %984 %1016 %1010))

; %1010
  (define-label (%1010) #:merge #f
    (set! %1011 (shl %980 (bv #x00000014 32)))
    (set! %1012 (or %1011 (bv #x00000e93 32)))
    (set! %1013 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1014 (load %1013 (bitvector 32) #:align 4))
    (set! %1015 (getelementptr %983 (array-offset %1014 4)))
    (store %1012 %1015 (bitvector 32) #:align 4)
    (br %1016))

; %1016
  (define-label (%1016) #:merge #f
    (set! %1017 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1018 (load %1017 (bitvector 32) #:align 4))
    (set! %1019 (add %1018 (bv #x00000001 32)))
    (store %1019 %1017 (bitvector 32) #:align 4)
    (br %1020))

; %1020
  (define-label (%1020) #:merge #f
    (set! %1021 (phi [%1008 %1005] [%1019 %1016]))
    (set! %1022 (icmp/sgt %21 (bv #xffffffff 32)))
    (set! %1023 (load %982 pointer #:align 4))
    (set! %1024 (icmp/eq %1023 nullptr))
    (br %1022 %1025 %1034))

; %1025
  (define-label (%1025) #:merge #f
    (br %1024 %1030 %1026))

; %1026
  (define-label (%1026) #:merge #f
    (set! %1027 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1028 (getelementptr %1023 (array-offset %1021 4)))
    (store (bv #x00000f13 32) %1028 (bitvector 32) #:align 4)
    (set! %1029 (load %1027 (bitvector 32) #:align 4))
    (br %1030))

; %1030
  (define-label (%1030) #:merge #f
    (set! %1031 (phi [%1029 %1026] [%1021 %1025]))
    (set! %1032 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1033 (add %1031 (bv #x00000001 32)))
    (store %1033 %1032 (bitvector 32) #:align 4)
    (br %1043))

; %1034
  (define-label (%1034) #:merge #f
    (br %1024 %1039 %1035))

; %1035
  (define-label (%1035) #:merge #f
    (set! %1036 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1037 (getelementptr %1023 (array-offset %1021 4)))
    (store (bv #xfff00f13 32) %1037 (bitvector 32) #:align 4)
    (set! %1038 (load %1036 (bitvector 32) #:align 4))
    (br %1039))

; %1039
  (define-label (%1039) #:merge #f
    (set! %1040 (phi [%1038 %1035] [%1021 %1034]))
    (set! %1041 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1042 (add %1040 (bv #x00000001 32)))
    (store %1042 %1041 (bitvector 32) #:align 4)
    (br %1043))

; %1043
  (define-label (%1043) #:merge #f
    (set! %1044 (phi [%29 %975] [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000d 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %1030] [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000d 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %1039] [%29 %874]))
    (set! %1045 (and %7 (bv #xf0 8)))
    (call @emit_alu_r32 %26 %1044 %1 %1045)
    (br %3989))

; %1046
  (define-label (%1046) #:merge #f
    (set! %1047 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset %25 2) (array-offset (bv #x00000001 32) 1)))
    (set! %1048 (load %1047 (bitvector 8) #:align 1))
    (set! %1049 (lshr (bv #x00000bc0 32) %25))
    (set! %1050 (and %1049 (bv #x00000001 32)))
    (set! %1051 (icmp/eq %1050 (bv #x00000000 32)))
    (br %1051 %1067 %1052))

; %1052
  (define-label (%1052) #:merge #f
    (set! %1053 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1054 (load %1053 pointer #:align 4))
    (set! %1055 (icmp/eq %1054 nullptr))
    (br %1055 %1063 %1056))

; %1056
  (define-label (%1056) #:merge #f
    (set! %1057 (sext %1048 (bitvector 32)))
    (set! %1058 (shl %1057 (bv #x00000014 32)))
    (set! %1059 (or %1058 (bv #x00042383 32)))
    (set! %1060 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1061 (load %1060 (bitvector 32) #:align 4))
    (set! %1062 (getelementptr %1054 (array-offset %1061 4)))
    (store %1059 %1062 (bitvector 32) #:align 4)
    (br %1063))

; %1063
  (define-label (%1063) #:merge #f
    (set! %1064 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1065 (load %1064 (bitvector 32) #:align 4))
    (set! %1066 (add %1065 (bv #x00000001 32)))
    (store %1066 %1064 (bitvector 32) #:align 4)
    (br %1067))

; %1067
  (define-label (%1067) #:merge #f
    (set! %1068 (phi [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000c 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %1063] [%26 %1046]))
    (set! %1069 (lshr %7 (bv #x04 8)))
    (set! %1070 (zext %1069 (bitvector 32)))
    (switch %1070 %1672 [(bv #x0000000b 32) %1071] [(bv #x00000000 32) %1122] [(bv #x00000001 32) %1188] [(bv #x00000005 32) %1272] [(bv #x00000004 32) %1338] [(bv #x0000000a 32) %1404] [(bv #x00000006 32) %1470] [(bv #x00000007 32) %1536] [(bv #x0000000c 32) %1602]))

; %1071
  (define-label (%1071) #:merge #f
    (set! %1072 (getelementptr %1068 (array-offset (bv #x00000001 32) 1)))
    (set! %1073 (load %1072 (bitvector 8) #:align 1))
    (set! %1074 (add %21 (bv #x00000800 32)))
    (set! %1075 (and %21 (bv #x00000fff 32)))
    (set! %1076 (icmp/ult %1074 (bv #x00001000 32)))
    (br %1076 %1106 %1077))

; %1077
  (define-label (%1077) #:merge #f
    (set! %1078 (zext %1073 (bitvector 32)))
    (set! %1079 (shl %1078 (bv #x00000007 32)))
    (set! %1080 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1081 (load %1080 pointer #:align 4))
    (set! %1082 (icmp/eq %1081 nullptr))
    (br %1082 %1083 %1087))

; %1083
  (define-label (%1083) #:merge #f
    (set! %1084 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1085 (load %1084 (bitvector 32) #:align 4))
    (set! %1086 (add %1085 (bv #x00000001 32)))
    (store %1086 %1084 (bitvector 32) #:align 4)
    (br %1668))

; %1087
  (define-label (%1087) #:merge #f
    (set! %1088 (and %1074 (bv #xfffff000 32)))
    (set! %1089 (or %1088 %1079))
    (set! %1090 (or %1089 (bv #x00000037 32)))
    (set! %1091 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1092 (load %1091 (bitvector 32) #:align 4))
    (set! %1093 (getelementptr %1081 (array-offset %1092 4)))
    (store %1090 %1093 (bitvector 32) #:align 4)
    (set! %1094 (load %1080 pointer #:align 4))
    (set! %1095 (load %1091 (bitvector 32) #:align 4))
    (set! %1096 (add %1095 (bv #x00000001 32)))
    (store %1096 %1091 (bitvector 32) #:align 4)
    (set! %1097 (icmp/eq %1094 nullptr))
    (br %1097 %1668 %1098))

; %1098
  (define-label (%1098) #:merge #f
    (set! %1099 (shl %1078 (bv #x0000000f 32)))
    (set! %1100 (shl %1075 (bv #x00000014 32)))
    (set! %1101 (or %1100 %1079))
    (set! %1102 (or %1101 %1099))
    (set! %1103 (or %1102 (bv #x00000013 32)))
    (set! %1104 (getelementptr %1094 (array-offset %1096 4)))
    (store %1103 %1104 (bitvector 32) #:align 4)
    (set! %1105 (load %1091 (bitvector 32) #:align 4))
    (br %1668))

; %1106
  (define-label (%1106) #:merge #f
    (set! %1107 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1108 (load %1107 pointer #:align 4))
    (set! %1109 (icmp/eq %1108 nullptr))
    (br %1109 %1119 %1110))

; %1110
  (define-label (%1110) #:merge #f
    (set! %1111 (zext %1073 (bitvector 32)))
    (set! %1112 (shl %1111 (bv #x00000007 32)))
    (set! %1113 (shl %1075 (bv #x00000014 32)))
    (set! %1114 (or %1113 %1112))
    (set! %1115 (or %1114 (bv #x00000013 32)))
    (set! %1116 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1117 (load %1116 (bitvector 32) #:align 4))
    (set! %1118 (getelementptr %1108 (array-offset %1117 4)))
    (store %1115 %1118 (bitvector 32) #:align 4)
    (br %1119))

; %1119
  (define-label (%1119) #:merge #f
    (set! %1120 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1121 (load %1120 (bitvector 32) #:align 4))
    (br %1668))

; %1122
  (define-label (%1122) #:merge #f
    (set! %1123 (add %21 (bv #x00000800 32)))
    (set! %1124 (icmp/ult %1123 (bv #x00001000 32)))
    (br %1124 %1125 %1145))

; %1125
  (define-label (%1125) #:merge #f
    (set! %1126 (getelementptr %1068 (array-offset (bv #x00000001 32) 1)))
    (set! %1127 (load %1126 (bitvector 8) #:align 1))
    (set! %1128 (zext %1127 (bitvector 32)))
    (set! %1129 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1130 (load %1129 pointer #:align 4))
    (set! %1131 (icmp/eq %1130 nullptr))
    (br %1131 %1142 %1132))

; %1132
  (define-label (%1132) #:merge #f
    (set! %1133 (shl %1128 (bv #x00000007 32)))
    (set! %1134 (shl %1128 (bv #x0000000f 32)))
    (set! %1135 (shl %21 (bv #x00000014 32)))
    (set! %1136 (or %1135 %1134))
    (set! %1137 (or %1136 %1133))
    (set! %1138 (or %1137 (bv #x00000013 32)))
    (set! %1139 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1140 (load %1139 (bitvector 32) #:align 4))
    (set! %1141 (getelementptr %1130 (array-offset %1140 4)))
    (store %1138 %1141 (bitvector 32) #:align 4)
    (br %1142))

; %1142
  (define-label (%1142) #:merge #f
    (set! %1143 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1144 (load %1143 (bitvector 32) #:align 4))
    (br %1668))

; %1145
  (define-label (%1145) #:merge #f
    (set! %1146 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1147 (load %1146 pointer #:align 4))
    (set! %1148 (icmp/eq %1147 nullptr))
    (br %1148 %1149 %1153))

; %1149
  (define-label (%1149) #:merge #f
    (set! %1150 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1151 (load %1150 (bitvector 32) #:align 4))
    (set! %1152 (add %1151 (bv #x00000001 32)))
    (store %1152 %1150 (bitvector 32) #:align 4)
    (br %1163))

; %1153
  (define-label (%1153) #:merge #f
    (set! %1154 (and %1123 (bv #xfffff000 32)))
    (set! %1155 (or %1154 (bv #x000002b7 32)))
    (set! %1156 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1157 (load %1156 (bitvector 32) #:align 4))
    (set! %1158 (getelementptr %1147 (array-offset %1157 4)))
    (store %1155 %1158 (bitvector 32) #:align 4)
    (set! %1159 (load %1146 pointer #:align 4))
    (set! %1160 (load %1156 (bitvector 32) #:align 4))
    (set! %1161 (add %1160 (bv #x00000001 32)))
    (store %1161 %1156 (bitvector 32) #:align 4)
    (set! %1162 (icmp/eq %1159 nullptr))
    (br %1162 %1163 %1167))

; %1163
  (define-label (%1163) #:merge #f
    (set! %1164 (phi [%1150 %1149] [%1156 %1153]))
    (set! %1165 (phi [%1152 %1149] [%1161 %1153]))
    (set! %1166 (add %1165 (bv #x00000001 32)))
    (store %1166 %1164 (bitvector 32) #:align 4)
    (br %1185))

; %1167
  (define-label (%1167) #:merge #f
    (set! %1168 (shl %21 (bv #x00000014 32)))
    (set! %1169 (or %1168 (bv #x00028293 32)))
    (set! %1170 (getelementptr %1159 (array-offset %1161 4)))
    (store %1169 %1170 (bitvector 32) #:align 4)
    (set! %1171 (load %1156 (bitvector 32) #:align 4))
    (set! %1172 (load %1146 pointer #:align 4))
    (set! %1173 (add %1171 (bv #x00000001 32)))
    (store %1173 %1156 (bitvector 32) #:align 4)
    (set! %1174 (getelementptr %1068 (array-offset (bv #x00000001 32) 1)))
    (set! %1175 (load %1174 (bitvector 8) #:align 1))
    (set! %1176 (zext %1175 (bitvector 32)))
    (set! %1177 (icmp/eq %1172 nullptr))
    (br %1177 %1185 %1178))

; %1178
  (define-label (%1178) #:merge #f
    (set! %1179 (shl %1176 (bv #x00000007 32)))
    (set! %1180 (shl %1176 (bv #x0000000f 32)))
    (set! %1181 (or %1179 %1180))
    (set! %1182 (or %1181 (bv #x00500033 32)))
    (set! %1183 (getelementptr %1172 (array-offset %1173 4)))
    (store %1182 %1183 (bitvector 32) #:align 4)
    (set! %1184 (load %1156 (bitvector 32) #:align 4))
    (br %1185))

; %1185
  (define-label (%1185) #:merge #f
    (set! %1186 (phi [%1173 %1167] [%1184 %1178] [%1166 %1163]))
    (set! %1187 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (br %1668))

; %1188
  (define-label (%1188) #:merge #f
    (set! %1189 (sub (bv #x00000800 32) %21))
    (set! %1190 (icmp/ult %1189 (bv #x00001000 32)))
    (br %1190 %1191 %1212))

; %1191
  (define-label (%1191) #:merge #f
    (set! %1192 (getelementptr %1068 (array-offset (bv #x00000001 32) 1)))
    (set! %1193 (load %1192 (bitvector 8) #:align 1))
    (set! %1194 (zext %1193 (bitvector 32)))
    (set! %1195 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1196 (load %1195 pointer #:align 4))
    (set! %1197 (icmp/eq %1196 nullptr))
    (br %1197 %1209 %1198))

; %1198
  (define-label (%1198) #:merge #f
    (set! %1199 (shl %1194 (bv #x00000007 32)))
    (set! %1200 (shl %1194 (bv #x0000000f 32)))
    (set! %1201 (shl %21 (bv #x00000014 32)))
    (set! %1202 (sub (bv #x00000000 32) %1201))
    (set! %1203 (or %1200 %1202))
    (set! %1204 (or %1203 %1199))
    (set! %1205 (or %1204 (bv #x00000013 32)))
    (set! %1206 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1207 (load %1206 (bitvector 32) #:align 4))
    (set! %1208 (getelementptr %1196 (array-offset %1207 4)))
    (store %1205 %1208 (bitvector 32) #:align 4)
    (br %1209))

; %1209
  (define-label (%1209) #:merge #f
    (set! %1210 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1211 (load %1210 (bitvector 32) #:align 4))
    (br %1668))

; %1212
  (define-label (%1212) #:merge #f
    (set! %1213 (add %21 (bv #x00000800 32)))
    (set! %1214 (and %21 (bv #x00000fff 32)))
    (set! %1215 (icmp/ult %1213 (bv #x00001000 32)))
    (set! %1216 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1217 (load %1216 pointer #:align 4))
    (set! %1218 (icmp/eq %1217 nullptr))
    (br %1215 %1243 %1219))

; %1219
  (define-label (%1219) #:merge #f
    (br %1218 %1220 %1224))

; %1220
  (define-label (%1220) #:merge #f
    (set! %1221 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1222 (load %1221 (bitvector 32) #:align 4))
    (set! %1223 (add %1222 (bv #x00000001 32)))
    (store %1223 %1221 (bitvector 32) #:align 4)
    (br %1239))

; %1224
  (define-label (%1224) #:merge #f
    (set! %1225 (and %1213 (bv #xfffff000 32)))
    (set! %1226 (or %1225 (bv #x000002b7 32)))
    (set! %1227 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1228 (load %1227 (bitvector 32) #:align 4))
    (set! %1229 (getelementptr %1217 (array-offset %1228 4)))
    (store %1226 %1229 (bitvector 32) #:align 4)
    (set! %1230 (load %1216 pointer #:align 4))
    (set! %1231 (load %1227 (bitvector 32) #:align 4))
    (set! %1232 (add %1231 (bv #x00000001 32)))
    (store %1232 %1227 (bitvector 32) #:align 4)
    (set! %1233 (icmp/eq %1230 nullptr))
    (br %1233 %1239 %1234))

; %1234
  (define-label (%1234) #:merge #f
    (set! %1235 (shl %1214 (bv #x00000014 32)))
    (set! %1236 (or %1235 (bv #x00028293 32)))
    (set! %1237 (getelementptr %1230 (array-offset %1232 4)))
    (store %1236 %1237 (bitvector 32) #:align 4)
    (set! %1238 (load %1227 (bitvector 32) #:align 4))
    (br %1239))

; %1239
  (define-label (%1239) #:merge #f
    (set! %1240 (phi [%1227 %1224] [%1227 %1234] [%1221 %1220]))
    (set! %1241 (phi [%1232 %1224] [%1238 %1234] [%1223 %1220]))
    (set! %1242 (add %1241 (bv #x00000001 32)))
    (store %1242 %1240 (bitvector 32) #:align 4)
    (br %1254))

; %1243
  (define-label (%1243) #:merge #f
    (br %1218 %1250 %1244))

; %1244
  (define-label (%1244) #:merge #f
    (set! %1245 (shl %1214 (bv #x00000014 32)))
    (set! %1246 (or %1245 (bv #x00000293 32)))
    (set! %1247 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1248 (load %1247 (bitvector 32) #:align 4))
    (set! %1249 (getelementptr %1217 (array-offset %1248 4)))
    (store %1246 %1249 (bitvector 32) #:align 4)
    (br %1250))

; %1250
  (define-label (%1250) #:merge #f
    (set! %1251 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1252 (load %1251 (bitvector 32) #:align 4))
    (set! %1253 (add %1252 (bv #x00000001 32)))
    (store %1253 %1251 (bitvector 32) #:align 4)
    (br %1254))

; %1254
  (define-label (%1254) #:merge #f
    (set! %1255 (phi [%1242 %1239] [%1253 %1250]))
    (set! %1256 (getelementptr %1068 (array-offset (bv #x00000001 32) 1)))
    (set! %1257 (load %1256 (bitvector 8) #:align 1))
    (set! %1258 (zext %1257 (bitvector 32)))
    (set! %1259 (load %1216 pointer #:align 4))
    (set! %1260 (icmp/eq %1259 nullptr))
    (br %1260 %1269 %1261))

; %1261
  (define-label (%1261) #:merge #f
    (set! %1262 (shl %1258 (bv #x00000007 32)))
    (set! %1263 (shl %1258 (bv #x0000000f 32)))
    (set! %1264 (or %1262 %1263))
    (set! %1265 (or %1264 (bv #x40500033 32)))
    (set! %1266 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1267 (getelementptr %1259 (array-offset %1255 4)))
    (store %1265 %1267 (bitvector 32) #:align 4)
    (set! %1268 (load %1266 (bitvector 32) #:align 4))
    (br %1269))

; %1269
  (define-label (%1269) #:merge #f
    (set! %1270 (phi [%1255 %1254] [%1268 %1261]))
    (set! %1271 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (br %1668))

; %1272
  (define-label (%1272) #:merge #f
    (set! %1273 (add %21 (bv #x00000800 32)))
    (set! %1274 (icmp/ult %1273 (bv #x00001000 32)))
    (br %1274 %1275 %1295))

; %1275
  (define-label (%1275) #:merge #f
    (set! %1276 (getelementptr %1068 (array-offset (bv #x00000001 32) 1)))
    (set! %1277 (load %1276 (bitvector 8) #:align 1))
    (set! %1278 (zext %1277 (bitvector 32)))
    (set! %1279 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1280 (load %1279 pointer #:align 4))
    (set! %1281 (icmp/eq %1280 nullptr))
    (br %1281 %1292 %1282))

; %1282
  (define-label (%1282) #:merge #f
    (set! %1283 (shl %1278 (bv #x00000007 32)))
    (set! %1284 (shl %1278 (bv #x0000000f 32)))
    (set! %1285 (shl %21 (bv #x00000014 32)))
    (set! %1286 (or %1285 %1284))
    (set! %1287 (or %1286 %1283))
    (set! %1288 (or %1287 (bv #x00007013 32)))
    (set! %1289 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1290 (load %1289 (bitvector 32) #:align 4))
    (set! %1291 (getelementptr %1280 (array-offset %1290 4)))
    (store %1288 %1291 (bitvector 32) #:align 4)
    (br %1292))

; %1292
  (define-label (%1292) #:merge #f
    (set! %1293 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1294 (load %1293 (bitvector 32) #:align 4))
    (br %1668))

; %1295
  (define-label (%1295) #:merge #f
    (set! %1296 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1297 (load %1296 pointer #:align 4))
    (set! %1298 (icmp/eq %1297 nullptr))
    (br %1298 %1299 %1303))

; %1299
  (define-label (%1299) #:merge #f
    (set! %1300 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1301 (load %1300 (bitvector 32) #:align 4))
    (set! %1302 (add %1301 (bv #x00000001 32)))
    (store %1302 %1300 (bitvector 32) #:align 4)
    (br %1313))

; %1303
  (define-label (%1303) #:merge #f
    (set! %1304 (and %1273 (bv #xfffff000 32)))
    (set! %1305 (or %1304 (bv #x000002b7 32)))
    (set! %1306 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1307 (load %1306 (bitvector 32) #:align 4))
    (set! %1308 (getelementptr %1297 (array-offset %1307 4)))
    (store %1305 %1308 (bitvector 32) #:align 4)
    (set! %1309 (load %1296 pointer #:align 4))
    (set! %1310 (load %1306 (bitvector 32) #:align 4))
    (set! %1311 (add %1310 (bv #x00000001 32)))
    (store %1311 %1306 (bitvector 32) #:align 4)
    (set! %1312 (icmp/eq %1309 nullptr))
    (br %1312 %1313 %1317))

; %1313
  (define-label (%1313) #:merge #f
    (set! %1314 (phi [%1300 %1299] [%1306 %1303]))
    (set! %1315 (phi [%1302 %1299] [%1311 %1303]))
    (set! %1316 (add %1315 (bv #x00000001 32)))
    (store %1316 %1314 (bitvector 32) #:align 4)
    (br %1335))

; %1317
  (define-label (%1317) #:merge #f
    (set! %1318 (shl %21 (bv #x00000014 32)))
    (set! %1319 (or %1318 (bv #x00028293 32)))
    (set! %1320 (getelementptr %1309 (array-offset %1311 4)))
    (store %1319 %1320 (bitvector 32) #:align 4)
    (set! %1321 (load %1306 (bitvector 32) #:align 4))
    (set! %1322 (load %1296 pointer #:align 4))
    (set! %1323 (add %1321 (bv #x00000001 32)))
    (store %1323 %1306 (bitvector 32) #:align 4)
    (set! %1324 (getelementptr %1068 (array-offset (bv #x00000001 32) 1)))
    (set! %1325 (load %1324 (bitvector 8) #:align 1))
    (set! %1326 (zext %1325 (bitvector 32)))
    (set! %1327 (icmp/eq %1322 nullptr))
    (br %1327 %1335 %1328))

; %1328
  (define-label (%1328) #:merge #f
    (set! %1329 (shl %1326 (bv #x00000007 32)))
    (set! %1330 (shl %1326 (bv #x0000000f 32)))
    (set! %1331 (or %1329 %1330))
    (set! %1332 (or %1331 (bv #x00507033 32)))
    (set! %1333 (getelementptr %1322 (array-offset %1323 4)))
    (store %1332 %1333 (bitvector 32) #:align 4)
    (set! %1334 (load %1306 (bitvector 32) #:align 4))
    (br %1335))

; %1335
  (define-label (%1335) #:merge #f
    (set! %1336 (phi [%1323 %1317] [%1334 %1328] [%1316 %1313]))
    (set! %1337 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (br %1668))

; %1338
  (define-label (%1338) #:merge #f
    (set! %1339 (add %21 (bv #x00000800 32)))
    (set! %1340 (icmp/ult %1339 (bv #x00001000 32)))
    (br %1340 %1341 %1361))

; %1341
  (define-label (%1341) #:merge #f
    (set! %1342 (getelementptr %1068 (array-offset (bv #x00000001 32) 1)))
    (set! %1343 (load %1342 (bitvector 8) #:align 1))
    (set! %1344 (zext %1343 (bitvector 32)))
    (set! %1345 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1346 (load %1345 pointer #:align 4))
    (set! %1347 (icmp/eq %1346 nullptr))
    (br %1347 %1358 %1348))

; %1348
  (define-label (%1348) #:merge #f
    (set! %1349 (shl %1344 (bv #x00000007 32)))
    (set! %1350 (shl %1344 (bv #x0000000f 32)))
    (set! %1351 (shl %21 (bv #x00000014 32)))
    (set! %1352 (or %1351 %1350))
    (set! %1353 (or %1352 %1349))
    (set! %1354 (or %1353 (bv #x00006013 32)))
    (set! %1355 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1356 (load %1355 (bitvector 32) #:align 4))
    (set! %1357 (getelementptr %1346 (array-offset %1356 4)))
    (store %1354 %1357 (bitvector 32) #:align 4)
    (br %1358))

; %1358
  (define-label (%1358) #:merge #f
    (set! %1359 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1360 (load %1359 (bitvector 32) #:align 4))
    (br %1668))

; %1361
  (define-label (%1361) #:merge #f
    (set! %1362 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1363 (load %1362 pointer #:align 4))
    (set! %1364 (icmp/eq %1363 nullptr))
    (br %1364 %1365 %1369))

; %1365
  (define-label (%1365) #:merge #f
    (set! %1366 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1367 (load %1366 (bitvector 32) #:align 4))
    (set! %1368 (add %1367 (bv #x00000001 32)))
    (store %1368 %1366 (bitvector 32) #:align 4)
    (br %1379))

; %1369
  (define-label (%1369) #:merge #f
    (set! %1370 (and %1339 (bv #xfffff000 32)))
    (set! %1371 (or %1370 (bv #x000002b7 32)))
    (set! %1372 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1373 (load %1372 (bitvector 32) #:align 4))
    (set! %1374 (getelementptr %1363 (array-offset %1373 4)))
    (store %1371 %1374 (bitvector 32) #:align 4)
    (set! %1375 (load %1362 pointer #:align 4))
    (set! %1376 (load %1372 (bitvector 32) #:align 4))
    (set! %1377 (add %1376 (bv #x00000001 32)))
    (store %1377 %1372 (bitvector 32) #:align 4)
    (set! %1378 (icmp/eq %1375 nullptr))
    (br %1378 %1379 %1383))

; %1379
  (define-label (%1379) #:merge #f
    (set! %1380 (phi [%1366 %1365] [%1372 %1369]))
    (set! %1381 (phi [%1368 %1365] [%1377 %1369]))
    (set! %1382 (add %1381 (bv #x00000001 32)))
    (store %1382 %1380 (bitvector 32) #:align 4)
    (br %1401))

; %1383
  (define-label (%1383) #:merge #f
    (set! %1384 (shl %21 (bv #x00000014 32)))
    (set! %1385 (or %1384 (bv #x00028293 32)))
    (set! %1386 (getelementptr %1375 (array-offset %1377 4)))
    (store %1385 %1386 (bitvector 32) #:align 4)
    (set! %1387 (load %1372 (bitvector 32) #:align 4))
    (set! %1388 (load %1362 pointer #:align 4))
    (set! %1389 (add %1387 (bv #x00000001 32)))
    (store %1389 %1372 (bitvector 32) #:align 4)
    (set! %1390 (getelementptr %1068 (array-offset (bv #x00000001 32) 1)))
    (set! %1391 (load %1390 (bitvector 8) #:align 1))
    (set! %1392 (zext %1391 (bitvector 32)))
    (set! %1393 (icmp/eq %1388 nullptr))
    (br %1393 %1401 %1394))

; %1394
  (define-label (%1394) #:merge #f
    (set! %1395 (shl %1392 (bv #x00000007 32)))
    (set! %1396 (shl %1392 (bv #x0000000f 32)))
    (set! %1397 (or %1395 %1396))
    (set! %1398 (or %1397 (bv #x00506033 32)))
    (set! %1399 (getelementptr %1388 (array-offset %1389 4)))
    (store %1398 %1399 (bitvector 32) #:align 4)
    (set! %1400 (load %1372 (bitvector 32) #:align 4))
    (br %1401))

; %1401
  (define-label (%1401) #:merge #f
    (set! %1402 (phi [%1389 %1383] [%1400 %1394] [%1382 %1379]))
    (set! %1403 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (br %1668))

; %1404
  (define-label (%1404) #:merge #f
    (set! %1405 (add %21 (bv #x00000800 32)))
    (set! %1406 (icmp/ult %1405 (bv #x00001000 32)))
    (br %1406 %1407 %1427))

; %1407
  (define-label (%1407) #:merge #f
    (set! %1408 (getelementptr %1068 (array-offset (bv #x00000001 32) 1)))
    (set! %1409 (load %1408 (bitvector 8) #:align 1))
    (set! %1410 (zext %1409 (bitvector 32)))
    (set! %1411 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1412 (load %1411 pointer #:align 4))
    (set! %1413 (icmp/eq %1412 nullptr))
    (br %1413 %1424 %1414))

; %1414
  (define-label (%1414) #:merge #f
    (set! %1415 (shl %1410 (bv #x00000007 32)))
    (set! %1416 (shl %1410 (bv #x0000000f 32)))
    (set! %1417 (shl %21 (bv #x00000014 32)))
    (set! %1418 (or %1417 %1416))
    (set! %1419 (or %1418 %1415))
    (set! %1420 (or %1419 (bv #x00004013 32)))
    (set! %1421 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1422 (load %1421 (bitvector 32) #:align 4))
    (set! %1423 (getelementptr %1412 (array-offset %1422 4)))
    (store %1420 %1423 (bitvector 32) #:align 4)
    (br %1424))

; %1424
  (define-label (%1424) #:merge #f
    (set! %1425 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1426 (load %1425 (bitvector 32) #:align 4))
    (br %1668))

; %1427
  (define-label (%1427) #:merge #f
    (set! %1428 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1429 (load %1428 pointer #:align 4))
    (set! %1430 (icmp/eq %1429 nullptr))
    (br %1430 %1431 %1435))

; %1431
  (define-label (%1431) #:merge #f
    (set! %1432 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1433 (load %1432 (bitvector 32) #:align 4))
    (set! %1434 (add %1433 (bv #x00000001 32)))
    (store %1434 %1432 (bitvector 32) #:align 4)
    (br %1445))

; %1435
  (define-label (%1435) #:merge #f
    (set! %1436 (and %1405 (bv #xfffff000 32)))
    (set! %1437 (or %1436 (bv #x000002b7 32)))
    (set! %1438 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1439 (load %1438 (bitvector 32) #:align 4))
    (set! %1440 (getelementptr %1429 (array-offset %1439 4)))
    (store %1437 %1440 (bitvector 32) #:align 4)
    (set! %1441 (load %1428 pointer #:align 4))
    (set! %1442 (load %1438 (bitvector 32) #:align 4))
    (set! %1443 (add %1442 (bv #x00000001 32)))
    (store %1443 %1438 (bitvector 32) #:align 4)
    (set! %1444 (icmp/eq %1441 nullptr))
    (br %1444 %1445 %1449))

; %1445
  (define-label (%1445) #:merge #f
    (set! %1446 (phi [%1432 %1431] [%1438 %1435]))
    (set! %1447 (phi [%1434 %1431] [%1443 %1435]))
    (set! %1448 (add %1447 (bv #x00000001 32)))
    (store %1448 %1446 (bitvector 32) #:align 4)
    (br %1467))

; %1449
  (define-label (%1449) #:merge #f
    (set! %1450 (shl %21 (bv #x00000014 32)))
    (set! %1451 (or %1450 (bv #x00028293 32)))
    (set! %1452 (getelementptr %1441 (array-offset %1443 4)))
    (store %1451 %1452 (bitvector 32) #:align 4)
    (set! %1453 (load %1438 (bitvector 32) #:align 4))
    (set! %1454 (load %1428 pointer #:align 4))
    (set! %1455 (add %1453 (bv #x00000001 32)))
    (store %1455 %1438 (bitvector 32) #:align 4)
    (set! %1456 (getelementptr %1068 (array-offset (bv #x00000001 32) 1)))
    (set! %1457 (load %1456 (bitvector 8) #:align 1))
    (set! %1458 (zext %1457 (bitvector 32)))
    (set! %1459 (icmp/eq %1454 nullptr))
    (br %1459 %1467 %1460))

; %1460
  (define-label (%1460) #:merge #f
    (set! %1461 (shl %1458 (bv #x00000007 32)))
    (set! %1462 (shl %1458 (bv #x0000000f 32)))
    (set! %1463 (or %1461 %1462))
    (set! %1464 (or %1463 (bv #x00504033 32)))
    (set! %1465 (getelementptr %1454 (array-offset %1455 4)))
    (store %1464 %1465 (bitvector 32) #:align 4)
    (set! %1466 (load %1438 (bitvector 32) #:align 4))
    (br %1467))

; %1467
  (define-label (%1467) #:merge #f
    (set! %1468 (phi [%1455 %1449] [%1466 %1460] [%1448 %1445]))
    (set! %1469 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (br %1668))

; %1470
  (define-label (%1470) #:merge #f
    (set! %1471 (add %21 (bv #x00000800 32)))
    (set! %1472 (icmp/ult %1471 (bv #x00001000 32)))
    (br %1472 %1473 %1493))

; %1473
  (define-label (%1473) #:merge #f
    (set! %1474 (getelementptr %1068 (array-offset (bv #x00000001 32) 1)))
    (set! %1475 (load %1474 (bitvector 8) #:align 1))
    (set! %1476 (zext %1475 (bitvector 32)))
    (set! %1477 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1478 (load %1477 pointer #:align 4))
    (set! %1479 (icmp/eq %1478 nullptr))
    (br %1479 %1490 %1480))

; %1480
  (define-label (%1480) #:merge #f
    (set! %1481 (shl %1476 (bv #x00000007 32)))
    (set! %1482 (shl %1476 (bv #x0000000f 32)))
    (set! %1483 (shl %21 (bv #x00000014 32)))
    (set! %1484 (or %1483 %1482))
    (set! %1485 (or %1484 %1481))
    (set! %1486 (or %1485 (bv #x00001013 32)))
    (set! %1487 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1488 (load %1487 (bitvector 32) #:align 4))
    (set! %1489 (getelementptr %1478 (array-offset %1488 4)))
    (store %1486 %1489 (bitvector 32) #:align 4)
    (br %1490))

; %1490
  (define-label (%1490) #:merge #f
    (set! %1491 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1492 (load %1491 (bitvector 32) #:align 4))
    (br %1668))

; %1493
  (define-label (%1493) #:merge #f
    (set! %1494 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1495 (load %1494 pointer #:align 4))
    (set! %1496 (icmp/eq %1495 nullptr))
    (br %1496 %1497 %1501))

; %1497
  (define-label (%1497) #:merge #f
    (set! %1498 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1499 (load %1498 (bitvector 32) #:align 4))
    (set! %1500 (add %1499 (bv #x00000001 32)))
    (store %1500 %1498 (bitvector 32) #:align 4)
    (br %1511))

; %1501
  (define-label (%1501) #:merge #f
    (set! %1502 (and %1471 (bv #xfffff000 32)))
    (set! %1503 (or %1502 (bv #x000002b7 32)))
    (set! %1504 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1505 (load %1504 (bitvector 32) #:align 4))
    (set! %1506 (getelementptr %1495 (array-offset %1505 4)))
    (store %1503 %1506 (bitvector 32) #:align 4)
    (set! %1507 (load %1494 pointer #:align 4))
    (set! %1508 (load %1504 (bitvector 32) #:align 4))
    (set! %1509 (add %1508 (bv #x00000001 32)))
    (store %1509 %1504 (bitvector 32) #:align 4)
    (set! %1510 (icmp/eq %1507 nullptr))
    (br %1510 %1511 %1515))

; %1511
  (define-label (%1511) #:merge #f
    (set! %1512 (phi [%1498 %1497] [%1504 %1501]))
    (set! %1513 (phi [%1500 %1497] [%1509 %1501]))
    (set! %1514 (add %1513 (bv #x00000001 32)))
    (store %1514 %1512 (bitvector 32) #:align 4)
    (br %1533))

; %1515
  (define-label (%1515) #:merge #f
    (set! %1516 (shl %21 (bv #x00000014 32)))
    (set! %1517 (or %1516 (bv #x00028293 32)))
    (set! %1518 (getelementptr %1507 (array-offset %1509 4)))
    (store %1517 %1518 (bitvector 32) #:align 4)
    (set! %1519 (load %1504 (bitvector 32) #:align 4))
    (set! %1520 (load %1494 pointer #:align 4))
    (set! %1521 (add %1519 (bv #x00000001 32)))
    (store %1521 %1504 (bitvector 32) #:align 4)
    (set! %1522 (getelementptr %1068 (array-offset (bv #x00000001 32) 1)))
    (set! %1523 (load %1522 (bitvector 8) #:align 1))
    (set! %1524 (zext %1523 (bitvector 32)))
    (set! %1525 (icmp/eq %1520 nullptr))
    (br %1525 %1533 %1526))

; %1526
  (define-label (%1526) #:merge #f
    (set! %1527 (shl %1524 (bv #x00000007 32)))
    (set! %1528 (shl %1524 (bv #x0000000f 32)))
    (set! %1529 (or %1527 %1528))
    (set! %1530 (or %1529 (bv #x00501033 32)))
    (set! %1531 (getelementptr %1520 (array-offset %1521 4)))
    (store %1530 %1531 (bitvector 32) #:align 4)
    (set! %1532 (load %1504 (bitvector 32) #:align 4))
    (br %1533))

; %1533
  (define-label (%1533) #:merge #f
    (set! %1534 (phi [%1521 %1515] [%1532 %1526] [%1514 %1511]))
    (set! %1535 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (br %1668))

; %1536
  (define-label (%1536) #:merge #f
    (set! %1537 (add %21 (bv #x00000800 32)))
    (set! %1538 (icmp/ult %1537 (bv #x00001000 32)))
    (br %1538 %1539 %1559))

; %1539
  (define-label (%1539) #:merge #f
    (set! %1540 (getelementptr %1068 (array-offset (bv #x00000001 32) 1)))
    (set! %1541 (load %1540 (bitvector 8) #:align 1))
    (set! %1542 (zext %1541 (bitvector 32)))
    (set! %1543 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1544 (load %1543 pointer #:align 4))
    (set! %1545 (icmp/eq %1544 nullptr))
    (br %1545 %1556 %1546))

; %1546
  (define-label (%1546) #:merge #f
    (set! %1547 (shl %1542 (bv #x00000007 32)))
    (set! %1548 (shl %1542 (bv #x0000000f 32)))
    (set! %1549 (shl %21 (bv #x00000014 32)))
    (set! %1550 (or %1549 %1548))
    (set! %1551 (or %1550 %1547))
    (set! %1552 (or %1551 (bv #x00005013 32)))
    (set! %1553 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1554 (load %1553 (bitvector 32) #:align 4))
    (set! %1555 (getelementptr %1544 (array-offset %1554 4)))
    (store %1552 %1555 (bitvector 32) #:align 4)
    (br %1556))

; %1556
  (define-label (%1556) #:merge #f
    (set! %1557 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1558 (load %1557 (bitvector 32) #:align 4))
    (br %1668))

; %1559
  (define-label (%1559) #:merge #f
    (set! %1560 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1561 (load %1560 pointer #:align 4))
    (set! %1562 (icmp/eq %1561 nullptr))
    (br %1562 %1563 %1567))

; %1563
  (define-label (%1563) #:merge #f
    (set! %1564 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1565 (load %1564 (bitvector 32) #:align 4))
    (set! %1566 (add %1565 (bv #x00000001 32)))
    (store %1566 %1564 (bitvector 32) #:align 4)
    (br %1577))

; %1567
  (define-label (%1567) #:merge #f
    (set! %1568 (and %1537 (bv #xfffff000 32)))
    (set! %1569 (or %1568 (bv #x000002b7 32)))
    (set! %1570 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1571 (load %1570 (bitvector 32) #:align 4))
    (set! %1572 (getelementptr %1561 (array-offset %1571 4)))
    (store %1569 %1572 (bitvector 32) #:align 4)
    (set! %1573 (load %1560 pointer #:align 4))
    (set! %1574 (load %1570 (bitvector 32) #:align 4))
    (set! %1575 (add %1574 (bv #x00000001 32)))
    (store %1575 %1570 (bitvector 32) #:align 4)
    (set! %1576 (icmp/eq %1573 nullptr))
    (br %1576 %1577 %1581))

; %1577
  (define-label (%1577) #:merge #f
    (set! %1578 (phi [%1564 %1563] [%1570 %1567]))
    (set! %1579 (phi [%1566 %1563] [%1575 %1567]))
    (set! %1580 (add %1579 (bv #x00000001 32)))
    (store %1580 %1578 (bitvector 32) #:align 4)
    (br %1599))

; %1581
  (define-label (%1581) #:merge #f
    (set! %1582 (shl %21 (bv #x00000014 32)))
    (set! %1583 (or %1582 (bv #x00028293 32)))
    (set! %1584 (getelementptr %1573 (array-offset %1575 4)))
    (store %1583 %1584 (bitvector 32) #:align 4)
    (set! %1585 (load %1570 (bitvector 32) #:align 4))
    (set! %1586 (load %1560 pointer #:align 4))
    (set! %1587 (add %1585 (bv #x00000001 32)))
    (store %1587 %1570 (bitvector 32) #:align 4)
    (set! %1588 (getelementptr %1068 (array-offset (bv #x00000001 32) 1)))
    (set! %1589 (load %1588 (bitvector 8) #:align 1))
    (set! %1590 (zext %1589 (bitvector 32)))
    (set! %1591 (icmp/eq %1586 nullptr))
    (br %1591 %1599 %1592))

; %1592
  (define-label (%1592) #:merge #f
    (set! %1593 (shl %1590 (bv #x00000007 32)))
    (set! %1594 (shl %1590 (bv #x0000000f 32)))
    (set! %1595 (or %1593 %1594))
    (set! %1596 (or %1595 (bv #x00505033 32)))
    (set! %1597 (getelementptr %1586 (array-offset %1587 4)))
    (store %1596 %1597 (bitvector 32) #:align 4)
    (set! %1598 (load %1570 (bitvector 32) #:align 4))
    (br %1599))

; %1599
  (define-label (%1599) #:merge #f
    (set! %1600 (phi [%1587 %1581] [%1598 %1592] [%1580 %1577]))
    (set! %1601 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (br %1668))

; %1602
  (define-label (%1602) #:merge #f
    (set! %1603 (add %21 (bv #x00000800 32)))
    (set! %1604 (icmp/ult %1603 (bv #x00001000 32)))
    (br %1604 %1605 %1625))

; %1605
  (define-label (%1605) #:merge #f
    (set! %1606 (getelementptr %1068 (array-offset (bv #x00000001 32) 1)))
    (set! %1607 (load %1606 (bitvector 8) #:align 1))
    (set! %1608 (zext %1607 (bitvector 32)))
    (set! %1609 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1610 (load %1609 pointer #:align 4))
    (set! %1611 (icmp/eq %1610 nullptr))
    (br %1611 %1622 %1612))

; %1612
  (define-label (%1612) #:merge #f
    (set! %1613 (shl %1608 (bv #x00000007 32)))
    (set! %1614 (shl %1608 (bv #x0000000f 32)))
    (set! %1615 (shl %21 (bv #x00000014 32)))
    (set! %1616 (or %1615 %1614))
    (set! %1617 (or %1616 %1613))
    (set! %1618 (or %1617 (bv #x40005013 32)))
    (set! %1619 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1620 (load %1619 (bitvector 32) #:align 4))
    (set! %1621 (getelementptr %1610 (array-offset %1620 4)))
    (store %1618 %1621 (bitvector 32) #:align 4)
    (br %1622))

; %1622
  (define-label (%1622) #:merge #f
    (set! %1623 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1624 (load %1623 (bitvector 32) #:align 4))
    (br %1668))

; %1625
  (define-label (%1625) #:merge #f
    (set! %1626 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1627 (load %1626 pointer #:align 4))
    (set! %1628 (icmp/eq %1627 nullptr))
    (br %1628 %1629 %1633))

; %1629
  (define-label (%1629) #:merge #f
    (set! %1630 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1631 (load %1630 (bitvector 32) #:align 4))
    (set! %1632 (add %1631 (bv #x00000001 32)))
    (store %1632 %1630 (bitvector 32) #:align 4)
    (br %1643))

; %1633
  (define-label (%1633) #:merge #f
    (set! %1634 (and %1603 (bv #xfffff000 32)))
    (set! %1635 (or %1634 (bv #x000002b7 32)))
    (set! %1636 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1637 (load %1636 (bitvector 32) #:align 4))
    (set! %1638 (getelementptr %1627 (array-offset %1637 4)))
    (store %1635 %1638 (bitvector 32) #:align 4)
    (set! %1639 (load %1626 pointer #:align 4))
    (set! %1640 (load %1636 (bitvector 32) #:align 4))
    (set! %1641 (add %1640 (bv #x00000001 32)))
    (store %1641 %1636 (bitvector 32) #:align 4)
    (set! %1642 (icmp/eq %1639 nullptr))
    (br %1642 %1643 %1647))

; %1643
  (define-label (%1643) #:merge #f
    (set! %1644 (phi [%1630 %1629] [%1636 %1633]))
    (set! %1645 (phi [%1632 %1629] [%1641 %1633]))
    (set! %1646 (add %1645 (bv #x00000001 32)))
    (store %1646 %1644 (bitvector 32) #:align 4)
    (br %1665))

; %1647
  (define-label (%1647) #:merge #f
    (set! %1648 (shl %21 (bv #x00000014 32)))
    (set! %1649 (or %1648 (bv #x00028293 32)))
    (set! %1650 (getelementptr %1639 (array-offset %1641 4)))
    (store %1649 %1650 (bitvector 32) #:align 4)
    (set! %1651 (load %1636 (bitvector 32) #:align 4))
    (set! %1652 (load %1626 pointer #:align 4))
    (set! %1653 (add %1651 (bv #x00000001 32)))
    (store %1653 %1636 (bitvector 32) #:align 4)
    (set! %1654 (getelementptr %1068 (array-offset (bv #x00000001 32) 1)))
    (set! %1655 (load %1654 (bitvector 8) #:align 1))
    (set! %1656 (zext %1655 (bitvector 32)))
    (set! %1657 (icmp/eq %1652 nullptr))
    (br %1657 %1665 %1658))

; %1658
  (define-label (%1658) #:merge #f
    (set! %1659 (shl %1656 (bv #x00000007 32)))
    (set! %1660 (shl %1656 (bv #x0000000f 32)))
    (set! %1661 (or %1659 %1660))
    (set! %1662 (or %1661 (bv #x40505033 32)))
    (set! %1663 (getelementptr %1652 (array-offset %1653 4)))
    (store %1662 %1663 (bitvector 32) #:align 4)
    (set! %1664 (load %1636 (bitvector 32) #:align 4))
    (br %1665))

; %1665
  (define-label (%1665) #:merge #f
    (set! %1666 (phi [%1653 %1647] [%1664 %1658] [%1646 %1643]))
    (set! %1667 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (br %1668))

; %1668
  (define-label (%1668) #:merge #f
    (set! %1669 (phi [%1121 %1119] [%1144 %1142] [%1186 %1185] [%1211 %1209] [%1270 %1269] [%1294 %1292] [%1336 %1335] [%1360 %1358] [%1402 %1401] [%1426 %1424] [%1468 %1467] [%1492 %1490] [%1534 %1533] [%1558 %1556] [%1600 %1599] [%1624 %1622] [%1666 %1665] [%1096 %1087] [%1105 %1098] [%1086 %1083]))
    (set! %1670 (phi [%1120 %1119] [%1143 %1142] [%1187 %1185] [%1210 %1209] [%1271 %1269] [%1293 %1292] [%1337 %1335] [%1359 %1358] [%1403 %1401] [%1425 %1424] [%1469 %1467] [%1491 %1490] [%1535 %1533] [%1557 %1556] [%1601 %1599] [%1623 %1622] [%1667 %1665] [%1091 %1087] [%1091 %1098] [%1084 %1083]))
    (set! %1671 (add %1669 (bv #x00000001 32)))
    (store %1671 %1670 (bitvector 32) #:align 4)
    (br %1672))

; %1672
  (define-label (%1672) #:merge #f
    (call @bpf_put_reg32 %26 %1068 %1)
    (br %3989))

; %1673
  (define-label (%1673) #:merge #f
    (call @emit_alu_r32 %26 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset (bv #x0000000d 32) 2) (array-offset (bv #x00000000 32) 1)) %1 (bv #x80 8))
    (br %3989))

; %1674
  (define-label (%1674) #:merge #f
    (set! %1675 (load %26 (bitvector 8) #:align 1))
    (set! %1676 (lshr (bv #x00000bc0 32) %25))
    (set! %1677 (and %1676 (bv #x00000001 32)))
    (set! %1678 (icmp/ne %1677 (bv #x00000000 32)))
    (br %1678 %1679 %1710))

; %1679
  (define-label (%1679) #:merge #f
    (set! %1680 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1681 (load %1680 pointer #:align 4))
    (set! %1682 (icmp/eq %1681 nullptr))
    (br %1682 %1683 %1687))

; %1683
  (define-label (%1683) #:merge #f
    (set! %1684 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1685 (load %1684 (bitvector 32) #:align 4))
    (set! %1686 (add %1685 (bv #x00000001 32)))
    (store %1686 %1684 (bitvector 32) #:align 4)
    (br %1706))

; %1687
  (define-label (%1687) #:merge #f
    (set! %1688 (sext %1675 (bitvector 32)))
    (set! %1689 (shl %1688 (bv #x00000014 32)))
    (set! %1690 (or %1689 (bv #x00042e03 32)))
    (set! %1691 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1692 (load %1691 (bitvector 32) #:align 4))
    (set! %1693 (getelementptr %1681 (array-offset %1692 4)))
    (store %1690 %1693 (bitvector 32) #:align 4)
    (set! %1694 (load %1680 pointer #:align 4))
    (set! %1695 (load %1691 (bitvector 32) #:align 4))
    (set! %1696 (add %1695 (bv #x00000001 32)))
    (store %1696 %1691 (bitvector 32) #:align 4)
    (set! %1697 (icmp/eq %1694 nullptr))
    (br %1697 %1706 %1698))

; %1698
  (define-label (%1698) #:merge #f
    (set! %1699 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset %25 2) (array-offset (bv #x00000001 32) 1)))
    (set! %1700 (load %1699 (bitvector 8) #:align 1))
    (set! %1701 (sext %1700 (bitvector 32)))
    (set! %1702 (shl %1701 (bv #x00000014 32)))
    (set! %1703 (or %1702 (bv #x00042383 32)))
    (set! %1704 (getelementptr %1694 (array-offset %1696 4)))
    (store %1703 %1704 (bitvector 32) #:align 4)
    (set! %1705 (load %1691 (bitvector 32) #:align 4))
    (br %1706))

; %1706
  (define-label (%1706) #:merge #f
    (set! %1707 (phi [%1691 %1687] [%1691 %1698] [%1684 %1683]))
    (set! %1708 (phi [%1696 %1687] [%1705 %1698] [%1686 %1683]))
    (set! %1709 (add %1708 (bv #x00000001 32)))
    (store %1709 %1707 (bitvector 32) #:align 4)
    (br %1710))

; %1710
  (define-label (%1710) #:merge #f
    (set! %1711 (phi [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000c 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %1706] [%26 %1674]))
    (switch %21 %1769 [(bv #x00000010 32) %1712] [(bv #x00000020 32) %1746] [(bv #x00000040 32) %1771]))

; %1712
  (define-label (%1712) #:merge #f
    (set! %1713 (getelementptr %1711 (array-offset (bv #x00000001 32) 1)))
    (set! %1714 (load %1713 (bitvector 8) #:align 1))
    (set! %1715 (zext %1714 (bitvector 32)))
    (set! %1716 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1717 (load %1716 pointer #:align 4))
    (set! %1718 (icmp/eq %1717 nullptr))
    (br %1718 %1728 %1719))

; %1719
  (define-label (%1719) #:merge #f
    (set! %1720 (shl %1715 (bv #x00000007 32)))
    (set! %1721 (shl %1715 (bv #x0000000f 32)))
    (set! %1722 (or %1721 %1720))
    (set! %1723 (or %1722 (bv #x01001013 32)))
    (set! %1724 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1725 (load %1724 (bitvector 32) #:align 4))
    (set! %1726 (getelementptr %1717 (array-offset %1725 4)))
    (store %1723 %1726 (bitvector 32) #:align 4)
    (set! %1727 (load %1716 pointer #:align 4))
    (br %1728))

; %1728
  (define-label (%1728) #:merge #f
    (set! %1729 (phi [#(struct:nullptr) %1712] [%1727 %1719]))
    (set! %1730 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1731 (load %1730 (bitvector 32) #:align 4))
    (set! %1732 (add %1731 (bv #x00000001 32)))
    (store %1732 %1730 (bitvector 32) #:align 4)
    (set! %1733 (load %1713 (bitvector 8) #:align 1))
    (set! %1734 (zext %1733 (bitvector 32)))
    (set! %1735 (icmp/eq %1729 nullptr))
    (br %1735 %1743 %1736))

; %1736
  (define-label (%1736) #:merge #f
    (set! %1737 (shl %1734 (bv #x00000007 32)))
    (set! %1738 (shl %1734 (bv #x0000000f 32)))
    (set! %1739 (or %1738 %1737))
    (set! %1740 (or %1739 (bv #x01005013 32)))
    (set! %1741 (getelementptr %1729 (array-offset %1732 4)))
    (store %1740 %1741 (bitvector 32) #:align 4)
    (set! %1742 (load %1730 (bitvector 32) #:align 4))
    (br %1743))

; %1743
  (define-label (%1743) #:merge #f
    (set! %1744 (phi [%1732 %1728] [%1742 %1736]))
    (set! %1745 (add %1744 (bv #x00000001 32)))
    (store %1745 %1730 (bitvector 32) #:align 4)
    (br %1746))

; %1746
  (define-label (%1746) #:merge #f
    (set! %1747 (load %11 pointer #:align 4))
    (set! %1748 (getelementptr %1747 (array-offset (bv #x00000000 32) 40) (struct-offset 28)))
    (set! %1749 (load %1748 pointer #:align 4))
    (set! %1750 (getelementptr %1749 (array-offset (bv #x00000000 32) 384) (struct-offset 56)))
    (set! %1751 (load %1750 (bitvector 8) #:align 8))
    (set! %1752 (icmp/eq %1751 (bv #x00 8)))
    (br %1752 %1753 %1771))

; %1753
  (define-label (%1753) #:merge #f
    (set! %1754 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1755 (load %1754 pointer #:align 4))
    (set! %1756 (icmp/eq %1755 nullptr))
    (br %1756 %1765 %1757))

; %1757
  (define-label (%1757) #:merge #f
    (set! %1758 (load %1711 (bitvector 8) #:align 1))
    (set! %1759 (zext %1758 (bitvector 32)))
    (set! %1760 (shl %1759 (bv #x00000007 32)))
    (set! %1761 (or %1760 (bv #x00000013 32)))
    (set! %1762 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1763 (load %1762 (bitvector 32) #:align 4))
    (set! %1764 (getelementptr %1755 (array-offset %1763 4)))
    (store %1761 %1764 (bitvector 32) #:align 4)
    (br %1765))

; %1765
  (define-label (%1765) #:merge #f
    (set! %1766 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1767 (load %1766 (bitvector 32) #:align 4))
    (set! %1768 (add %1767 (bv #x00000001 32)))
    (store %1768 %1766 (bitvector 32) #:align 4)
    (br %1771))

; %1769
  (define-label (%1769) #:merge #f
    (set! %1770 (call @printk (getelementptr @.str (array-offset (bv #x00000000 32) 35) (array-offset (bv #x00000000 32) 1)) %21))
    (br %3989))

; %1771
  (define-label (%1771) #:merge #f
    (br %1678 %1772 %3989))

; %1772
  (define-label (%1772) #:merge #f
    (set! %1773 (sext %1675 (bitvector 16)))
    (set! %1774 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1775 (load %1774 pointer #:align 4))
    (set! %1776 (icmp/eq %1775 nullptr))
    (br %1776 %1794 %1777))

; %1777
  (define-label (%1777) #:merge #f
    (set! %1778 (lshr %1773 (bv #x0005 16)))
    (set! %1779 (zext %1778 (bitvector 32)))
    (set! %1780 (shl %1779 (bv #x00000019 32)))
    (set! %1781 (load %1711 (bitvector 8) #:align 1))
    (set! %1782 (zext %1781 (bitvector 32)))
    (set! %1783 (shl %1782 (bv #x00000014 32)))
    (set! %1784 (shl %1773 (bv #x0007 16)))
    (set! %1785 (and %1784 (bv #x0f80 16)))
    (set! %1786 (zext %1785 (bitvector 32)))
    (set! %1787 (or %1780 %1786))
    (set! %1788 (or %1787 %1783))
    (set! %1789 (or %1788 (bv #x00042023 32)))
    (set! %1790 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1791 (load %1790 (bitvector 32) #:align 4))
    (set! %1792 (getelementptr %1775 (array-offset %1791 4)))
    (store %1789 %1792 (bitvector 32) #:align 4)
    (set! %1793 (load %1774 pointer #:align 4))
    (br %1794))

; %1794
  (define-label (%1794) #:merge #f
    (set! %1795 (phi [#(struct:nullptr) %1772] [%1793 %1777]))
    (set! %1796 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1797 (load %1796 (bitvector 32) #:align 4))
    (set! %1798 (add %1797 (bv #x00000001 32)))
    (store %1798 %1796 (bitvector 32) #:align 4)
    (set! %1799 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset %25 2) (array-offset (bv #x00000001 32) 1)))
    (set! %1800 (load %1799 (bitvector 8) #:align 1))
    (set! %1801 (sext %1800 (bitvector 16)))
    (set! %1802 (icmp/eq %1795 nullptr))
    (br %1802 %1819 %1803))

; %1803
  (define-label (%1803) #:merge #f
    (set! %1804 (lshr %1801 (bv #x0005 16)))
    (set! %1805 (zext %1804 (bitvector 32)))
    (set! %1806 (shl %1805 (bv #x00000019 32)))
    (set! %1807 (getelementptr %1711 (array-offset (bv #x00000001 32) 1)))
    (set! %1808 (load %1807 (bitvector 8) #:align 1))
    (set! %1809 (zext %1808 (bitvector 32)))
    (set! %1810 (shl %1809 (bv #x00000014 32)))
    (set! %1811 (shl %1801 (bv #x0007 16)))
    (set! %1812 (and %1811 (bv #x0f80 16)))
    (set! %1813 (zext %1812 (bitvector 32)))
    (set! %1814 (or %1806 %1813))
    (set! %1815 (or %1814 %1810))
    (set! %1816 (or %1815 (bv #x00042023 32)))
    (set! %1817 (getelementptr %1795 (array-offset %1798 4)))
    (store %1816 %1817 (bitvector 32) #:align 4)
    (set! %1818 (load %1796 (bitvector 32) #:align 4))
    (br %1819))

; %1819
  (define-label (%1819) #:merge #f
    (set! %1820 (phi [%1798 %1794] [%1818 %1803]))
    (set! %1821 (add %1820 (bv #x00000001 32)))
    (store %1821 %1796 (bitvector 32) #:align 4)
    (br %3989))

; %1822
  (define-label (%1822) #:merge #f
    (set! %1823 (load %26 (bitvector 8) #:align 1))
    (set! %1824 (lshr (bv #x00000bc0 32) %25))
    (set! %1825 (and %1824 (bv #x00000001 32)))
    (set! %1826 (icmp/ne %1825 (bv #x00000000 32)))
    (br %1826 %1827 %1858))

; %1827
  (define-label (%1827) #:merge #f
    (set! %1828 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1829 (load %1828 pointer #:align 4))
    (set! %1830 (icmp/eq %1829 nullptr))
    (br %1830 %1831 %1835))

; %1831
  (define-label (%1831) #:merge #f
    (set! %1832 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1833 (load %1832 (bitvector 32) #:align 4))
    (set! %1834 (add %1833 (bv #x00000001 32)))
    (store %1834 %1832 (bitvector 32) #:align 4)
    (br %1854))

; %1835
  (define-label (%1835) #:merge #f
    (set! %1836 (sext %1823 (bitvector 32)))
    (set! %1837 (shl %1836 (bv #x00000014 32)))
    (set! %1838 (or %1837 (bv #x00042e03 32)))
    (set! %1839 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1840 (load %1839 (bitvector 32) #:align 4))
    (set! %1841 (getelementptr %1829 (array-offset %1840 4)))
    (store %1838 %1841 (bitvector 32) #:align 4)
    (set! %1842 (load %1828 pointer #:align 4))
    (set! %1843 (load %1839 (bitvector 32) #:align 4))
    (set! %1844 (add %1843 (bv #x00000001 32)))
    (store %1844 %1839 (bitvector 32) #:align 4)
    (set! %1845 (icmp/eq %1842 nullptr))
    (br %1845 %1854 %1846))

; %1846
  (define-label (%1846) #:merge #f
    (set! %1847 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset %25 2) (array-offset (bv #x00000001 32) 1)))
    (set! %1848 (load %1847 (bitvector 8) #:align 1))
    (set! %1849 (sext %1848 (bitvector 32)))
    (set! %1850 (shl %1849 (bv #x00000014 32)))
    (set! %1851 (or %1850 (bv #x00042383 32)))
    (set! %1852 (getelementptr %1842 (array-offset %1844 4)))
    (store %1851 %1852 (bitvector 32) #:align 4)
    (set! %1853 (load %1839 (bitvector 32) #:align 4))
    (br %1854))

; %1854
  (define-label (%1854) #:merge #f
    (set! %1855 (phi [%1839 %1835] [%1839 %1846] [%1832 %1831]))
    (set! %1856 (phi [%1844 %1835] [%1853 %1846] [%1834 %1831]))
    (set! %1857 (add %1856 (bv #x00000001 32)))
    (store %1857 %1855 (bitvector 32) #:align 4)
    (br %1858))

; %1858
  (define-label (%1858) #:merge #f
    (set! %1859 (phi [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000c 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %1854] [%26 %1822]))
    (switch %21 %2023 [(bv #x00000010 32) %1860] [(bv #x00000020 32) %1945] [(bv #x00000040 32) %1970]))

; %1860
  (define-label (%1860) #:merge #f
    (set! %1861 (getelementptr %1859 (array-offset (bv #x00000001 32) 1)))
    (set! %1862 (load %1861 (bitvector 8) #:align 1))
    (set! %1863 (zext %1862 (bitvector 32)))
    (set! %1864 (shl %1863 (bv #x0000000f 32)))
    (set! %1865 (shl %1863 (bv #x00000007 32)))
    (set! %1866 (or %1865 %1864))
    (set! %1867 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1868 (load %1867 pointer #:align 4))
    (set! %1869 (icmp/eq %1868 nullptr))
    (br %1869 %1870 %1874))

; %1870
  (define-label (%1870) #:merge #f
    (set! %1871 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1872 (load %1871 (bitvector 32) #:align 4))
    (set! %1873 (add %1872 (bv #x00000001 32)))
    (store %1873 %1871 (bitvector 32) #:align 4)
    (br %1883))

; %1874
  (define-label (%1874) #:merge #f
    (set! %1875 (or %1866 (bv #x01001013 32)))
    (set! %1876 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1877 (load %1876 (bitvector 32) #:align 4))
    (set! %1878 (getelementptr %1868 (array-offset %1877 4)))
    (store %1875 %1878 (bitvector 32) #:align 4)
    (set! %1879 (load %1867 pointer #:align 4))
    (set! %1880 (load %1876 (bitvector 32) #:align 4))
    (set! %1881 (add %1880 (bv #x00000001 32)))
    (store %1881 %1876 (bitvector 32) #:align 4)
    (set! %1882 (icmp/eq %1879 nullptr))
    (br %1882 %1883 %1887))

; %1883
  (define-label (%1883) #:merge #f
    (set! %1884 (phi [%1872 %1870] [%1880 %1874]))
    (set! %1885 (phi [%1871 %1870] [%1876 %1874]))
    (set! %1886 (add %1884 (bv #x00000002 32)))
    (store %1886 %1885 (bitvector 32) #:align 4)
    (br %1894))

; %1887
  (define-label (%1887) #:merge #f
    (set! %1888 (or %1864 (bv #x00801313 32)))
    (set! %1889 (getelementptr %1879 (array-offset %1881 4)))
    (store %1888 %1889 (bitvector 32) #:align 4)
    (set! %1890 (load %1867 pointer #:align 4))
    (set! %1891 (load %1876 (bitvector 32) #:align 4))
    (set! %1892 (add %1891 (bv #x00000001 32)))
    (store %1892 %1876 (bitvector 32) #:align 4)
    (set! %1893 (icmp/eq %1890 nullptr))
    (br %1893 %1894 %1898))

; %1894
  (define-label (%1894) #:merge #f
    (set! %1895 (phi [%1876 %1887] [%1885 %1883]))
    (set! %1896 (phi [%1892 %1887] [%1886 %1883]))
    (set! %1897 (add %1896 (bv #x00000001 32)))
    (store %1897 %1895 (bitvector 32) #:align 4)
    (br %1905))

; %1898
  (define-label (%1898) #:merge #f
    (set! %1899 (or %1866 (bv #x00805013 32)))
    (set! %1900 (getelementptr %1890 (array-offset %1892 4)))
    (store %1899 %1900 (bitvector 32) #:align 4)
    (set! %1901 (load %1876 (bitvector 32) #:align 4))
    (set! %1902 (load %1867 pointer #:align 4))
    (set! %1903 (add %1901 (bv #x00000001 32)))
    (store %1903 %1876 (bitvector 32) #:align 4)
    (set! %1904 (icmp/eq %1902 nullptr))
    (br %1904 %1905 %1909))

; %1905
  (define-label (%1905) #:merge #f
    (set! %1906 (phi [%1895 %1894] [%1876 %1898]))
    (set! %1907 (phi [%1897 %1894] [%1903 %1898]))
    (set! %1908 (add %1907 (bv #x00000001 32)))
    (store %1908 %1906 (bitvector 32) #:align 4)
    (br %1920))

; %1909
  (define-label (%1909) #:merge #f
    (set! %1910 (or %1864 (bv #x00600333 32)))
    (set! %1911 (getelementptr %1902 (array-offset %1903 4)))
    (store %1910 %1911 (bitvector 32) #:align 4)
    (set! %1912 (load %1867 pointer #:align 4))
    (set! %1913 (load %1876 (bitvector 32) #:align 4))
    (set! %1914 (add %1913 (bv #x00000001 32)))
    (store %1914 %1876 (bitvector 32) #:align 4)
    (set! %1915 (icmp/eq %1912 nullptr))
    (br %1915 %1920 %1916))

; %1916
  (define-label (%1916) #:merge #f
    (set! %1917 (or %1865 (bv #x01035013 32)))
    (set! %1918 (getelementptr %1912 (array-offset %1914 4)))
    (store %1917 %1918 (bitvector 32) #:align 4)
    (set! %1919 (load %1876 (bitvector 32) #:align 4))
    (br %1920))

; %1920
  (define-label (%1920) #:merge #f
    (set! %1921 (phi [%1876 %1909] [%1876 %1916] [%1906 %1905]))
    (set! %1922 (phi [%1914 %1909] [%1919 %1916] [%1908 %1905]))
    (set! %1923 (add %1922 (bv #x00000001 32)))
    (store %1923 %1921 (bitvector 32) #:align 4)
    (set! %1924 (load %11 pointer #:align 4))
    (set! %1925 (getelementptr %1924 (array-offset (bv #x00000000 32) 40) (struct-offset 28)))
    (set! %1926 (load %1925 pointer #:align 4))
    (set! %1927 (getelementptr %1926 (array-offset (bv #x00000000 32) 384) (struct-offset 56)))
    (set! %1928 (load %1927 (bitvector 8) #:align 8))
    (set! %1929 (icmp/eq %1928 (bv #x00 8)))
    (br %1929 %1930 %2025))

; %1930
  (define-label (%1930) #:merge #f
    (set! %1931 (load %1867 pointer #:align 4))
    (set! %1932 (icmp/eq %1931 nullptr))
    (br %1932 %1941 %1933))

; %1933
  (define-label (%1933) #:merge #f
    (set! %1934 (load %1859 (bitvector 8) #:align 1))
    (set! %1935 (zext %1934 (bitvector 32)))
    (set! %1936 (shl %1935 (bv #x00000007 32)))
    (set! %1937 (or %1936 (bv #x00000013 32)))
    (set! %1938 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1939 (getelementptr %1931 (array-offset %1923 4)))
    (store %1937 %1939 (bitvector 32) #:align 4)
    (set! %1940 (load %1938 (bitvector 32) #:align 4))
    (br %1941))

; %1941
  (define-label (%1941) #:merge #f
    (set! %1942 (phi [%1923 %1930] [%1940 %1933]))
    (set! %1943 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1944 (add %1942 (bv #x00000001 32)))
    (store %1944 %1943 (bitvector 32) #:align 4)
    (br %2025))

; %1945
  (define-label (%1945) #:merge #f
    (set! %1946 (getelementptr %1859 (array-offset (bv #x00000001 32) 1)))
    (set! %1947 (load %1946 (bitvector 8) #:align 1))
    (call @emit_rev32 %1947 %1)
    (set! %1948 (load %11 pointer #:align 4))
    (set! %1949 (getelementptr %1948 (array-offset (bv #x00000000 32) 40) (struct-offset 28)))
    (set! %1950 (load %1949 pointer #:align 4))
    (set! %1951 (getelementptr %1950 (array-offset (bv #x00000000 32) 384) (struct-offset 56)))
    (set! %1952 (load %1951 (bitvector 8) #:align 8))
    (set! %1953 (icmp/eq %1952 (bv #x00 8)))
    (br %1953 %1954 %2025))

; %1954
  (define-label (%1954) #:merge #f
    (set! %1955 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1956 (load %1955 pointer #:align 4))
    (set! %1957 (icmp/eq %1956 nullptr))
    (br %1957 %1966 %1958))

; %1958
  (define-label (%1958) #:merge #f
    (set! %1959 (load %1859 (bitvector 8) #:align 1))
    (set! %1960 (zext %1959 (bitvector 32)))
    (set! %1961 (shl %1960 (bv #x00000007 32)))
    (set! %1962 (or %1961 (bv #x00000013 32)))
    (set! %1963 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1964 (load %1963 (bitvector 32) #:align 4))
    (set! %1965 (getelementptr %1956 (array-offset %1964 4)))
    (store %1962 %1965 (bitvector 32) #:align 4)
    (br %1966))

; %1966
  (define-label (%1966) #:merge #f
    (set! %1967 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1968 (load %1967 (bitvector 32) #:align 4))
    (set! %1969 (add %1968 (bv #x00000001 32)))
    (store %1969 %1967 (bitvector 32) #:align 4)
    (br %2025))

; %1970
  (define-label (%1970) #:merge #f
    (set! %1971 (getelementptr %1859 (array-offset (bv #x00000001 32) 1)))
    (set! %1972 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1973 (load %1972 pointer #:align 4))
    (set! %1974 (icmp/eq %1973 nullptr))
    (br %1974 %1975 %1979))

; %1975
  (define-label (%1975) #:merge #f
    (set! %1976 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1977 (load %1976 (bitvector 32) #:align 4))
    (set! %1978 (add %1977 (bv #x00000001 32)))
    (store %1978 %1976 (bitvector 32) #:align 4)
    (br %1992))

; %1979
  (define-label (%1979) #:merge #f
    (set! %1980 (load %1971 (bitvector 8) #:align 1))
    (set! %1981 (zext %1980 (bitvector 32)))
    (set! %1982 (shl %1981 (bv #x0000000f 32)))
    (set! %1983 (or %1982 (bv #x00000293 32)))
    (set! %1984 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1985 (load %1984 (bitvector 32) #:align 4))
    (set! %1986 (getelementptr %1973 (array-offset %1985 4)))
    (store %1983 %1986 (bitvector 32) #:align 4)
    (set! %1987 (load %1972 pointer #:align 4))
    (set! %1988 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1989 (load %1988 (bitvector 32) #:align 4))
    (set! %1990 (add %1989 (bv #x00000001 32)))
    (store %1990 %1988 (bitvector 32) #:align 4)
    (set! %1991 (icmp/eq %1987 nullptr))
    (br %1991 %1992 %1996))

; %1992
  (define-label (%1992) #:merge #f
    (set! %1993 (phi [%1976 %1975] [%1988 %1979]))
    (set! %1994 (phi [%1978 %1975] [%1990 %1979]))
    (set! %1995 (add %1994 (bv #x00000001 32)))
    (store %1995 %1993 (bitvector 32) #:align 4)
    (br %2017))

; %1996
  (define-label (%1996) #:merge #f
    (set! %1997 (load %1971 (bitvector 8) #:align 1))
    (set! %1998 (zext %1997 (bitvector 32)))
    (set! %1999 (shl %1998 (bv #x00000007 32)))
    (set! %2000 (load %1859 (bitvector 8) #:align 1))
    (set! %2001 (zext %2000 (bitvector 32)))
    (set! %2002 (shl %2001 (bv #x0000000f 32)))
    (set! %2003 (or %1999 %2002))
    (set! %2004 (or %2003 (bv #x00000013 32)))
    (set! %2005 (getelementptr %1987 (array-offset %1990 4)))
    (store %2004 %2005 (bitvector 32) #:align 4)
    (set! %2006 (load %1988 (bitvector 32) #:align 4))
    (set! %2007 (load %1972 pointer #:align 4))
    (set! %2008 (add %2006 (bv #x00000001 32)))
    (store %2008 %1988 (bitvector 32) #:align 4)
    (set! %2009 (icmp/eq %2007 nullptr))
    (br %2009 %2017 %2010))

; %2010
  (define-label (%2010) #:merge #f
    (set! %2011 (load %1859 (bitvector 8) #:align 1))
    (set! %2012 (zext %2011 (bitvector 32)))
    (set! %2013 (shl %2012 (bv #x00000007 32)))
    (set! %2014 (or %2013 (bv #x00028013 32)))
    (set! %2015 (getelementptr %2007 (array-offset %2008 4)))
    (store %2014 %2015 (bitvector 32) #:align 4)
    (set! %2016 (load %1988 (bitvector 32) #:align 4))
    (br %2017))

; %2017
  (define-label (%2017) #:merge #f
    (set! %2018 (phi [%1988 %1996] [%1988 %2010] [%1993 %1992]))
    (set! %2019 (phi [%2008 %1996] [%2016 %2010] [%1995 %1992]))
    (set! %2020 (add %2019 (bv #x00000001 32)))
    (store %2020 %2018 (bitvector 32) #:align 4)
    (set! %2021 (load %1971 (bitvector 8) #:align 1))
    (call @emit_rev32 %2021 %1)
    (set! %2022 (load %1859 (bitvector 8) #:align 1))
    (call @emit_rev32 %2022 %1)
    (br %2025))

; %2023
  (define-label (%2023) #:merge #f
    (set! %2024 (call @printk (getelementptr @.str (array-offset (bv #x00000000 32) 35) (array-offset (bv #x00000000 32) 1)) %21))
    (br %3989))

; %2025
  (define-label (%2025) #:merge #f
    (br %1826 %2026 %3989))

; %2026
  (define-label (%2026) #:merge #f
    (set! %2027 (sext %1823 (bitvector 16)))
    (set! %2028 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %2029 (load %2028 pointer #:align 4))
    (set! %2030 (icmp/eq %2029 nullptr))
    (br %2030 %2048 %2031))

; %2031
  (define-label (%2031) #:merge #f
    (set! %2032 (lshr %2027 (bv #x0005 16)))
    (set! %2033 (zext %2032 (bitvector 32)))
    (set! %2034 (shl %2033 (bv #x00000019 32)))
    (set! %2035 (load %1859 (bitvector 8) #:align 1))
    (set! %2036 (zext %2035 (bitvector 32)))
    (set! %2037 (shl %2036 (bv #x00000014 32)))
    (set! %2038 (shl %2027 (bv #x0007 16)))
    (set! %2039 (and %2038 (bv #x0f80 16)))
    (set! %2040 (zext %2039 (bitvector 32)))
    (set! %2041 (or %2034 %2040))
    (set! %2042 (or %2041 %2037))
    (set! %2043 (or %2042 (bv #x00042023 32)))
    (set! %2044 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %2045 (load %2044 (bitvector 32) #:align 4))
    (set! %2046 (getelementptr %2029 (array-offset %2045 4)))
    (store %2043 %2046 (bitvector 32) #:align 4)
    (set! %2047 (load %2028 pointer #:align 4))
    (br %2048))

; %2048
  (define-label (%2048) #:merge #f
    (set! %2049 (phi [#(struct:nullptr) %2026] [%2047 %2031]))
    (set! %2050 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %2051 (load %2050 (bitvector 32) #:align 4))
    (set! %2052 (add %2051 (bv #x00000001 32)))
    (store %2052 %2050 (bitvector 32) #:align 4)
    (set! %2053 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset %25 2) (array-offset (bv #x00000001 32) 1)))
    (set! %2054 (load %2053 (bitvector 8) #:align 1))
    (set! %2055 (sext %2054 (bitvector 16)))
    (set! %2056 (icmp/eq %2049 nullptr))
    (br %2056 %2073 %2057))

; %2057
  (define-label (%2057) #:merge #f
    (set! %2058 (lshr %2055 (bv #x0005 16)))
    (set! %2059 (zext %2058 (bitvector 32)))
    (set! %2060 (shl %2059 (bv #x00000019 32)))
    (set! %2061 (getelementptr %1859 (array-offset (bv #x00000001 32) 1)))
    (set! %2062 (load %2061 (bitvector 8) #:align 1))
    (set! %2063 (zext %2062 (bitvector 32)))
    (set! %2064 (shl %2063 (bv #x00000014 32)))
    (set! %2065 (shl %2055 (bv #x0007 16)))
    (set! %2066 (and %2065 (bv #x0f80 16)))
    (set! %2067 (zext %2066 (bitvector 32)))
    (set! %2068 (or %2060 %2067))
    (set! %2069 (or %2068 %2064))
    (set! %2070 (or %2069 (bv #x00042023 32)))
    (set! %2071 (getelementptr %2049 (array-offset %2052 4)))
    (store %2070 %2071 (bitvector 32) #:align 4)
    (set! %2072 (load %2050 (bitvector 32) #:align 4))
    (br %2073))

; %2073
  (define-label (%2073) #:merge #f
    (set! %2074 (phi [%2052 %2048] [%2072 %2057]))
    (set! %2075 (add %2074 (bv #x00000001 32)))
    (store %2075 %2050 (bitvector 32) #:align 4)
    (br %3989))

; %2076
  (define-label (%2076) #:merge #f
    (set! %2077 (sext %19 (bitvector 32)))
    (set! %2078 (icmp/sgt %16 (bv #x00000000 32)))
    (br %2078 %2079 %2085))

; %2079
  (define-label (%2079) #:merge #f
    (set! %2080 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 16)))
    (set! %2081 (load %2080 pointer #:align 4))
    (set! %2082 (add %17 (bv #xffffffff 32)))
    (set! %2083 (getelementptr %2081 (array-offset %2082 4)))
    (set! %2084 (load %2083 (bitvector 32) #:align 4))
    (br %2085))

; %2085
  (define-label (%2085) #:merge #f
    (set! %2086 (phi [%2084 %2079] [(bv #x00000000 32) %2076]))
    (set! %2087 (add %17 %2077))
    (set! %2088 (icmp/sgt %2087 (bv #xffffffff 32)))
    (br %2088 %2089 %2094))

; %2089
  (define-label (%2089) #:merge #f
    (set! %2090 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 16)))
    (set! %2091 (load %2090 pointer #:align 4))
    (set! %2092 (getelementptr %2091 (array-offset %2087 4)))
    (set! %2093 (load %2092 (bitvector 32) #:align 4))
    (br %2094))

; %2094
  (define-label (%2094) #:merge #f
    (set! %2095 (phi [%2093 %2089] [(bv #x00000000 32) %2085]))
    (set! %2096 (sub %2095 %2086))
    (set! %2097 (shl %2096 (bv #x00000002 32)))
    (set! %2098 (icmp/eq %2097 (bv #x00000000 32)))
    (set! %2099 (add %2097 (bv #x00100000 32)))
    (set! %2100 (icmp/ugt %2099 (bv #x001fffff 32)))
    (set! %2101 (or %2098 %2100))
    (br %2101 %2127 %2102))

; %2102
  (define-label (%2102) #:merge #f
    (set! %2103 (ashr %2097 (bv #x00000001 32)))
    (set! %2104 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %2105 (load %2104 pointer #:align 4))
    (set! %2106 (icmp/eq %2105 nullptr))
    (br %2106 %2123 %2107))

; %2107
  (define-label (%2107) #:merge #f
    (set! %2108 (shl %2096 (bv #x0000000a 32)))
    (set! %2109 (and %2108 (bv #x0007fc00 32)))
    (set! %2110 (and %2103 (bv #x00080000 32)))
    (set! %2111 (or %2110 %2109))
    (set! %2112 (lshr %2103 (bv #x00000002 32)))
    (set! %2113 (and %2112 (bv #x00000100 32)))
    (set! %2114 (or %2111 %2113))
    (set! %2115 (lshr %2103 (bv #x0000000b 32)))
    (set! %2116 (and %2115 (bv #x000000ff 32)))
    (set! %2117 (or %2114 %2116))
    (set! %2118 (shl %2117 (bv #x0000000c 32)))
    (set! %2119 (or %2118 (bv #x0000006f 32)))
    (set! %2120 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %2121 (load %2120 (bitvector 32) #:align 4))
    (set! %2122 (getelementptr %2105 (array-offset %2121 4)))
    (store %2119 %2122 (bitvector 32) #:align 4)
    (br %2123))

; %2123
  (define-label (%2123) #:merge #f
    (set! %2124 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %2125 (load %2124 (bitvector 32) #:align 4))
    (set! %2126 (add %2125 (bv #x00000001 32)))
    (store %2126 %2124 (bitvector 32) #:align 4)
    (br %3989))

; %2127
  (define-label (%2127) #:merge #f
    (set! %2128 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %2129 (load %2128 pointer #:align 4))
    (set! %2130 (icmp/eq %2129 nullptr))
    (br %2130 %2131 %2135))

; %2131
  (define-label (%2131) #:merge #f
    (set! %2132 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %2133 (load %2132 (bitvector 32) #:align 4))
    (set! %2134 (add %2133 (bv #x00000001 32)))
    (store %2134 %2132 (bitvector 32) #:align 4)
    (br %2151))

; %2135
  (define-label (%2135) #:merge #f
    (set! %2136 (add %2097 (bv #x00000800 32)))
    (set! %2137 (and %2136 (bv #xfffff000 32)))
    (set! %2138 (or %2137 (bv #x00000317 32)))
    (set! %2139 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %2140 (load %2139 (bitvector 32) #:align 4))
    (set! %2141 (getelementptr %2129 (array-offset %2140 4)))
    (store %2138 %2141 (bitvector 32) #:align 4)
    (set! %2142 (load %2128 pointer #:align 4))
    (set! %2143 (load %2139 (bitvector 32) #:align 4))
    (set! %2144 (add %2143 (bv #x00000001 32)))
    (store %2144 %2139 (bitvector 32) #:align 4)
    (set! %2145 (icmp/eq %2142 nullptr))
    (br %2145 %2151 %2146))

; %2146
  (define-label (%2146) #:merge #f
    (set! %2147 (shl %2096 (bv #x00000016 32)))
    (set! %2148 (or %2147 (bv #x00030067 32)))
    (set! %2149 (getelementptr %2142 (array-offset %2144 4)))
    (store %2148 %2149 (bitvector 32) #:align 4)
    (set! %2150 (load %2139 (bitvector 32) #:align 4))
    (br %2151))

; %2151
  (define-label (%2151) #:merge #f
    (set! %2152 (phi [%2139 %2135] [%2139 %2146] [%2132 %2131]))
    (set! %2153 (phi [%2144 %2135] [%2150 %2146] [%2134 %2131]))
    (set! %2154 (add %2153 (bv #x00000001 32)))
    (store %2154 %2152 (bitvector 32) #:align 4)
    (br %3989))

; %2155
  (define-label (%2155) #:merge #f
    (call llvm.lifetime.start.p0i8 (bv #x0000000000000001 64) %4)
    (set! %2156 (bitcast %5))
    (call llvm.lifetime.start.p0i8 (bv #x0000000000000008 64) %2156)
    (set! %2157 (call @bpf_jit_get_func_addr %12 %0 %2 %5 %4))
    (set! %2158 (icmp/slt %2157 (bv #x00000000 32)))
    (br %2158 %2259 %2159))

; %2159
  (define-label (%2159) #:merge #f
    (set! %2160 (load %5 (bitvector 64) #:align 8))
    (set! %2161 (trunc %2160 (bitvector 32)))
    (set! %2162 (add %2161 (bv #x00000800 32)))
    (set! %2163 (and %2162 (bv #xfffff000 32)))
    (set! %2164 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %2165 (load %2164 pointer #:align 4))
    (set! %2166 (icmp/eq %2165 nullptr))
    (set! %2167 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %2168 (load %2167 (bitvector 32) #:align 4))
    (br %2166 %2169 %2171))

; %2169
  (define-label (%2169) #:merge #f
    (set! %2170 (add %2168 (bv #x00000001 32)))
    (store %2170 %2167 (bitvector 32) #:align 4)
    (br %2177))

; %2171
  (define-label (%2171) #:merge #f
    (set! %2172 (getelementptr %2165 (array-offset %2168 4)))
    (store (bv #xff010113 32) %2172 (bitvector 32) #:align 4)
    (set! %2173 (load %2164 pointer #:align 4))
    (set! %2174 (load %2167 (bitvector 32) #:align 4))
    (set! %2175 (add %2174 (bv #x00000001 32)))
    (store %2175 %2167 (bitvector 32) #:align 4)
    (set! %2176 (icmp/eq %2173 nullptr))
    (br %2176 %2177 %2180))

; %2177
  (define-label (%2177) #:merge #f
    (set! %2178 (phi [%2175 %2171] [%2170 %2169]))
    (set! %2179 (add %2178 (bv #x00000001 32)))
    (store %2179 %2167 (bitvector 32) #:align 4)
    (br %2186))

; %2180
  (define-label (%2180) #:merge #f
    (set! %2181 (getelementptr %2173 (array-offset %2175 4)))
    (store (bv #x01312023 32) %2181 (bitvector 32) #:align 4)
    (set! %2182 (load %2167 (bitvector 32) #:align 4))
    (set! %2183 (load %2164 pointer #:align 4))
    (set! %2184 (add %2182 (bv #x00000001 32)))
    (store %2184 %2167 (bitvector 32) #:align 4)
    (set! %2185 (icmp/eq %2183 nullptr))
    (br %2185 %2186 %2189))

; %2186
  (define-label (%2186) #:merge #f
    (set! %2187 (phi [%2178 %2177] [%2182 %2180]))
    (set! %2188 (add %2187 (bv #x00000002 32)))
    (store %2188 %2167 (bitvector 32) #:align 4)
    (br %2195))

; %2189
  (define-label (%2189) #:merge #f
    (set! %2190 (getelementptr %2183 (array-offset %2184 4)))
    (store (bv #x01412223 32) %2190 (bitvector 32) #:align 4)
    (set! %2191 (load %2164 pointer #:align 4))
    (set! %2192 (load %2167 (bitvector 32) #:align 4))
    (set! %2193 (add %2192 (bv #x00000001 32)))
    (store %2193 %2167 (bitvector 32) #:align 4)
    (set! %2194 (icmp/eq %2191 nullptr))
    (br %2194 %2195 %2198))

; %2195
  (define-label (%2195) #:merge #f
    (set! %2196 (phi [%2188 %2186] [%2193 %2189]))
    (set! %2197 (add %2196 (bv #x00000001 32)))
    (store %2197 %2167 (bitvector 32) #:align 4)
    (br %2204))

; %2198
  (define-label (%2198) #:merge #f
    (set! %2199 (getelementptr %2191 (array-offset %2193 4)))
    (store (bv #x000f8b93 32) %2199 (bitvector 32) #:align 4)
    (set! %2200 (load %2164 pointer #:align 4))
    (set! %2201 (load %2167 (bitvector 32) #:align 4))
    (set! %2202 (add %2201 (bv #x00000001 32)))
    (store %2202 %2167 (bitvector 32) #:align 4)
    (set! %2203 (icmp/eq %2200 nullptr))
    (br %2203 %2204 %2207))

; %2204
  (define-label (%2204) #:merge #f
    (set! %2205 (phi [%2197 %2195] [%2202 %2198]))
    (set! %2206 (add %2205 (bv #x00000001 32)))
    (store %2206 %2167 (bitvector 32) #:align 4)
    (br %2214))

; %2207
  (define-label (%2207) #:merge #f
    (set! %2208 (or %2163 (bv #x00000337 32)))
    (set! %2209 (getelementptr %2200 (array-offset %2202 4)))
    (store %2208 %2209 (bitvector 32) #:align 4)
    (set! %2210 (load %2167 (bitvector 32) #:align 4))
    (set! %2211 (load %2164 pointer #:align 4))
    (set! %2212 (add %2210 (bv #x00000001 32)))
    (store %2212 %2167 (bitvector 32) #:align 4)
    (set! %2213 (icmp/eq %2211 nullptr))
    (br %2213 %2214 %2218))

; %2214
  (define-label (%2214) #:merge #f
    (set! %2215 (phi [%2205 %2204] [%2210 %2207]))
    (set! %2216 (add %2215 (bv #x00000002 32)))
    (set! %2217 (add %2215 (bv #x00000003 32)))
    (store %2217 %2167 (bitvector 32) #:align 4)
    (br %2235))

; %2218
  (define-label (%2218) #:merge #f
    (set! %2219 (shl %2161 (bv #x00000014 32)))
    (set! %2220 (or %2219 (bv #x000300e7 32)))
    (set! %2221 (getelementptr %2211 (array-offset %2212 4)))
    (store %2220 %2221 (bitvector 32) #:align 4)
    (set! %2222 (load %2164 pointer #:align 4))
    (set! %2223 (load %2167 (bitvector 32) #:align 4))
    (set! %2224 (add %2223 (bv #x00000001 32)))
    (store %2224 %2167 (bitvector 32) #:align 4)
    (set! %2225 (icmp/eq %2222 nullptr))
    (br %2225 %2226 %2229))

; %2226
  (define-label (%2226) #:merge #f
    (set! %2227 (add %2223 (bv #x00000002 32)))
    (set! %2228 (add %2223 (bv #x00000003 32)))
    (store %2228 %2167 (bitvector 32) #:align 4)
    (br %2244))

; %2229
  (define-label (%2229) #:merge #f
    (set! %2230 (getelementptr %2222 (array-offset %2224 4)))
    (store (bv #x000b8f93 32) %2230 (bitvector 32) #:align 4)
    (set! %2231 (load %2164 pointer #:align 4))
    (set! %2232 (load %2167 (bitvector 32) #:align 4))
    (set! %2233 (add %2232 (bv #x00000001 32)))
    (store %2233 %2167 (bitvector 32) #:align 4)
    (set! %2234 (icmp/eq %2231 nullptr))
    (br %2234 %2235 %2238))

; %2235
  (define-label (%2235) #:merge #f
    (set! %2236 (phi [%2216 %2214] [%2232 %2229]))
    (set! %2237 (add %2236 (bv #x00000003 32)))
    (store %2237 %2167 (bitvector 32) #:align 4)
    (br %2256))

; %2238
  (define-label (%2238) #:merge #f
    (set! %2239 (getelementptr %2231 (array-offset %2233 4)))
    (store (bv #x00050493 32) %2239 (bitvector 32) #:align 4)
    (set! %2240 (load %2164 pointer #:align 4))
    (set! %2241 (load %2167 (bitvector 32) #:align 4))
    (set! %2242 (add %2241 (bv #x00000001 32)))
    (store %2242 %2167 (bitvector 32) #:align 4)
    (set! %2243 (icmp/eq %2240 nullptr))
    (br %2243 %2244 %2247))

; %2244
  (define-label (%2244) #:merge #f
    (set! %2245 (phi [%2227 %2226] [%2241 %2238]))
    (set! %2246 (add %2245 (bv #x00000002 32)))
    (store %2246 %2167 (bitvector 32) #:align 4)
    (br %2256))

; %2247
  (define-label (%2247) #:merge #f
    (set! %2248 (getelementptr %2240 (array-offset %2242 4)))
    (store (bv #x00058913 32) %2248 (bitvector 32) #:align 4)
    (set! %2249 (load %2164 pointer #:align 4))
    (set! %2250 (load %2167 (bitvector 32) #:align 4))
    (set! %2251 (add %2250 (bv #x00000001 32)))
    (store %2251 %2167 (bitvector 32) #:align 4)
    (set! %2252 (icmp/eq %2249 nullptr))
    (br %2252 %2256 %2253))

; %2253
  (define-label (%2253) #:merge #f
    (set! %2254 (getelementptr %2249 (array-offset %2251 4)))
    (store (bv #x01010113 32) %2254 (bitvector 32) #:align 4)
    (set! %2255 (load %2167 (bitvector 32) #:align 4))
    (br %2256))

; %2256
  (define-label (%2256) #:merge #f
    (set! %2257 (phi [%2246 %2244] [%2251 %2247] [%2255 %2253] [%2237 %2235]))
    (set! %2258 (add %2257 (bv #x00000001 32)))
    (store %2258 %2167 (bitvector 32) #:align 4)
    (call llvm.lifetime.end.p0i8 (bv #x0000000000000008 64) %2156)
    (call llvm.lifetime.end.p0i8 (bv #x0000000000000001 64) %4)
    (br %3989))

; %2259
  (define-label (%2259) #:merge #f
    (call llvm.lifetime.end.p0i8 (bv #x0000000000000008 64) %2156)
    (call llvm.lifetime.end.p0i8 (bv #x0000000000000001 64) %4)
    (br %3989))

; %2260
  (define-label (%2260) #:merge #f
    (set! %2261 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %2262 (load %2261 (bitvector 32) #:align 4))
    (set! %2263 (icmp/eq %16 (bv #x00000000 32)))
    (set! %2264 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 16)))
    (set! %2265 (load %2264 pointer #:align 4))
    (br %2263 %2273 %2266))

; %2266
  (define-label (%2266) #:merge #f
    (set! %2267 (getelementptr %2265 (array-offset %17 4)))
    (set! %2268 (load %2267 (bitvector 32) #:align 4))
    (set! %2269 (add %17 (bv #xffffffff 32)))
    (set! %2270 (getelementptr %2265 (array-offset %2269 4)))
    (set! %2271 (load %2270 (bitvector 32) #:align 4))
    (set! %2272 (sub %2268 %2271))
    (br %2275))

; %2273
  (define-label (%2273) #:merge #f
    (set! %2274 (load %2265 (bitvector 32) #:align 4))
    (br %2275))

; %2275
  (define-label (%2275) #:merge #f
    (set! %2276 (phi [%2272 %2266] [%2274 %2273]))
    (set! %2277 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %2278 (load %2277 pointer #:align 4))
    (set! %2279 (icmp/eq %2278 nullptr))
    (br %2279 %2283 %2280))

; %2280
  (define-label (%2280) #:merge #f
    (set! %2281 (getelementptr %2278 (array-offset %2262 4)))
    (store (bv #x01462303 32) %2281 (bitvector 32) #:align 4)
    (set! %2282 (load %2261 (bitvector 32) #:align 4))
    (br %2283))

; %2283
  (define-label (%2283) #:merge #f
    (set! %2284 (phi [%2262 %2275] [%2282 %2280]))
    (set! %2285 (add %2284 (bv #x00000001 32)))
    (store %2285 %2261 (bitvector 32) #:align 4)
    (set! %2286 (xor %2284 (bv #x3fffffff 32)))
    (set! %2287 (add %2276 %2262))
    (set! %2288 (add %2286 %2287))
    (set! %2289 (shl %2288 (bv #x00000002 32)))
    (call @emit_bcc (bv #x30 8) (bv #x0e 8) (bv #x06 8) %2289 %1)
    (set! %2290 (load %2277 pointer #:align 4))
    (set! %2291 (icmp/eq %2290 nullptr))
    (br %2291 %2295 %2292))

; %2292
  (define-label (%2292) #:merge #f
    (set! %2293 (load %2261 (bitvector 32) #:align 4))
    (set! %2294 (getelementptr %2290 (array-offset %2293 4)))
    (store (bv #xffff8313 32) %2294 (bitvector 32) #:align 4)
    (br %2295))

; %2295
  (define-label (%2295) #:merge #f
    (set! %2296 (load %2261 (bitvector 32) #:align 4))
    (set! %2297 (add %2296 (bv #x00000001 32)))
    (store %2297 %2261 (bitvector 32) #:align 4)
    (set! %2298 (xor %2296 (bv #x3fffffff 32)))
    (set! %2299 (add %2298 %2287))
    (set! %2300 (shl %2299 (bv #x00000002 32)))
    (call @emit_bcc (bv #xc0 8) (bv #x1f 8) (bv #x00 8) %2300 %1)
    (set! %2301 (load %2277 pointer #:align 4))
    (set! %2302 (icmp/eq %2301 nullptr))
    (set! %2303 (load %2261 (bitvector 32) #:align 4))
    (br %2302 %2304 %2306))

; %2304
  (define-label (%2304) #:merge #f
    (set! %2305 (add %2303 (bv #x00000002 32)))
    (store %2305 %2261 (bitvector 32) #:align 4)
    (br %2323))

; %2306
  (define-label (%2306) #:merge #f
    (set! %2307 (getelementptr %2301 (array-offset %2303 4)))
    (store (bv #x00271293 32) %2307 (bitvector 32) #:align 4)
    (set! %2308 (load %2277 pointer #:align 4))
    (set! %2309 (load %2261 (bitvector 32) #:align 4))
    (set! %2310 (add %2309 (bv #x00000001 32)))
    (store %2310 %2261 (bitvector 32) #:align 4)
    (set! %2311 (icmp/eq %2308 nullptr))
    (br %2311 %2312 %2314))

; %2312
  (define-label (%2312) #:merge #f
    (set! %2313 (add %2309 (bv #x00000002 32)))
    (store %2313 %2261 (bitvector 32) #:align 4)
    (br %2323))

; %2314
  (define-label (%2314) #:merge #f
    (set! %2315 (getelementptr %2308 (array-offset %2310 4)))
    (store (bv #x00c282b3 32) %2315 (bitvector 32) #:align 4)
    (set! %2316 (load %2277 pointer #:align 4))
    (set! %2317 (load %2261 (bitvector 32) #:align 4))
    (set! %2318 (add %2317 (bv #x00000001 32)))
    (store %2318 %2261 (bitvector 32) #:align 4)
    (set! %2319 (icmp/eq %2316 nullptr))
    (br %2319 %2323 %2320))

; %2320
  (define-label (%2320) #:merge #f
    (set! %2321 (getelementptr %2316 (array-offset %2318 4)))
    (store (bv #x1102a283 32) %2321 (bitvector 32) #:align 4)
    (set! %2322 (load %2261 (bitvector 32) #:align 4))
    (br %2323))

; %2323
  (define-label (%2323) #:merge #f
    (set! %2324 (phi [%2322 %2320] [%2318 %2314] [%2313 %2312] [%2305 %2304]))
    (set! %2325 (add %2324 (bv #x00000001 32)))
    (store %2325 %2261 (bitvector 32) #:align 4)
    (set! %2326 (xor %2324 (bv #x3fffffff 32)))
    (set! %2327 (add %2326 %2287))
    (set! %2328 (shl %2327 (bv #x00000002 32)))
    (call @emit_bcc (bv #x10 8) (bv #x05 8) (bv #x00 8) %2328 %1)
    (set! %2329 (load %2277 pointer #:align 4))
    (set! %2330 (icmp/eq %2329 nullptr))
    (set! %2331 (load %2261 (bitvector 32) #:align 4))
    (br %2330 %2332 %2334))

; %2332
  (define-label (%2332) #:merge #f
    (set! %2333 (add %2331 (bv #x00000001 32)))
    (store %2333 %2261 (bitvector 32) #:align 4)
    (br %2343))

; %2334
  (define-label (%2334) #:merge #f
    (set! %2335 (getelementptr %2329 (array-offset %2331 4)))
    (store (bv #x0242a283 32) %2335 (bitvector 32) #:align 4)
    (set! %2336 (load %2277 pointer #:align 4))
    (set! %2337 (load %2261 (bitvector 32) #:align 4))
    (set! %2338 (add %2337 (bv #x00000001 32)))
    (store %2338 %2261 (bitvector 32) #:align 4)
    (set! %2339 (icmp/eq %2336 nullptr))
    (br %2339 %2343 %2340))

; %2340
  (define-label (%2340) #:merge #f
    (set! %2341 (getelementptr %2336 (array-offset %2338 4)))
    (store (bv #x00030f93 32) %2341 (bitvector 32) #:align 4)
    (set! %2342 (load %2261 (bitvector 32) #:align 4))
    (br %2343))

; %2343
  (define-label (%2343) #:merge #f
    (set! %2344 (phi [%2342 %2340] [%2338 %2334] [%2333 %2332]))
    (set! %2345 (add %2344 (bv #x00000001 32)))
    (store %2345 %2261 (bitvector 32) #:align 4)
    (call @__build_epilogue (bv #b1 1) %1)
    (br %3989))

; %2346
  (define-label (%2346) #:merge #f
    (set! %2347 (sext %19 (bitvector 32)))
    (set! %2348 (icmp/sgt %16 (bv #x00000000 32)))
    (br %2348 %2349 %2355))

; %2349
  (define-label (%2349) #:merge #f
    (set! %2350 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 16)))
    (set! %2351 (load %2350 pointer #:align 4))
    (set! %2352 (add %17 (bv #xffffffff 32)))
    (set! %2353 (getelementptr %2351 (array-offset %2352 4)))
    (set! %2354 (load %2353 (bitvector 32) #:align 4))
    (br %2355))

; %2355
  (define-label (%2355) #:merge #f
    (set! %2356 (phi [%2354 %2349] [(bv #x00000000 32) %2346]))
    (set! %2357 (add %17 %2347))
    (set! %2358 (icmp/sgt %2357 (bv #xffffffff 32)))
    (br %2358 %2359 %2364))

; %2359
  (define-label (%2359) #:merge #f
    (set! %2360 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 16)))
    (set! %2361 (load %2360 pointer #:align 4))
    (set! %2362 (getelementptr %2361 (array-offset %2357 4)))
    (set! %2363 (load %2362 (bitvector 32) #:align 4))
    (br %2364))

; %2364
  (define-label (%2364) #:merge #f
    (set! %2365 (phi [%2363 %2359] [(bv #x00000000 32) %2355]))
    (set! %2366 (sub %2365 %2356))
    (set! %2367 (shl %2366 (bv #x00000002 32)))
    (set! %2368 (and %30 (bv #x00000008 32)))
    (set! %2369 (icmp/eq %2368 (bv #x00000000 32)))
    (set! %2370 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %2371 (load %2370 (bitvector 32) #:align 4))
    (br %2369 %2372 %2422))

; %2372
  (define-label (%2372) #:merge #f
    (set! %2373 (add %21 (bv #x00000800 32)))
    (set! %2374 (and %21 (bv #x00000fff 32)))
    (set! %2375 (icmp/ult %2373 (bv #x00001000 32)))
    (set! %2376 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %2377 (load %2376 pointer #:align 4))
    (set! %2378 (icmp/eq %2377 nullptr))
    (br %2375 %2395 %2379))

; %2379
  (define-label (%2379) #:merge #f
    (br %2378 %2380 %2382))

; %2380
  (define-label (%2380) #:merge #f
    (set! %2381 (add %2371 (bv #x00000001 32)))
    (store %2381 %2370 (bitvector 32) #:align 4)
    (br %2401))

; %2382
  (define-label (%2382) #:merge #f
    (set! %2383 (and %2373 (bv #xfffff000 32)))
    (set! %2384 (or %2383 (bv #x00000eb7 32)))
    (set! %2385 (getelementptr %2377 (array-offset %2371 4)))
    (store %2384 %2385 (bitvector 32) #:align 4)
    (set! %2386 (load %2376 pointer #:align 4))
    (set! %2387 (load %2370 (bitvector 32) #:align 4))
    (set! %2388 (add %2387 (bv #x00000001 32)))
    (store %2388 %2370 (bitvector 32) #:align 4)
    (set! %2389 (icmp/eq %2386 nullptr))
    (br %2389 %2404 %2390))

; %2390
  (define-label (%2390) #:merge #f
    (set! %2391 (shl %2374 (bv #x00000014 32)))
    (set! %2392 (or %2391 (bv #x000e8e93 32)))
    (set! %2393 (getelementptr %2386 (array-offset %2388 4)))
    (store %2392 %2393 (bitvector 32) #:align 4)
    (set! %2394 (load %2370 (bitvector 32) #:align 4))
    (br %2401))

; %2395
  (define-label (%2395) #:merge #f
    (br %2378 %2404 %2396))

; %2396
  (define-label (%2396) #:merge #f
    (set! %2397 (shl %2374 (bv #x00000014 32)))
    (set! %2398 (or %2397 (bv #x00000e93 32)))
    (set! %2399 (getelementptr %2377 (array-offset %2371 4)))
    (store %2398 %2399 (bitvector 32) #:align 4)
    (set! %2400 (load %2370 (bitvector 32) #:align 4))
    (br %2401))

; %2401
  (define-label (%2401) #:merge #f
    (set! %2402 (phi [%2400 %2396] [%2381 %2380] [%2394 %2390]))
    (set! %2403 (load %2376 pointer #:align 4))
    (br %2404))

; %2404
  (define-label (%2404) #:merge #f
    (set! %2405 (phi [%2403 %2401] [#(struct:nullptr) %2395] [#(struct:nullptr) %2382]))
    (set! %2406 (phi [%2402 %2401] [%2371 %2395] [%2388 %2382]))
    (set! %2407 (add %2406 (bv #x00000001 32)))
    (store %2407 %2370 (bitvector 32) #:align 4)
    (set! %2408 (icmp/sgt %21 (bv #xffffffff 32)))
    (set! %2409 (icmp/eq %2405 nullptr))
    (br %2408 %2410 %2413))

; %2410
  (define-label (%2410) #:merge #f
    (br %2409 %2416 %2411))

; %2411
  (define-label (%2411) #:merge #f
    (set! %2412 (getelementptr %2405 (array-offset %2407 4)))
    (store (bv #x00000f13 32) %2412 (bitvector 32) #:align 4)
    (br %2416))

; %2413
  (define-label (%2413) #:merge #f
    (br %2409 %2416 %2414))

; %2414
  (define-label (%2414) #:merge #f
    (set! %2415 (getelementptr %2405 (array-offset %2407 4)))
    (store (bv #xfff00f13 32) %2415 (bitvector 32) #:align 4)
    (br %2416))

; %2416
  (define-label (%2416) #:merge #f
    (set! %2417 (load %2370 (bitvector 32) #:align 4))
    (set! %2418 (add %2417 (bv #x00000001 32)))
    (store %2418 %2370 (bitvector 32) #:align 4)
    (set! %2419 (sub %2418 %2371))
    (set! %2420 (shl %2419 (bv #x00000002 32)))
    (set! %2421 (sub %2367 %2420))
    (br %2422))

; %2422
  (define-label (%2422) #:merge #f
    (set! %2423 (phi [%2418 %2416] [%2371 %2364]))
    (set! %2424 (phi [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000d 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %2416] [%29 %2364]))
    (set! %2425 (phi [%2421 %2416] [%2367 %2364]))
    (set! %2426 (and %7 (bv #xf0 8)))
    (set! %2427 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (br %10 %2428 %3075))

; %2428
  (define-label (%2428) #:merge #f
    (set! %2429 (load %26 (bitvector 8) #:align 1))
    (set! %2430 (lshr (bv #x00000bc0 32) %25))
    (set! %2431 (and %2430 (bv #x00000001 32)))
    (set! %2432 (icmp/eq %2431 (bv #x00000000 32)))
    (br %2432 %2459 %2433))

; %2433
  (define-label (%2433) #:merge #f
    (set! %2434 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %2435 (load %2434 pointer #:align 4))
    (set! %2436 (icmp/eq %2435 nullptr))
    (br %2436 %2437 %2439))

; %2437
  (define-label (%2437) #:merge #f
    (set! %2438 (add %2423 (bv #x00000001 32)))
    (store %2438 %2427 (bitvector 32) #:align 4)
    (br %2456))

; %2439
  (define-label (%2439) #:merge #f
    (set! %2440 (sext %2429 (bitvector 32)))
    (set! %2441 (shl %2440 (bv #x00000014 32)))
    (set! %2442 (or %2441 (bv #x00042e03 32)))
    (set! %2443 (getelementptr %2435 (array-offset %2423 4)))
    (store %2442 %2443 (bitvector 32) #:align 4)
    (set! %2444 (load %2434 pointer #:align 4))
    (set! %2445 (load %2427 (bitvector 32) #:align 4))
    (set! %2446 (add %2445 (bv #x00000001 32)))
    (store %2446 %2427 (bitvector 32) #:align 4)
    (set! %2447 (icmp/eq %2444 nullptr))
    (br %2447 %2456 %2448))

; %2448
  (define-label (%2448) #:merge #f
    (set! %2449 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset %25 2) (array-offset (bv #x00000001 32) 1)))
    (set! %2450 (load %2449 (bitvector 8) #:align 1))
    (set! %2451 (sext %2450 (bitvector 32)))
    (set! %2452 (shl %2451 (bv #x00000014 32)))
    (set! %2453 (or %2452 (bv #x00042383 32)))
    (set! %2454 (getelementptr %2444 (array-offset %2446 4)))
    (store %2453 %2454 (bitvector 32) #:align 4)
    (set! %2455 (load %2427 (bitvector 32) #:align 4))
    (br %2456))

; %2456
  (define-label (%2456) #:merge #f
    (set! %2457 (phi [%2446 %2439] [%2455 %2448] [%2438 %2437]))
    (set! %2458 (add %2457 (bv #x00000001 32)))
    (store %2458 %2427 (bitvector 32) #:align 4)
    (br %2459))

; %2459
  (define-label (%2459) #:merge #f
    (set! %2460 (phi [%2458 %2456] [%2423 %2428]))
    (set! %2461 (phi [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000c 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %2456] [%26 %2428]))
    (set! %2462 (load %2424 (bitvector 8) #:align 1))
    (set! %2463 (icmp/slt %2462 (bv #x00 8)))
    (br %2463 %2464 %2490))

; %2464
  (define-label (%2464) #:merge #f
    (set! %2465 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %2466 (load %2465 pointer #:align 4))
    (set! %2467 (icmp/eq %2466 nullptr))
    (br %2467 %2468 %2470))

; %2468
  (define-label (%2468) #:merge #f
    (set! %2469 (add %2460 (bv #x00000001 32)))
    (store %2469 %2427 (bitvector 32) #:align 4)
    (br %2487))

; %2470
  (define-label (%2470) #:merge #f
    (set! %2471 (sext %2462 (bitvector 32)))
    (set! %2472 (shl %2471 (bv #x00000014 32)))
    (set! %2473 (or %2472 (bv #x00042f03 32)))
    (set! %2474 (getelementptr %2466 (array-offset %2460 4)))
    (store %2473 %2474 (bitvector 32) #:align 4)
    (set! %2475 (load %2465 pointer #:align 4))
    (set! %2476 (load %2427 (bitvector 32) #:align 4))
    (set! %2477 (add %2476 (bv #x00000001 32)))
    (store %2477 %2427 (bitvector 32) #:align 4)
    (set! %2478 (icmp/eq %2475 nullptr))
    (br %2478 %2487 %2479))

; %2479
  (define-label (%2479) #:merge #f
    (set! %2480 (getelementptr %2424 (array-offset (bv #x00000001 32) 1)))
    (set! %2481 (load %2480 (bitvector 8) #:align 1))
    (set! %2482 (sext %2481 (bitvector 32)))
    (set! %2483 (shl %2482 (bv #x00000014 32)))
    (set! %2484 (or %2483 (bv #x00042e83 32)))
    (set! %2485 (getelementptr %2475 (array-offset %2477 4)))
    (store %2484 %2485 (bitvector 32) #:align 4)
    (set! %2486 (load %2427 (bitvector 32) #:align 4))
    (br %2487))

; %2487
  (define-label (%2487) #:merge #f
    (set! %2488 (phi [%2477 %2470] [%2486 %2479] [%2469 %2468]))
    (set! %2489 (add %2488 (bv #x00000001 32)))
    (store %2489 %2427 (bitvector 32) #:align 4)
    (br %2490))

; %2490
  (define-label (%2490) #:merge #f
    (set! %2491 (phi [%2489 %2487] [%2460 %2459]))
    (set! %2492 (phi [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000d 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %2487] [%2424 %2459]))
    (set! %2493 (zext %2426 (bitvector 32)))
    (set! %2494 (add %2493 (bv #xfffffff0 32)))
    (set! %2495 (lshr %2494 (bv #x00000004 32)))
    (switch %2495 %3048 [(bv #x00000000 32) %2496] [(bv #x00000001 32) %2532] [(bv #x00000009 32) %2585] [(bv #x00000002 32) %2638] [(bv #x0000000a 32) %2691] [(bv #x00000004 32) %2744] [(bv #x00000005 32) %2780] [(bv #x0000000b 32) %2833] [(bv #x00000006 32) %2886] [(bv #x0000000c 32) %2939] [(bv #x00000003 32) %2992]))

; %2496
  (define-label (%2496) #:merge #f
    (set! %2497 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %2498 (load %2497 pointer #:align 4))
    (set! %2499 (icmp/eq %2498 nullptr))
    (br %2499 %2500 %2502))

; %2500
  (define-label (%2500) #:merge #f
    (set! %2501 (add %2491 (bv #x00000001 32)))
    (store %2501 %2427 (bitvector 32) #:align 4)
    (br %2529))

; %2502
  (define-label (%2502) #:merge #f
    (set! %2503 (load %2461 (bitvector 8) #:align 1))
    (set! %2504 (zext %2503 (bitvector 32)))
    (set! %2505 (shl %2504 (bv #x0000000f 32)))
    (set! %2506 (load %2492 (bitvector 8) #:align 1))
    (set! %2507 (zext %2506 (bitvector 32)))
    (set! %2508 (shl %2507 (bv #x00000014 32)))
    (set! %2509 (or %2505 %2508))
    (set! %2510 (or %2509 (bv #x00001863 32)))
    (set! %2511 (getelementptr %2498 (array-offset %2491 4)))
    (store %2510 %2511 (bitvector 32) #:align 4)
    (set! %2512 (load %2427 (bitvector 32) #:align 4))
    (set! %2513 (load %2497 pointer #:align 4))
    (set! %2514 (add %2512 (bv #x00000001 32)))
    (store %2514 %2427 (bitvector 32) #:align 4)
    (set! %2515 (icmp/eq %2513 nullptr))
    (br %2515 %2529 %2516))

; %2516
  (define-label (%2516) #:merge #f
    (set! %2517 (getelementptr %2461 (array-offset (bv #x00000001 32) 1)))
    (set! %2518 (load %2517 (bitvector 8) #:align 1))
    (set! %2519 (zext %2518 (bitvector 32)))
    (set! %2520 (shl %2519 (bv #x0000000f 32)))
    (set! %2521 (getelementptr %2492 (array-offset (bv #x00000001 32) 1)))
    (set! %2522 (load %2521 (bitvector 8) #:align 1))
    (set! %2523 (zext %2522 (bitvector 32)))
    (set! %2524 (shl %2523 (bv #x00000014 32)))
    (set! %2525 (or %2520 %2524))
    (set! %2526 (or %2525 (bv #x00001663 32)))
    (set! %2527 (getelementptr %2513 (array-offset %2514 4)))
    (store %2526 %2527 (bitvector 32) #:align 4)
    (set! %2528 (load %2427 (bitvector 32) #:align 4))
    (br %2529))

; %2529
  (define-label (%2529) #:merge #f
    (set! %2530 (phi [%2514 %2502] [%2528 %2516] [%2501 %2500]))
    (set! %2531 (add %2530 (bv #x00000001 32)))
    (br %3046))

; %2532
  (define-label (%2532) #:merge #f
    (set! %2533 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %2534 (load %2533 pointer #:align 4))
    (set! %2535 (icmp/eq %2534 nullptr))
    (br %2535 %2536 %2538))

; %2536
  (define-label (%2536) #:merge #f
    (set! %2537 (add %2491 (bv #x00000001 32)))
    (store %2537 %2427 (bitvector 32) #:align 4)
    (br %2552))

; %2538
  (define-label (%2538) #:merge #f
    (set! %2539 (load %2461 (bitvector 8) #:align 1))
    (set! %2540 (zext %2539 (bitvector 32)))
    (set! %2541 (shl %2540 (bv #x00000014 32)))
    (set! %2542 (load %2492 (bitvector 8) #:align 1))
    (set! %2543 (zext %2542 (bitvector 32)))
    (set! %2544 (shl %2543 (bv #x0000000f 32)))
    (set! %2545 (or %2541 %2544))
    (set! %2546 (or %2545 (bv #x00006663 32)))
    (set! %2547 (getelementptr %2534 (array-offset %2491 4)))
    (store %2546 %2547 (bitvector 32) #:align 4)
    (set! %2548 (load %2427 (bitvector 32) #:align 4))
    (set! %2549 (load %2533 pointer #:align 4))
    (set! %2550 (add %2548 (bv #x00000001 32)))
    (store %2550 %2427 (bitvector 32) #:align 4)
    (set! %2551 (icmp/eq %2549 nullptr))
    (br %2551 %2552 %2555))

; %2552
  (define-label (%2552) #:merge #f
    (set! %2553 (phi [%2537 %2536] [%2550 %2538]))
    (set! %2554 (add %2553 (bv #x00000001 32)))
    (store %2554 %2427 (bitvector 32) #:align 4)
    (br %2582))

; %2555
  (define-label (%2555) #:merge #f
    (set! %2556 (load %2461 (bitvector 8) #:align 1))
    (set! %2557 (zext %2556 (bitvector 32)))
    (set! %2558 (shl %2557 (bv #x0000000f 32)))
    (set! %2559 (load %2492 (bitvector 8) #:align 1))
    (set! %2560 (zext %2559 (bitvector 32)))
    (set! %2561 (shl %2560 (bv #x00000014 32)))
    (set! %2562 (or %2558 %2561))
    (set! %2563 (or %2562 (bv #x00006863 32)))
    (set! %2564 (getelementptr %2549 (array-offset %2550 4)))
    (store %2563 %2564 (bitvector 32) #:align 4)
    (set! %2565 (load %2427 (bitvector 32) #:align 4))
    (set! %2566 (load %2533 pointer #:align 4))
    (set! %2567 (add %2565 (bv #x00000001 32)))
    (store %2567 %2427 (bitvector 32) #:align 4)
    (set! %2568 (icmp/eq %2566 nullptr))
    (br %2568 %2582 %2569))

; %2569
  (define-label (%2569) #:merge #f
    (set! %2570 (getelementptr %2461 (array-offset (bv #x00000001 32) 1)))
    (set! %2571 (load %2570 (bitvector 8) #:align 1))
    (set! %2572 (zext %2571 (bitvector 32)))
    (set! %2573 (shl %2572 (bv #x00000014 32)))
    (set! %2574 (getelementptr %2492 (array-offset (bv #x00000001 32) 1)))
    (set! %2575 (load %2574 (bitvector 8) #:align 1))
    (set! %2576 (zext %2575 (bitvector 32)))
    (set! %2577 (shl %2576 (bv #x0000000f 32)))
    (set! %2578 (or %2573 %2577))
    (set! %2579 (or %2578 (bv #x00007663 32)))
    (set! %2580 (getelementptr %2566 (array-offset %2567 4)))
    (store %2579 %2580 (bitvector 32) #:align 4)
    (set! %2581 (load %2427 (bitvector 32) #:align 4))
    (br %2582))

; %2582
  (define-label (%2582) #:merge #f
    (set! %2583 (phi [%2567 %2555] [%2581 %2569] [%2554 %2552]))
    (set! %2584 (add %2583 (bv #x00000001 32)))
    (br %3046))

; %2585
  (define-label (%2585) #:merge #f
    (set! %2586 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %2587 (load %2586 pointer #:align 4))
    (set! %2588 (icmp/eq %2587 nullptr))
    (br %2588 %2589 %2591))

; %2589
  (define-label (%2589) #:merge #f
    (set! %2590 (add %2491 (bv #x00000001 32)))
    (store %2590 %2427 (bitvector 32) #:align 4)
    (br %2605))

; %2591
  (define-label (%2591) #:merge #f
    (set! %2592 (load %2461 (bitvector 8) #:align 1))
    (set! %2593 (zext %2592 (bitvector 32)))
    (set! %2594 (shl %2593 (bv #x0000000f 32)))
    (set! %2595 (load %2492 (bitvector 8) #:align 1))
    (set! %2596 (zext %2595 (bitvector 32)))
    (set! %2597 (shl %2596 (bv #x00000014 32)))
    (set! %2598 (or %2594 %2597))
    (set! %2599 (or %2598 (bv #x00006663 32)))
    (set! %2600 (getelementptr %2587 (array-offset %2491 4)))
    (store %2599 %2600 (bitvector 32) #:align 4)
    (set! %2601 (load %2427 (bitvector 32) #:align 4))
    (set! %2602 (load %2586 pointer #:align 4))
    (set! %2603 (add %2601 (bv #x00000001 32)))
    (store %2603 %2427 (bitvector 32) #:align 4)
    (set! %2604 (icmp/eq %2602 nullptr))
    (br %2604 %2605 %2608))

; %2605
  (define-label (%2605) #:merge #f
    (set! %2606 (phi [%2590 %2589] [%2603 %2591]))
    (set! %2607 (add %2606 (bv #x00000001 32)))
    (store %2607 %2427 (bitvector 32) #:align 4)
    (br %2635))

; %2608
  (define-label (%2608) #:merge #f
    (set! %2609 (load %2461 (bitvector 8) #:align 1))
    (set! %2610 (zext %2609 (bitvector 32)))
    (set! %2611 (shl %2610 (bv #x00000014 32)))
    (set! %2612 (load %2492 (bitvector 8) #:align 1))
    (set! %2613 (zext %2612 (bitvector 32)))
    (set! %2614 (shl %2613 (bv #x0000000f 32)))
    (set! %2615 (or %2611 %2614))
    (set! %2616 (or %2615 (bv #x00006863 32)))
    (set! %2617 (getelementptr %2602 (array-offset %2603 4)))
    (store %2616 %2617 (bitvector 32) #:align 4)
    (set! %2618 (load %2427 (bitvector 32) #:align 4))
    (set! %2619 (load %2586 pointer #:align 4))
    (set! %2620 (add %2618 (bv #x00000001 32)))
    (store %2620 %2427 (bitvector 32) #:align 4)
    (set! %2621 (icmp/eq %2619 nullptr))
    (br %2621 %2635 %2622))

; %2622
  (define-label (%2622) #:merge #f
    (set! %2623 (getelementptr %2461 (array-offset (bv #x00000001 32) 1)))
    (set! %2624 (load %2623 (bitvector 8) #:align 1))
    (set! %2625 (zext %2624 (bitvector 32)))
    (set! %2626 (shl %2625 (bv #x0000000f 32)))
    (set! %2627 (getelementptr %2492 (array-offset (bv #x00000001 32) 1)))
    (set! %2628 (load %2627 (bitvector 8) #:align 1))
    (set! %2629 (zext %2628 (bitvector 32)))
    (set! %2630 (shl %2629 (bv #x00000014 32)))
    (set! %2631 (or %2626 %2630))
    (set! %2632 (or %2631 (bv #x00007663 32)))
    (set! %2633 (getelementptr %2619 (array-offset %2620 4)))
    (store %2632 %2633 (bitvector 32) #:align 4)
    (set! %2634 (load %2427 (bitvector 32) #:align 4))
    (br %2635))

; %2635
  (define-label (%2635) #:merge #f
    (set! %2636 (phi [%2620 %2608] [%2634 %2622] [%2607 %2605]))
    (set! %2637 (add %2636 (bv #x00000001 32)))
    (br %3046))

; %2638
  (define-label (%2638) #:merge #f
    (set! %2639 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %2640 (load %2639 pointer #:align 4))
    (set! %2641 (icmp/eq %2640 nullptr))
    (br %2641 %2642 %2644))

; %2642
  (define-label (%2642) #:merge #f
    (set! %2643 (add %2491 (bv #x00000001 32)))
    (store %2643 %2427 (bitvector 32) #:align 4)
    (br %2658))

; %2644
  (define-label (%2644) #:merge #f
    (set! %2645 (load %2461 (bitvector 8) #:align 1))
    (set! %2646 (zext %2645 (bitvector 32)))
    (set! %2647 (shl %2646 (bv #x00000014 32)))
    (set! %2648 (load %2492 (bitvector 8) #:align 1))
    (set! %2649 (zext %2648 (bitvector 32)))
    (set! %2650 (shl %2649 (bv #x0000000f 32)))
    (set! %2651 (or %2647 %2650))
    (set! %2652 (or %2651 (bv #x00006663 32)))
    (set! %2653 (getelementptr %2640 (array-offset %2491 4)))
    (store %2652 %2653 (bitvector 32) #:align 4)
    (set! %2654 (load %2427 (bitvector 32) #:align 4))
    (set! %2655 (load %2639 pointer #:align 4))
    (set! %2656 (add %2654 (bv #x00000001 32)))
    (store %2656 %2427 (bitvector 32) #:align 4)
    (set! %2657 (icmp/eq %2655 nullptr))
    (br %2657 %2658 %2661))

; %2658
  (define-label (%2658) #:merge #f
    (set! %2659 (phi [%2643 %2642] [%2656 %2644]))
    (set! %2660 (add %2659 (bv #x00000001 32)))
    (store %2660 %2427 (bitvector 32) #:align 4)
    (br %2688))

; %2661
  (define-label (%2661) #:merge #f
    (set! %2662 (load %2461 (bitvector 8) #:align 1))
    (set! %2663 (zext %2662 (bitvector 32)))
    (set! %2664 (shl %2663 (bv #x0000000f 32)))
    (set! %2665 (load %2492 (bitvector 8) #:align 1))
    (set! %2666 (zext %2665 (bitvector 32)))
    (set! %2667 (shl %2666 (bv #x00000014 32)))
    (set! %2668 (or %2664 %2667))
    (set! %2669 (or %2668 (bv #x00006863 32)))
    (set! %2670 (getelementptr %2655 (array-offset %2656 4)))
    (store %2669 %2670 (bitvector 32) #:align 4)
    (set! %2671 (load %2427 (bitvector 32) #:align 4))
    (set! %2672 (load %2639 pointer #:align 4))
    (set! %2673 (add %2671 (bv #x00000001 32)))
    (store %2673 %2427 (bitvector 32) #:align 4)
    (set! %2674 (icmp/eq %2672 nullptr))
    (br %2674 %2688 %2675))

; %2675
  (define-label (%2675) #:merge #f
    (set! %2676 (getelementptr %2461 (array-offset (bv #x00000001 32) 1)))
    (set! %2677 (load %2676 (bitvector 8) #:align 1))
    (set! %2678 (zext %2677 (bitvector 32)))
    (set! %2679 (shl %2678 (bv #x0000000f 32)))
    (set! %2680 (getelementptr %2492 (array-offset (bv #x00000001 32) 1)))
    (set! %2681 (load %2680 (bitvector 8) #:align 1))
    (set! %2682 (zext %2681 (bitvector 32)))
    (set! %2683 (shl %2682 (bv #x00000014 32)))
    (set! %2684 (or %2679 %2683))
    (set! %2685 (or %2684 (bv #x00006663 32)))
    (set! %2686 (getelementptr %2672 (array-offset %2673 4)))
    (store %2685 %2686 (bitvector 32) #:align 4)
    (set! %2687 (load %2427 (bitvector 32) #:align 4))
    (br %2688))

; %2688
  (define-label (%2688) #:merge #f
    (set! %2689 (phi [%2673 %2661] [%2687 %2675] [%2660 %2658]))
    (set! %2690 (add %2689 (bv #x00000001 32)))
    (br %3046))

; %2691
  (define-label (%2691) #:merge #f
    (set! %2692 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %2693 (load %2692 pointer #:align 4))
    (set! %2694 (icmp/eq %2693 nullptr))
    (br %2694 %2695 %2697))

; %2695
  (define-label (%2695) #:merge #f
    (set! %2696 (add %2491 (bv #x00000001 32)))
    (store %2696 %2427 (bitvector 32) #:align 4)
    (br %2711))

; %2697
  (define-label (%2697) #:merge #f
    (set! %2698 (load %2461 (bitvector 8) #:align 1))
    (set! %2699 (zext %2698 (bitvector 32)))
    (set! %2700 (shl %2699 (bv #x0000000f 32)))
    (set! %2701 (load %2492 (bitvector 8) #:align 1))
    (set! %2702 (zext %2701 (bitvector 32)))
    (set! %2703 (shl %2702 (bv #x00000014 32)))
    (set! %2704 (or %2700 %2703))
    (set! %2705 (or %2704 (bv #x00006663 32)))
    (set! %2706 (getelementptr %2693 (array-offset %2491 4)))
    (store %2705 %2706 (bitvector 32) #:align 4)
    (set! %2707 (load %2427 (bitvector 32) #:align 4))
    (set! %2708 (load %2692 pointer #:align 4))
    (set! %2709 (add %2707 (bv #x00000001 32)))
    (store %2709 %2427 (bitvector 32) #:align 4)
    (set! %2710 (icmp/eq %2708 nullptr))
    (br %2710 %2711 %2714))

; %2711
  (define-label (%2711) #:merge #f
    (set! %2712 (phi [%2696 %2695] [%2709 %2697]))
    (set! %2713 (add %2712 (bv #x00000001 32)))
    (store %2713 %2427 (bitvector 32) #:align 4)
    (br %2741))

; %2714
  (define-label (%2714) #:merge #f
    (set! %2715 (load %2461 (bitvector 8) #:align 1))
    (set! %2716 (zext %2715 (bitvector 32)))
    (set! %2717 (shl %2716 (bv #x00000014 32)))
    (set! %2718 (load %2492 (bitvector 8) #:align 1))
    (set! %2719 (zext %2718 (bitvector 32)))
    (set! %2720 (shl %2719 (bv #x0000000f 32)))
    (set! %2721 (or %2717 %2720))
    (set! %2722 (or %2721 (bv #x00006863 32)))
    (set! %2723 (getelementptr %2708 (array-offset %2709 4)))
    (store %2722 %2723 (bitvector 32) #:align 4)
    (set! %2724 (load %2427 (bitvector 32) #:align 4))
    (set! %2725 (load %2692 pointer #:align 4))
    (set! %2726 (add %2724 (bv #x00000001 32)))
    (store %2726 %2427 (bitvector 32) #:align 4)
    (set! %2727 (icmp/eq %2725 nullptr))
    (br %2727 %2741 %2728))

; %2728
  (define-label (%2728) #:merge #f
    (set! %2729 (getelementptr %2461 (array-offset (bv #x00000001 32) 1)))
    (set! %2730 (load %2729 (bitvector 8) #:align 1))
    (set! %2731 (zext %2730 (bitvector 32)))
    (set! %2732 (shl %2731 (bv #x00000014 32)))
    (set! %2733 (getelementptr %2492 (array-offset (bv #x00000001 32) 1)))
    (set! %2734 (load %2733 (bitvector 8) #:align 1))
    (set! %2735 (zext %2734 (bitvector 32)))
    (set! %2736 (shl %2735 (bv #x0000000f 32)))
    (set! %2737 (or %2732 %2736))
    (set! %2738 (or %2737 (bv #x00006663 32)))
    (set! %2739 (getelementptr %2725 (array-offset %2726 4)))
    (store %2738 %2739 (bitvector 32) #:align 4)
    (set! %2740 (load %2427 (bitvector 32) #:align 4))
    (br %2741))

; %2741
  (define-label (%2741) #:merge #f
    (set! %2742 (phi [%2726 %2714] [%2740 %2728] [%2713 %2711]))
    (set! %2743 (add %2742 (bv #x00000001 32)))
    (br %3046))

; %2744
  (define-label (%2744) #:merge #f
    (set! %2745 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %2746 (load %2745 pointer #:align 4))
    (set! %2747 (icmp/eq %2746 nullptr))
    (br %2747 %2748 %2750))

; %2748
  (define-label (%2748) #:merge #f
    (set! %2749 (add %2491 (bv #x00000001 32)))
    (store %2749 %2427 (bitvector 32) #:align 4)
    (br %2777))

; %2750
  (define-label (%2750) #:merge #f
    (set! %2751 (load %2461 (bitvector 8) #:align 1))
    (set! %2752 (zext %2751 (bitvector 32)))
    (set! %2753 (shl %2752 (bv #x0000000f 32)))
    (set! %2754 (load %2492 (bitvector 8) #:align 1))
    (set! %2755 (zext %2754 (bitvector 32)))
    (set! %2756 (shl %2755 (bv #x00000014 32)))
    (set! %2757 (or %2753 %2756))
    (set! %2758 (or %2757 (bv #x00001463 32)))
    (set! %2759 (getelementptr %2746 (array-offset %2491 4)))
    (store %2758 %2759 (bitvector 32) #:align 4)
    (set! %2760 (load %2427 (bitvector 32) #:align 4))
    (set! %2761 (load %2745 pointer #:align 4))
    (set! %2762 (add %2760 (bv #x00000001 32)))
    (store %2762 %2427 (bitvector 32) #:align 4)
    (set! %2763 (icmp/eq %2761 nullptr))
    (br %2763 %2777 %2764))

; %2764
  (define-label (%2764) #:merge #f
    (set! %2765 (getelementptr %2461 (array-offset (bv #x00000001 32) 1)))
    (set! %2766 (load %2765 (bitvector 8) #:align 1))
    (set! %2767 (zext %2766 (bitvector 32)))
    (set! %2768 (shl %2767 (bv #x0000000f 32)))
    (set! %2769 (getelementptr %2492 (array-offset (bv #x00000001 32) 1)))
    (set! %2770 (load %2769 (bitvector 8) #:align 1))
    (set! %2771 (zext %2770 (bitvector 32)))
    (set! %2772 (shl %2771 (bv #x00000014 32)))
    (set! %2773 (or %2768 %2772))
    (set! %2774 (or %2773 (bv #x00000663 32)))
    (set! %2775 (getelementptr %2761 (array-offset %2762 4)))
    (store %2774 %2775 (bitvector 32) #:align 4)
    (set! %2776 (load %2427 (bitvector 32) #:align 4))
    (br %2777))

; %2777
  (define-label (%2777) #:merge #f
    (set! %2778 (phi [%2762 %2750] [%2776 %2764] [%2749 %2748]))
    (set! %2779 (add %2778 (bv #x00000001 32)))
    (br %3046))

; %2780
  (define-label (%2780) #:merge #f
    (set! %2781 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %2782 (load %2781 pointer #:align 4))
    (set! %2783 (icmp/eq %2782 nullptr))
    (br %2783 %2784 %2786))

; %2784
  (define-label (%2784) #:merge #f
    (set! %2785 (add %2491 (bv #x00000001 32)))
    (store %2785 %2427 (bitvector 32) #:align 4)
    (br %2800))

; %2786
  (define-label (%2786) #:merge #f
    (set! %2787 (load %2461 (bitvector 8) #:align 1))
    (set! %2788 (zext %2787 (bitvector 32)))
    (set! %2789 (shl %2788 (bv #x00000014 32)))
    (set! %2790 (load %2492 (bitvector 8) #:align 1))
    (set! %2791 (zext %2790 (bitvector 32)))
    (set! %2792 (shl %2791 (bv #x0000000f 32)))
    (set! %2793 (or %2789 %2792))
    (set! %2794 (or %2793 (bv #x00004663 32)))
    (set! %2795 (getelementptr %2782 (array-offset %2491 4)))
    (store %2794 %2795 (bitvector 32) #:align 4)
    (set! %2796 (load %2427 (bitvector 32) #:align 4))
    (set! %2797 (load %2781 pointer #:align 4))
    (set! %2798 (add %2796 (bv #x00000001 32)))
    (store %2798 %2427 (bitvector 32) #:align 4)
    (set! %2799 (icmp/eq %2797 nullptr))
    (br %2799 %2800 %2803))

; %2800
  (define-label (%2800) #:merge #f
    (set! %2801 (phi [%2785 %2784] [%2798 %2786]))
    (set! %2802 (add %2801 (bv #x00000001 32)))
    (store %2802 %2427 (bitvector 32) #:align 4)
    (br %2830))

; %2803
  (define-label (%2803) #:merge #f
    (set! %2804 (load %2461 (bitvector 8) #:align 1))
    (set! %2805 (zext %2804 (bitvector 32)))
    (set! %2806 (shl %2805 (bv #x0000000f 32)))
    (set! %2807 (load %2492 (bitvector 8) #:align 1))
    (set! %2808 (zext %2807 (bitvector 32)))
    (set! %2809 (shl %2808 (bv #x00000014 32)))
    (set! %2810 (or %2806 %2809))
    (set! %2811 (or %2810 (bv #x00004863 32)))
    (set! %2812 (getelementptr %2797 (array-offset %2798 4)))
    (store %2811 %2812 (bitvector 32) #:align 4)
    (set! %2813 (load %2427 (bitvector 32) #:align 4))
    (set! %2814 (load %2781 pointer #:align 4))
    (set! %2815 (add %2813 (bv #x00000001 32)))
    (store %2815 %2427 (bitvector 32) #:align 4)
    (set! %2816 (icmp/eq %2814 nullptr))
    (br %2816 %2830 %2817))

; %2817
  (define-label (%2817) #:merge #f
    (set! %2818 (getelementptr %2461 (array-offset (bv #x00000001 32) 1)))
    (set! %2819 (load %2818 (bitvector 8) #:align 1))
    (set! %2820 (zext %2819 (bitvector 32)))
    (set! %2821 (shl %2820 (bv #x00000014 32)))
    (set! %2822 (getelementptr %2492 (array-offset (bv #x00000001 32) 1)))
    (set! %2823 (load %2822 (bitvector 8) #:align 1))
    (set! %2824 (zext %2823 (bitvector 32)))
    (set! %2825 (shl %2824 (bv #x0000000f 32)))
    (set! %2826 (or %2821 %2825))
    (set! %2827 (or %2826 (bv #x00007663 32)))
    (set! %2828 (getelementptr %2814 (array-offset %2815 4)))
    (store %2827 %2828 (bitvector 32) #:align 4)
    (set! %2829 (load %2427 (bitvector 32) #:align 4))
    (br %2830))

; %2830
  (define-label (%2830) #:merge #f
    (set! %2831 (phi [%2815 %2803] [%2829 %2817] [%2802 %2800]))
    (set! %2832 (add %2831 (bv #x00000001 32)))
    (br %3046))

; %2833
  (define-label (%2833) #:merge #f
    (set! %2834 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %2835 (load %2834 pointer #:align 4))
    (set! %2836 (icmp/eq %2835 nullptr))
    (br %2836 %2837 %2839))

; %2837
  (define-label (%2837) #:merge #f
    (set! %2838 (add %2491 (bv #x00000001 32)))
    (store %2838 %2427 (bitvector 32) #:align 4)
    (br %2853))

; %2839
  (define-label (%2839) #:merge #f
    (set! %2840 (load %2461 (bitvector 8) #:align 1))
    (set! %2841 (zext %2840 (bitvector 32)))
    (set! %2842 (shl %2841 (bv #x0000000f 32)))
    (set! %2843 (load %2492 (bitvector 8) #:align 1))
    (set! %2844 (zext %2843 (bitvector 32)))
    (set! %2845 (shl %2844 (bv #x00000014 32)))
    (set! %2846 (or %2842 %2845))
    (set! %2847 (or %2846 (bv #x00004663 32)))
    (set! %2848 (getelementptr %2835 (array-offset %2491 4)))
    (store %2847 %2848 (bitvector 32) #:align 4)
    (set! %2849 (load %2427 (bitvector 32) #:align 4))
    (set! %2850 (load %2834 pointer #:align 4))
    (set! %2851 (add %2849 (bv #x00000001 32)))
    (store %2851 %2427 (bitvector 32) #:align 4)
    (set! %2852 (icmp/eq %2850 nullptr))
    (br %2852 %2853 %2856))

; %2853
  (define-label (%2853) #:merge #f
    (set! %2854 (phi [%2838 %2837] [%2851 %2839]))
    (set! %2855 (add %2854 (bv #x00000001 32)))
    (store %2855 %2427 (bitvector 32) #:align 4)
    (br %2883))

; %2856
  (define-label (%2856) #:merge #f
    (set! %2857 (load %2461 (bitvector 8) #:align 1))
    (set! %2858 (zext %2857 (bitvector 32)))
    (set! %2859 (shl %2858 (bv #x00000014 32)))
    (set! %2860 (load %2492 (bitvector 8) #:align 1))
    (set! %2861 (zext %2860 (bitvector 32)))
    (set! %2862 (shl %2861 (bv #x0000000f 32)))
    (set! %2863 (or %2859 %2862))
    (set! %2864 (or %2863 (bv #x00004863 32)))
    (set! %2865 (getelementptr %2850 (array-offset %2851 4)))
    (store %2864 %2865 (bitvector 32) #:align 4)
    (set! %2866 (load %2427 (bitvector 32) #:align 4))
    (set! %2867 (load %2834 pointer #:align 4))
    (set! %2868 (add %2866 (bv #x00000001 32)))
    (store %2868 %2427 (bitvector 32) #:align 4)
    (set! %2869 (icmp/eq %2867 nullptr))
    (br %2869 %2883 %2870))

; %2870
  (define-label (%2870) #:merge #f
    (set! %2871 (getelementptr %2461 (array-offset (bv #x00000001 32) 1)))
    (set! %2872 (load %2871 (bitvector 8) #:align 1))
    (set! %2873 (zext %2872 (bitvector 32)))
    (set! %2874 (shl %2873 (bv #x0000000f 32)))
    (set! %2875 (getelementptr %2492 (array-offset (bv #x00000001 32) 1)))
    (set! %2876 (load %2875 (bitvector 8) #:align 1))
    (set! %2877 (zext %2876 (bitvector 32)))
    (set! %2878 (shl %2877 (bv #x00000014 32)))
    (set! %2879 (or %2874 %2878))
    (set! %2880 (or %2879 (bv #x00007663 32)))
    (set! %2881 (getelementptr %2867 (array-offset %2868 4)))
    (store %2880 %2881 (bitvector 32) #:align 4)
    (set! %2882 (load %2427 (bitvector 32) #:align 4))
    (br %2883))

; %2883
  (define-label (%2883) #:merge #f
    (set! %2884 (phi [%2868 %2856] [%2882 %2870] [%2855 %2853]))
    (set! %2885 (add %2884 (bv #x00000001 32)))
    (br %3046))

; %2886
  (define-label (%2886) #:merge #f
    (set! %2887 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %2888 (load %2887 pointer #:align 4))
    (set! %2889 (icmp/eq %2888 nullptr))
    (br %2889 %2890 %2892))

; %2890
  (define-label (%2890) #:merge #f
    (set! %2891 (add %2491 (bv #x00000001 32)))
    (store %2891 %2427 (bitvector 32) #:align 4)
    (br %2906))

; %2892
  (define-label (%2892) #:merge #f
    (set! %2893 (load %2461 (bitvector 8) #:align 1))
    (set! %2894 (zext %2893 (bitvector 32)))
    (set! %2895 (shl %2894 (bv #x00000014 32)))
    (set! %2896 (load %2492 (bitvector 8) #:align 1))
    (set! %2897 (zext %2896 (bitvector 32)))
    (set! %2898 (shl %2897 (bv #x0000000f 32)))
    (set! %2899 (or %2895 %2898))
    (set! %2900 (or %2899 (bv #x00004663 32)))
    (set! %2901 (getelementptr %2888 (array-offset %2491 4)))
    (store %2900 %2901 (bitvector 32) #:align 4)
    (set! %2902 (load %2427 (bitvector 32) #:align 4))
    (set! %2903 (load %2887 pointer #:align 4))
    (set! %2904 (add %2902 (bv #x00000001 32)))
    (store %2904 %2427 (bitvector 32) #:align 4)
    (set! %2905 (icmp/eq %2903 nullptr))
    (br %2905 %2906 %2909))

; %2906
  (define-label (%2906) #:merge #f
    (set! %2907 (phi [%2891 %2890] [%2904 %2892]))
    (set! %2908 (add %2907 (bv #x00000001 32)))
    (store %2908 %2427 (bitvector 32) #:align 4)
    (br %2936))

; %2909
  (define-label (%2909) #:merge #f
    (set! %2910 (load %2461 (bitvector 8) #:align 1))
    (set! %2911 (zext %2910 (bitvector 32)))
    (set! %2912 (shl %2911 (bv #x0000000f 32)))
    (set! %2913 (load %2492 (bitvector 8) #:align 1))
    (set! %2914 (zext %2913 (bitvector 32)))
    (set! %2915 (shl %2914 (bv #x00000014 32)))
    (set! %2916 (or %2912 %2915))
    (set! %2917 (or %2916 (bv #x00004863 32)))
    (set! %2918 (getelementptr %2903 (array-offset %2904 4)))
    (store %2917 %2918 (bitvector 32) #:align 4)
    (set! %2919 (load %2427 (bitvector 32) #:align 4))
    (set! %2920 (load %2887 pointer #:align 4))
    (set! %2921 (add %2919 (bv #x00000001 32)))
    (store %2921 %2427 (bitvector 32) #:align 4)
    (set! %2922 (icmp/eq %2920 nullptr))
    (br %2922 %2936 %2923))

; %2923
  (define-label (%2923) #:merge #f
    (set! %2924 (getelementptr %2461 (array-offset (bv #x00000001 32) 1)))
    (set! %2925 (load %2924 (bitvector 8) #:align 1))
    (set! %2926 (zext %2925 (bitvector 32)))
    (set! %2927 (shl %2926 (bv #x0000000f 32)))
    (set! %2928 (getelementptr %2492 (array-offset (bv #x00000001 32) 1)))
    (set! %2929 (load %2928 (bitvector 8) #:align 1))
    (set! %2930 (zext %2929 (bitvector 32)))
    (set! %2931 (shl %2930 (bv #x00000014 32)))
    (set! %2932 (or %2927 %2931))
    (set! %2933 (or %2932 (bv #x00006663 32)))
    (set! %2934 (getelementptr %2920 (array-offset %2921 4)))
    (store %2933 %2934 (bitvector 32) #:align 4)
    (set! %2935 (load %2427 (bitvector 32) #:align 4))
    (br %2936))

; %2936
  (define-label (%2936) #:merge #f
    (set! %2937 (phi [%2921 %2909] [%2935 %2923] [%2908 %2906]))
    (set! %2938 (add %2937 (bv #x00000001 32)))
    (br %3046))

; %2939
  (define-label (%2939) #:merge #f
    (set! %2940 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %2941 (load %2940 pointer #:align 4))
    (set! %2942 (icmp/eq %2941 nullptr))
    (br %2942 %2943 %2945))

; %2943
  (define-label (%2943) #:merge #f
    (set! %2944 (add %2491 (bv #x00000001 32)))
    (store %2944 %2427 (bitvector 32) #:align 4)
    (br %2959))

; %2945
  (define-label (%2945) #:merge #f
    (set! %2946 (load %2461 (bitvector 8) #:align 1))
    (set! %2947 (zext %2946 (bitvector 32)))
    (set! %2948 (shl %2947 (bv #x0000000f 32)))
    (set! %2949 (load %2492 (bitvector 8) #:align 1))
    (set! %2950 (zext %2949 (bitvector 32)))
    (set! %2951 (shl %2950 (bv #x00000014 32)))
    (set! %2952 (or %2948 %2951))
    (set! %2953 (or %2952 (bv #x00004663 32)))
    (set! %2954 (getelementptr %2941 (array-offset %2491 4)))
    (store %2953 %2954 (bitvector 32) #:align 4)
    (set! %2955 (load %2427 (bitvector 32) #:align 4))
    (set! %2956 (load %2940 pointer #:align 4))
    (set! %2957 (add %2955 (bv #x00000001 32)))
    (store %2957 %2427 (bitvector 32) #:align 4)
    (set! %2958 (icmp/eq %2956 nullptr))
    (br %2958 %2959 %2962))

; %2959
  (define-label (%2959) #:merge #f
    (set! %2960 (phi [%2944 %2943] [%2957 %2945]))
    (set! %2961 (add %2960 (bv #x00000001 32)))
    (store %2961 %2427 (bitvector 32) #:align 4)
    (br %2989))

; %2962
  (define-label (%2962) #:merge #f
    (set! %2963 (load %2461 (bitvector 8) #:align 1))
    (set! %2964 (zext %2963 (bitvector 32)))
    (set! %2965 (shl %2964 (bv #x00000014 32)))
    (set! %2966 (load %2492 (bitvector 8) #:align 1))
    (set! %2967 (zext %2966 (bitvector 32)))
    (set! %2968 (shl %2967 (bv #x0000000f 32)))
    (set! %2969 (or %2965 %2968))
    (set! %2970 (or %2969 (bv #x00004863 32)))
    (set! %2971 (getelementptr %2956 (array-offset %2957 4)))
    (store %2970 %2971 (bitvector 32) #:align 4)
    (set! %2972 (load %2427 (bitvector 32) #:align 4))
    (set! %2973 (load %2940 pointer #:align 4))
    (set! %2974 (add %2972 (bv #x00000001 32)))
    (store %2974 %2427 (bitvector 32) #:align 4)
    (set! %2975 (icmp/eq %2973 nullptr))
    (br %2975 %2989 %2976))

; %2976
  (define-label (%2976) #:merge #f
    (set! %2977 (getelementptr %2461 (array-offset (bv #x00000001 32) 1)))
    (set! %2978 (load %2977 (bitvector 8) #:align 1))
    (set! %2979 (zext %2978 (bitvector 32)))
    (set! %2980 (shl %2979 (bv #x00000014 32)))
    (set! %2981 (getelementptr %2492 (array-offset (bv #x00000001 32) 1)))
    (set! %2982 (load %2981 (bitvector 8) #:align 1))
    (set! %2983 (zext %2982 (bitvector 32)))
    (set! %2984 (shl %2983 (bv #x0000000f 32)))
    (set! %2985 (or %2980 %2984))
    (set! %2986 (or %2985 (bv #x00006663 32)))
    (set! %2987 (getelementptr %2973 (array-offset %2974 4)))
    (store %2986 %2987 (bitvector 32) #:align 4)
    (set! %2988 (load %2427 (bitvector 32) #:align 4))
    (br %2989))

; %2989
  (define-label (%2989) #:merge #f
    (set! %2990 (phi [%2974 %2962] [%2988 %2976] [%2961 %2959]))
    (set! %2991 (add %2990 (bv #x00000001 32)))
    (br %3046))

; %2992
  (define-label (%2992) #:merge #f
    (set! %2993 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %2994 (load %2993 pointer #:align 4))
    (set! %2995 (icmp/eq %2994 nullptr))
    (br %2995 %2996 %2998))

; %2996
  (define-label (%2996) #:merge #f
    (set! %2997 (add %2491 (bv #x00000001 32)))
    (store %2997 %2427 (bitvector 32) #:align 4)
    (br %3012))

; %2998
  (define-label (%2998) #:merge #f
    (set! %2999 (load %2461 (bitvector 8) #:align 1))
    (set! %3000 (zext %2999 (bitvector 32)))
    (set! %3001 (shl %3000 (bv #x0000000f 32)))
    (set! %3002 (load %2492 (bitvector 8) #:align 1))
    (set! %3003 (zext %3002 (bitvector 32)))
    (set! %3004 (shl %3003 (bv #x00000014 32)))
    (set! %3005 (or %3001 %3004))
    (set! %3006 (or %3005 (bv #x000072b3 32)))
    (set! %3007 (getelementptr %2994 (array-offset %2491 4)))
    (store %3006 %3007 (bitvector 32) #:align 4)
    (set! %3008 (load %2993 pointer #:align 4))
    (set! %3009 (load %2427 (bitvector 32) #:align 4))
    (set! %3010 (add %3009 (bv #x00000001 32)))
    (store %3010 %2427 (bitvector 32) #:align 4)
    (set! %3011 (icmp/eq %3008 nullptr))
    (br %3011 %3012 %3015))

; %3012
  (define-label (%3012) #:merge #f
    (set! %3013 (phi [%3010 %2998] [%2997 %2996]))
    (set! %3014 (add %3013 (bv #x00000001 32)))
    (store %3014 %2427 (bitvector 32) #:align 4)
    (br %3021))

; %3015
  (define-label (%3015) #:merge #f
    (set! %3016 (getelementptr %3008 (array-offset %3010 4)))
    (store (bv #x00029663 32) %3016 (bitvector 32) #:align 4)
    (set! %3017 (load %2427 (bitvector 32) #:align 4))
    (set! %3018 (load %2993 pointer #:align 4))
    (set! %3019 (add %3017 (bv #x00000001 32)))
    (store %3019 %2427 (bitvector 32) #:align 4)
    (set! %3020 (icmp/eq %3018 nullptr))
    (br %3020 %3021 %3024))

; %3021
  (define-label (%3021) #:merge #f
    (set! %3022 (phi [%3013 %3012] [%3017 %3015]))
    (set! %3023 (add %3022 (bv #x00000002 32)))
    (store %3023 %2427 (bitvector 32) #:align 4)
    (br %3043))

; %3024
  (define-label (%3024) #:merge #f
    (set! %3025 (getelementptr %2461 (array-offset (bv #x00000001 32) 1)))
    (set! %3026 (load %3025 (bitvector 8) #:align 1))
    (set! %3027 (zext %3026 (bitvector 32)))
    (set! %3028 (shl %3027 (bv #x0000000f 32)))
    (set! %3029 (getelementptr %2492 (array-offset (bv #x00000001 32) 1)))
    (set! %3030 (load %3029 (bitvector 8) #:align 1))
    (set! %3031 (zext %3030 (bitvector 32)))
    (set! %3032 (shl %3031 (bv #x00000014 32)))
    (set! %3033 (or %3028 %3032))
    (set! %3034 (or %3033 (bv #x000072b3 32)))
    (set! %3035 (getelementptr %3018 (array-offset %3019 4)))
    (store %3034 %3035 (bitvector 32) #:align 4)
    (set! %3036 (load %2993 pointer #:align 4))
    (set! %3037 (load %2427 (bitvector 32) #:align 4))
    (set! %3038 (add %3037 (bv #x00000001 32)))
    (store %3038 %2427 (bitvector 32) #:align 4)
    (set! %3039 (icmp/eq %3036 nullptr))
    (br %3039 %3043 %3040))

; %3040
  (define-label (%3040) #:merge #f
    (set! %3041 (getelementptr %3036 (array-offset %3038 4)))
    (store (bv #x00028663 32) %3041 (bitvector 32) #:align 4)
    (set! %3042 (load %2427 (bitvector 32) #:align 4))
    (br %3043))

; %3043
  (define-label (%3043) #:merge #f
    (set! %3044 (phi [%3023 %3021] [%3038 %3024] [%3042 %3040]))
    (set! %3045 (add %3044 (bv #x00000001 32)))
    (br %3046))

; %3046
  (define-label (%3046) #:merge #f
    (set! %3047 (phi [%3045 %3043] [%2991 %2989] [%2938 %2936] [%2885 %2883] [%2832 %2830] [%2779 %2777] [%2743 %2741] [%2690 %2688] [%2637 %2635] [%2584 %2582] [%2531 %2529]))
    (store %3047 %2427 (bitvector 32) #:align 4)
    (br %3048))

; %3048
  (define-label (%3048) #:merge #f
    (set! %3049 (phi [%2491 %2490] [%3047 %3046]))
    (set! %3050 (sub %3049 %2423))
    (set! %3051 (shl %3050 (bv #x00000002 32)))
    (set! %3052 (sub %2425 %3051))
    (set! %3053 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %3054 (load %3053 pointer #:align 4))
    (set! %3055 (icmp/eq %3054 nullptr))
    (br %3055 %3056 %3058))

; %3056
  (define-label (%3056) #:merge #f
    (set! %3057 (add %3049 (bv #x00000001 32)))
    (store %3057 %2427 (bitvector 32) #:align 4)
    (br %3072))

; %3058
  (define-label (%3058) #:merge #f
    (set! %3059 (add %3052 (bv #x00000800 32)))
    (set! %3060 (and %3059 (bv #xfffff000 32)))
    (set! %3061 (or %3060 (bv #x00000317 32)))
    (set! %3062 (getelementptr %3054 (array-offset %3049 4)))
    (store %3061 %3062 (bitvector 32) #:align 4)
    (set! %3063 (load %3053 pointer #:align 4))
    (set! %3064 (load %2427 (bitvector 32) #:align 4))
    (set! %3065 (add %3064 (bv #x00000001 32)))
    (store %3065 %2427 (bitvector 32) #:align 4)
    (set! %3066 (icmp/eq %3063 nullptr))
    (br %3066 %3072 %3067))

; %3067
  (define-label (%3067) #:merge #f
    (set! %3068 (shl %3052 (bv #x00000014 32)))
    (set! %3069 (or %3068 (bv #x00030067 32)))
    (set! %3070 (getelementptr %3063 (array-offset %3065 4)))
    (store %3069 %3070 (bitvector 32) #:align 4)
    (set! %3071 (load %2427 (bitvector 32) #:align 4))
    (br %3072))

; %3072
  (define-label (%3072) #:merge #f
    (set! %3073 (phi [%3065 %3058] [%3071 %3067] [%3057 %3056]))
    (set! %3074 (add %3073 (bv #x00000001 32)))
    (store %3074 %2427 (bitvector 32) #:align 4)
    (br %3989))

; %3075
  (define-label (%3075) #:merge #f
    (set! %3076 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset %25 2) (array-offset (bv #x00000001 32) 1)))
    (set! %3077 (load %3076 (bitvector 8) #:align 1))
    (set! %3078 (lshr (bv #x00000bc0 32) %25))
    (set! %3079 (and %3078 (bv #x00000001 32)))
    (set! %3080 (icmp/eq %3079 (bv #x00000000 32)))
    (br %3080 %3094 %3081))

; %3081
  (define-label (%3081) #:merge #f
    (set! %3082 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %3083 (load %3082 pointer #:align 4))
    (set! %3084 (icmp/eq %3083 nullptr))
    (br %3084 %3091 %3085))

; %3085
  (define-label (%3085) #:merge #f
    (set! %3086 (sext %3077 (bitvector 32)))
    (set! %3087 (shl %3086 (bv #x00000014 32)))
    (set! %3088 (or %3087 (bv #x00042383 32)))
    (set! %3089 (getelementptr %3083 (array-offset %2423 4)))
    (store %3088 %3089 (bitvector 32) #:align 4)
    (set! %3090 (load %2427 (bitvector 32) #:align 4))
    (br %3091))

; %3091
  (define-label (%3091) #:merge #f
    (set! %3092 (phi [%3090 %3085] [%2423 %3081]))
    (set! %3093 (add %3092 (bv #x00000001 32)))
    (store %3093 %2427 (bitvector 32) #:align 4)
    (br %3094))

; %3094
  (define-label (%3094) #:merge #f
    (set! %3095 (phi [%3093 %3091] [%2423 %3075]))
    (set! %3096 (phi [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000c 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %3091] [%26 %3075]))
    (set! %3097 (getelementptr %2424 (array-offset (bv #x00000001 32) 1)))
    (set! %3098 (load %3097 (bitvector 8) #:align 1))
    (set! %3099 (icmp/slt %3098 (bv #x00 8)))
    (br %3099 %3100 %3113))

; %3100
  (define-label (%3100) #:merge #f
    (set! %3101 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %3102 (load %3101 pointer #:align 4))
    (set! %3103 (icmp/eq %3102 nullptr))
    (br %3103 %3110 %3104))

; %3104
  (define-label (%3104) #:merge #f
    (set! %3105 (sext %3098 (bitvector 32)))
    (set! %3106 (shl %3105 (bv #x00000014 32)))
    (set! %3107 (or %3106 (bv #x00042e83 32)))
    (set! %3108 (getelementptr %3102 (array-offset %3095 4)))
    (store %3107 %3108 (bitvector 32) #:align 4)
    (set! %3109 (load %2427 (bitvector 32) #:align 4))
    (br %3110))

; %3110
  (define-label (%3110) #:merge #f
    (set! %3111 (phi [%3109 %3104] [%3095 %3100]))
    (set! %3112 (add %3111 (bv #x00000001 32)))
    (store %3112 %2427 (bitvector 32) #:align 4)
    (br %3113))

; %3113
  (define-label (%3113) #:merge #f
    (set! %3114 (phi [(bv #x1d 8) %3110] [%3098 %3094]))
    (set! %3115 (phi [%3112 %3110] [%3095 %3094]))
    (set! %3116 (sub %3115 %2423))
    (set! %3117 (shl %3116 (bv #x00000002 32)))
    (set! %3118 (sub %2425 %3117))
    (set! %3119 (getelementptr %3096 (array-offset (bv #x00000001 32) 1)))
    (set! %3120 (load %3119 (bitvector 8) #:align 1))
    (call @emit_bcc %2426 %3120 %3114 %3118 %1)
    (br %3989))

; %3121
  (define-label (%3121) #:merge #f
    (set! %3122 (getelementptr %12 (array-offset (bv #x00000000 32) 40) (struct-offset 12)))
    (set! %3123 (load %3122 (bitvector 32) #:align 4))
    (set! %3124 (add %3123 (bv #xffffffff 32)))
    (set! %3125 (icmp/eq %17 %3124))
    (br %3125 %3989 %3126))

; %3126
  (define-label (%3126) #:merge #f
    (set! %3127 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 12)))
    (set! %3128 (load %3127 (bitvector 32) #:align 4))
    (set! %3129 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3130 (load %3129 (bitvector 32) #:align 4))
    (set! %3131 (sub %3128 %3130))
    (set! %3132 (shl %3131 (bv #x00000002 32)))
    (set! %3133 (icmp/eq %3132 (bv #x00000000 32)))
    (set! %3134 (add %3132 (bv #x00100000 32)))
    (set! %3135 (icmp/ugt %3134 (bv #x001fffff 32)))
    (set! %3136 (or %3133 %3135))
    (br %3136 %3160 %3137))

; %3137
  (define-label (%3137) #:merge #f
    (set! %3138 (ashr %3132 (bv #x00000001 32)))
    (set! %3139 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %3140 (load %3139 pointer #:align 4))
    (set! %3141 (icmp/eq %3140 nullptr))
    (br %3141 %3157 %3142))

; %3142
  (define-label (%3142) #:merge #f
    (set! %3143 (shl %3131 (bv #x0000000a 32)))
    (set! %3144 (and %3143 (bv #x0007fc00 32)))
    (set! %3145 (and %3138 (bv #x00080000 32)))
    (set! %3146 (or %3145 %3144))
    (set! %3147 (lshr %3138 (bv #x00000002 32)))
    (set! %3148 (and %3147 (bv #x00000100 32)))
    (set! %3149 (or %3146 %3148))
    (set! %3150 (lshr %3138 (bv #x0000000b 32)))
    (set! %3151 (and %3150 (bv #x000000ff 32)))
    (set! %3152 (or %3149 %3151))
    (set! %3153 (shl %3152 (bv #x0000000c 32)))
    (set! %3154 (or %3153 (bv #x0000006f 32)))
    (set! %3155 (getelementptr %3140 (array-offset %3130 4)))
    (store %3154 %3155 (bitvector 32) #:align 4)
    (set! %3156 (load %3129 (bitvector 32) #:align 4))
    (br %3157))

; %3157
  (define-label (%3157) #:merge #f
    (set! %3158 (phi [%3156 %3142] [%3130 %3137]))
    (set! %3159 (add %3158 (bv #x00000001 32)))
    (store %3159 %3129 (bitvector 32) #:align 4)
    (br %3989))

; %3160
  (define-label (%3160) #:merge #f
    (set! %3161 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %3162 (load %3161 pointer #:align 4))
    (set! %3163 (icmp/eq %3162 nullptr))
    (br %3163 %3164 %3166))

; %3164
  (define-label (%3164) #:merge #f
    (set! %3165 (add %3130 (bv #x00000001 32)))
    (store %3165 %3129 (bitvector 32) #:align 4)
    (br %3180))

; %3166
  (define-label (%3166) #:merge #f
    (set! %3167 (add %3132 (bv #x00000800 32)))
    (set! %3168 (and %3167 (bv #xfffff000 32)))
    (set! %3169 (or %3168 (bv #x00000317 32)))
    (set! %3170 (getelementptr %3162 (array-offset %3130 4)))
    (store %3169 %3170 (bitvector 32) #:align 4)
    (set! %3171 (load %3161 pointer #:align 4))
    (set! %3172 (load %3129 (bitvector 32) #:align 4))
    (set! %3173 (add %3172 (bv #x00000001 32)))
    (store %3173 %3129 (bitvector 32) #:align 4)
    (set! %3174 (icmp/eq %3171 nullptr))
    (br %3174 %3180 %3175))

; %3175
  (define-label (%3175) #:merge #f
    (set! %3176 (shl %3131 (bv #x00000016 32)))
    (set! %3177 (or %3176 (bv #x00030067 32)))
    (set! %3178 (getelementptr %3171 (array-offset %3173 4)))
    (store %3177 %3178 (bitvector 32) #:align 4)
    (set! %3179 (load %3129 (bitvector 32) #:align 4))
    (br %3180))

; %3180
  (define-label (%3180) #:merge #f
    (set! %3181 (phi [%3173 %3166] [%3179 %3175] [%3165 %3164]))
    (set! %3182 (add %3181 (bv #x00000001 32)))
    (store %3182 %3129 (bitvector 32) #:align 4)
    (br %3989))

; %3183
  (define-label (%3183) #:merge #f
    (set! %3184 (getelementptr %0 (array-offset (bv #x00000001 32) 8) (struct-offset 4)))
    (set! %3185 (load %3184 (bitvector 32) #:align 4))
    (set! %3186 (load %26 (bitvector 8) #:align 1))
    (set! %3187 (lshr (bv #x00000bc0 32) %25))
    (set! %3188 (and %3187 (bv #x00000001 32)))
    (set! %3189 (icmp/ne %3188 (bv #x00000000 32)))
    (br %3189 %3190 %3221))

; %3190
  (define-label (%3190) #:merge #f
    (set! %3191 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %3192 (load %3191 pointer #:align 4))
    (set! %3193 (icmp/eq %3192 nullptr))
    (br %3193 %3194 %3198))

; %3194
  (define-label (%3194) #:merge #f
    (set! %3195 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3196 (load %3195 (bitvector 32) #:align 4))
    (set! %3197 (add %3196 (bv #x00000001 32)))
    (store %3197 %3195 (bitvector 32) #:align 4)
    (br %3217))

; %3198
  (define-label (%3198) #:merge #f
    (set! %3199 (sext %3186 (bitvector 32)))
    (set! %3200 (shl %3199 (bv #x00000014 32)))
    (set! %3201 (or %3200 (bv #x00042e03 32)))
    (set! %3202 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3203 (load %3202 (bitvector 32) #:align 4))
    (set! %3204 (getelementptr %3192 (array-offset %3203 4)))
    (store %3201 %3204 (bitvector 32) #:align 4)
    (set! %3205 (load %3191 pointer #:align 4))
    (set! %3206 (load %3202 (bitvector 32) #:align 4))
    (set! %3207 (add %3206 (bv #x00000001 32)))
    (store %3207 %3202 (bitvector 32) #:align 4)
    (set! %3208 (icmp/eq %3205 nullptr))
    (br %3208 %3217 %3209))

; %3209
  (define-label (%3209) #:merge #f
    (set! %3210 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset %25 2) (array-offset (bv #x00000001 32) 1)))
    (set! %3211 (load %3210 (bitvector 8) #:align 1))
    (set! %3212 (sext %3211 (bitvector 32)))
    (set! %3213 (shl %3212 (bv #x00000014 32)))
    (set! %3214 (or %3213 (bv #x00042383 32)))
    (set! %3215 (getelementptr %3205 (array-offset %3207 4)))
    (store %3214 %3215 (bitvector 32) #:align 4)
    (set! %3216 (load %3202 (bitvector 32) #:align 4))
    (br %3217))

; %3217
  (define-label (%3217) #:merge #f
    (set! %3218 (phi [%3202 %3198] [%3202 %3209] [%3195 %3194]))
    (set! %3219 (phi [%3207 %3198] [%3216 %3209] [%3197 %3194]))
    (set! %3220 (add %3219 (bv #x00000001 32)))
    (store %3220 %3218 (bitvector 32) #:align 4)
    (br %3221))

; %3221
  (define-label (%3221) #:merge #f
    (set! %3222 (phi [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000c 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %3217] [%26 %3183]))
    (set! %3223 (getelementptr %3222 (array-offset (bv #x00000001 32) 1)))
    (set! %3224 (load %3223 (bitvector 8) #:align 1))
    (set! %3225 (add %21 (bv #x00000800 32)))
    (set! %3226 (and %21 (bv #x00000fff 32)))
    (set! %3227 (icmp/ult %3225 (bv #x00001000 32)))
    (br %3227 %3261 %3228))

; %3228
  (define-label (%3228) #:merge #f
    (set! %3229 (zext %3224 (bitvector 32)))
    (set! %3230 (shl %3229 (bv #x00000007 32)))
    (set! %3231 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %3232 (load %3231 pointer #:align 4))
    (set! %3233 (icmp/eq %3232 nullptr))
    (br %3233 %3234 %3238))

; %3234
  (define-label (%3234) #:merge #f
    (set! %3235 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3236 (load %3235 (bitvector 32) #:align 4))
    (set! %3237 (add %3236 (bv #x00000001 32)))
    (store %3237 %3235 (bitvector 32) #:align 4)
    (br %3257))

; %3238
  (define-label (%3238) #:merge #f
    (set! %3239 (and %3225 (bv #xfffff000 32)))
    (set! %3240 (or %3239 %3230))
    (set! %3241 (or %3240 (bv #x00000037 32)))
    (set! %3242 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3243 (load %3242 (bitvector 32) #:align 4))
    (set! %3244 (getelementptr %3232 (array-offset %3243 4)))
    (store %3241 %3244 (bitvector 32) #:align 4)
    (set! %3245 (load %3231 pointer #:align 4))
    (set! %3246 (load %3242 (bitvector 32) #:align 4))
    (set! %3247 (add %3246 (bv #x00000001 32)))
    (store %3247 %3242 (bitvector 32) #:align 4)
    (set! %3248 (icmp/eq %3245 nullptr))
    (br %3248 %3257 %3249))

; %3249
  (define-label (%3249) #:merge #f
    (set! %3250 (shl %3229 (bv #x0000000f 32)))
    (set! %3251 (shl %3226 (bv #x00000014 32)))
    (set! %3252 (or %3251 %3230))
    (set! %3253 (or %3252 %3250))
    (set! %3254 (or %3253 (bv #x00000013 32)))
    (set! %3255 (getelementptr %3245 (array-offset %3247 4)))
    (store %3254 %3255 (bitvector 32) #:align 4)
    (set! %3256 (load %3242 (bitvector 32) #:align 4))
    (br %3257))

; %3257
  (define-label (%3257) #:merge #f
    (set! %3258 (phi [%3242 %3238] [%3242 %3249] [%3235 %3234]))
    (set! %3259 (phi [%3247 %3238] [%3256 %3249] [%3237 %3234]))
    (set! %3260 (add %3259 (bv #x00000001 32)))
    (store %3260 %3258 (bitvector 32) #:align 4)
    (br %3278))

; %3261
  (define-label (%3261) #:merge #f
    (set! %3262 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %3263 (load %3262 pointer #:align 4))
    (set! %3264 (icmp/eq %3263 nullptr))
    (br %3264 %3274 %3265))

; %3265
  (define-label (%3265) #:merge #f
    (set! %3266 (zext %3224 (bitvector 32)))
    (set! %3267 (shl %3266 (bv #x00000007 32)))
    (set! %3268 (shl %3226 (bv #x00000014 32)))
    (set! %3269 (or %3268 %3267))
    (set! %3270 (or %3269 (bv #x00000013 32)))
    (set! %3271 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3272 (load %3271 (bitvector 32) #:align 4))
    (set! %3273 (getelementptr %3263 (array-offset %3272 4)))
    (store %3270 %3273 (bitvector 32) #:align 4)
    (br %3274))

; %3274
  (define-label (%3274) #:merge #f
    (set! %3275 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3276 (load %3275 (bitvector 32) #:align 4))
    (set! %3277 (add %3276 (bv #x00000001 32)))
    (store %3277 %3275 (bitvector 32) #:align 4)
    (br %3278))

; %3278
  (define-label (%3278) #:merge #f
    (set! %3279 (phi [%3260 %3257] [%3277 %3274]))
    (set! %3280 (load %3222 (bitvector 8) #:align 1))
    (set! %3281 (add %3185 (bv #x00000800 32)))
    (set! %3282 (and %3185 (bv #x00000fff 32)))
    (set! %3283 (icmp/ult %3281 (bv #x00001000 32)))
    (br %3283 %3315 %3284))

; %3284
  (define-label (%3284) #:merge #f
    (set! %3285 (zext %3280 (bitvector 32)))
    (set! %3286 (shl %3285 (bv #x00000007 32)))
    (set! %3287 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %3288 (load %3287 pointer #:align 4))
    (set! %3289 (icmp/eq %3288 nullptr))
    (br %3289 %3290 %3293))

; %3290
  (define-label (%3290) #:merge #f
    (set! %3291 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3292 (add %3279 (bv #x00000001 32)))
    (store %3292 %3291 (bitvector 32) #:align 4)
    (br %3311))

; %3293
  (define-label (%3293) #:merge #f
    (set! %3294 (and %3281 (bv #xfffff000 32)))
    (set! %3295 (or %3294 %3286))
    (set! %3296 (or %3295 (bv #x00000037 32)))
    (set! %3297 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3298 (getelementptr %3288 (array-offset %3279 4)))
    (store %3296 %3298 (bitvector 32) #:align 4)
    (set! %3299 (load %3287 pointer #:align 4))
    (set! %3300 (load %3297 (bitvector 32) #:align 4))
    (set! %3301 (add %3300 (bv #x00000001 32)))
    (store %3301 %3297 (bitvector 32) #:align 4)
    (set! %3302 (icmp/eq %3299 nullptr))
    (br %3302 %3311 %3303))

; %3303
  (define-label (%3303) #:merge #f
    (set! %3304 (shl %3285 (bv #x0000000f 32)))
    (set! %3305 (shl %3282 (bv #x00000014 32)))
    (set! %3306 (or %3305 %3286))
    (set! %3307 (or %3306 %3304))
    (set! %3308 (or %3307 (bv #x00000013 32)))
    (set! %3309 (getelementptr %3299 (array-offset %3301 4)))
    (store %3308 %3309 (bitvector 32) #:align 4)
    (set! %3310 (load %3297 (bitvector 32) #:align 4))
    (br %3311))

; %3311
  (define-label (%3311) #:merge #f
    (set! %3312 (phi [%3297 %3293] [%3297 %3303] [%3291 %3290]))
    (set! %3313 (phi [%3301 %3293] [%3310 %3303] [%3292 %3290]))
    (set! %3314 (add %3313 (bv #x00000001 32)))
    (store %3314 %3312 (bitvector 32) #:align 4)
    (br %3332))

; %3315
  (define-label (%3315) #:merge #f
    (set! %3316 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %3317 (load %3316 pointer #:align 4))
    (set! %3318 (icmp/eq %3317 nullptr))
    (br %3318 %3328 %3319))

; %3319
  (define-label (%3319) #:merge #f
    (set! %3320 (zext %3280 (bitvector 32)))
    (set! %3321 (shl %3320 (bv #x00000007 32)))
    (set! %3322 (shl %3282 (bv #x00000014 32)))
    (set! %3323 (or %3322 %3321))
    (set! %3324 (or %3323 (bv #x00000013 32)))
    (set! %3325 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3326 (getelementptr %3317 (array-offset %3279 4)))
    (store %3324 %3326 (bitvector 32) #:align 4)
    (set! %3327 (load %3325 (bitvector 32) #:align 4))
    (br %3328))

; %3328
  (define-label (%3328) #:merge #f
    (set! %3329 (phi [%3327 %3319] [%3279 %3315]))
    (set! %3330 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3331 (add %3329 (bv #x00000001 32)))
    (store %3331 %3330 (bitvector 32) #:align 4)
    (br %3332))

; %3332
  (define-label (%3332) #:merge #f
    (set! %3333 (phi [%3314 %3311] [%3331 %3328]))
    (br %3189 %3334 %3989))

; %3334
  (define-label (%3334) #:merge #f
    (set! %3335 (sext %3186 (bitvector 16)))
    (set! %3336 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %3337 (load %3336 pointer #:align 4))
    (set! %3338 (icmp/eq %3337 nullptr))
    (br %3338 %3356 %3339))

; %3339
  (define-label (%3339) #:merge #f
    (set! %3340 (lshr %3335 (bv #x0005 16)))
    (set! %3341 (zext %3340 (bitvector 32)))
    (set! %3342 (shl %3341 (bv #x00000019 32)))
    (set! %3343 (load %3222 (bitvector 8) #:align 1))
    (set! %3344 (zext %3343 (bitvector 32)))
    (set! %3345 (shl %3344 (bv #x00000014 32)))
    (set! %3346 (shl %3335 (bv #x0007 16)))
    (set! %3347 (and %3346 (bv #x0f80 16)))
    (set! %3348 (zext %3347 (bitvector 32)))
    (set! %3349 (or %3342 %3348))
    (set! %3350 (or %3349 %3345))
    (set! %3351 (or %3350 (bv #x00042023 32)))
    (set! %3352 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3353 (getelementptr %3337 (array-offset %3333 4)))
    (store %3351 %3353 (bitvector 32) #:align 4)
    (set! %3354 (load %3336 pointer #:align 4))
    (set! %3355 (load %3352 (bitvector 32) #:align 4))
    (br %3356))

; %3356
  (define-label (%3356) #:merge #f
    (set! %3357 (phi [%3333 %3334] [%3355 %3339]))
    (set! %3358 (phi [#(struct:nullptr) %3334] [%3354 %3339]))
    (set! %3359 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3360 (add %3357 (bv #x00000001 32)))
    (store %3360 %3359 (bitvector 32) #:align 4)
    (set! %3361 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset %25 2) (array-offset (bv #x00000001 32) 1)))
    (set! %3362 (load %3361 (bitvector 8) #:align 1))
    (set! %3363 (sext %3362 (bitvector 16)))
    (set! %3364 (icmp/eq %3358 nullptr))
    (br %3364 %3380 %3365))

; %3365
  (define-label (%3365) #:merge #f
    (set! %3366 (lshr %3363 (bv #x0005 16)))
    (set! %3367 (zext %3366 (bitvector 32)))
    (set! %3368 (shl %3367 (bv #x00000019 32)))
    (set! %3369 (load %3223 (bitvector 8) #:align 1))
    (set! %3370 (zext %3369 (bitvector 32)))
    (set! %3371 (shl %3370 (bv #x00000014 32)))
    (set! %3372 (shl %3363 (bv #x0007 16)))
    (set! %3373 (and %3372 (bv #x0f80 16)))
    (set! %3374 (zext %3373 (bitvector 32)))
    (set! %3375 (or %3368 %3374))
    (set! %3376 (or %3375 %3371))
    (set! %3377 (or %3376 (bv #x00042023 32)))
    (set! %3378 (getelementptr %3358 (array-offset %3360 4)))
    (store %3377 %3378 (bitvector 32) #:align 4)
    (set! %3379 (load %3359 (bitvector 32) #:align 4))
    (br %3380))

; %3380
  (define-label (%3380) #:merge #f
    (set! %3381 (phi [%3360 %3356] [%3379 %3365]))
    (set! %3382 (add %3381 (bv #x00000001 32)))
    (store %3382 %3359 (bitvector 32) #:align 4)
    (br %3989))

; %3383
  (define-label (%3383) #:merge #f
    (set! %3384 (load %26 (bitvector 8) #:align 1))
    (set! %3385 (lshr (bv #x00000bc0 32) %25))
    (set! %3386 (and %3385 (bv #x00000001 32)))
    (set! %3387 (icmp/ne %3386 (bv #x00000000 32)))
    (br %3387 %3388 %3419))

; %3388
  (define-label (%3388) #:merge #f
    (set! %3389 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %3390 (load %3389 pointer #:align 4))
    (set! %3391 (icmp/eq %3390 nullptr))
    (br %3391 %3392 %3396))

; %3392
  (define-label (%3392) #:merge #f
    (set! %3393 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3394 (load %3393 (bitvector 32) #:align 4))
    (set! %3395 (add %3394 (bv #x00000001 32)))
    (store %3395 %3393 (bitvector 32) #:align 4)
    (br %3415))

; %3396
  (define-label (%3396) #:merge #f
    (set! %3397 (sext %3384 (bitvector 32)))
    (set! %3398 (shl %3397 (bv #x00000014 32)))
    (set! %3399 (or %3398 (bv #x00042e03 32)))
    (set! %3400 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3401 (load %3400 (bitvector 32) #:align 4))
    (set! %3402 (getelementptr %3390 (array-offset %3401 4)))
    (store %3399 %3402 (bitvector 32) #:align 4)
    (set! %3403 (load %3389 pointer #:align 4))
    (set! %3404 (load %3400 (bitvector 32) #:align 4))
    (set! %3405 (add %3404 (bv #x00000001 32)))
    (store %3405 %3400 (bitvector 32) #:align 4)
    (set! %3406 (icmp/eq %3403 nullptr))
    (br %3406 %3415 %3407))

; %3407
  (define-label (%3407) #:merge #f
    (set! %3408 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset %25 2) (array-offset (bv #x00000001 32) 1)))
    (set! %3409 (load %3408 (bitvector 8) #:align 1))
    (set! %3410 (sext %3409 (bitvector 32)))
    (set! %3411 (shl %3410 (bv #x00000014 32)))
    (set! %3412 (or %3411 (bv #x00042383 32)))
    (set! %3413 (getelementptr %3403 (array-offset %3405 4)))
    (store %3412 %3413 (bitvector 32) #:align 4)
    (set! %3414 (load %3400 (bitvector 32) #:align 4))
    (br %3415))

; %3415
  (define-label (%3415) #:merge #f
    (set! %3416 (phi [%3400 %3396] [%3400 %3407] [%3393 %3392]))
    (set! %3417 (phi [%3405 %3396] [%3414 %3407] [%3395 %3392]))
    (set! %3418 (add %3417 (bv #x00000001 32)))
    (store %3418 %3416 (bitvector 32) #:align 4)
    (br %3419))

; %3419
  (define-label (%3419) #:merge #f
    (set! %3420 (phi [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000c 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %3415] [%26 %3383]))
    (set! %3421 (load %29 (bitvector 8) #:align 1))
    (set! %3422 (lshr (bv #x00000bc0 32) %28))
    (set! %3423 (and %3422 (bv #x00000001 32)))
    (set! %3424 (icmp/eq %3423 (bv #x00000000 32)))
    (br %3424 %3456 %3425))

; %3425
  (define-label (%3425) #:merge #f
    (set! %3426 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %3427 (load %3426 pointer #:align 4))
    (set! %3428 (icmp/eq %3427 nullptr))
    (br %3428 %3429 %3433))

; %3429
  (define-label (%3429) #:merge #f
    (set! %3430 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3431 (load %3430 (bitvector 32) #:align 4))
    (set! %3432 (add %3431 (bv #x00000001 32)))
    (store %3432 %3430 (bitvector 32) #:align 4)
    (br %3452))

; %3433
  (define-label (%3433) #:merge #f
    (set! %3434 (sext %3421 (bitvector 32)))
    (set! %3435 (shl %3434 (bv #x00000014 32)))
    (set! %3436 (or %3435 (bv #x00042f03 32)))
    (set! %3437 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3438 (load %3437 (bitvector 32) #:align 4))
    (set! %3439 (getelementptr %3427 (array-offset %3438 4)))
    (store %3436 %3439 (bitvector 32) #:align 4)
    (set! %3440 (load %3426 pointer #:align 4))
    (set! %3441 (load %3437 (bitvector 32) #:align 4))
    (set! %3442 (add %3441 (bv #x00000001 32)))
    (store %3442 %3437 (bitvector 32) #:align 4)
    (set! %3443 (icmp/eq %3440 nullptr))
    (br %3443 %3452 %3444))

; %3444
  (define-label (%3444) #:merge #f
    (set! %3445 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset %28 2) (array-offset (bv #x00000001 32) 1)))
    (set! %3446 (load %3445 (bitvector 8) #:align 1))
    (set! %3447 (sext %3446 (bitvector 32)))
    (set! %3448 (shl %3447 (bv #x00000014 32)))
    (set! %3449 (or %3448 (bv #x00042e83 32)))
    (set! %3450 (getelementptr %3440 (array-offset %3442 4)))
    (store %3449 %3450 (bitvector 32) #:align 4)
    (set! %3451 (load %3437 (bitvector 32) #:align 4))
    (br %3452))

; %3452
  (define-label (%3452) #:merge #f
    (set! %3453 (phi [%3437 %3433] [%3437 %3444] [%3430 %3429]))
    (set! %3454 (phi [%3442 %3433] [%3451 %3444] [%3432 %3429]))
    (set! %3455 (add %3454 (bv #x00000001 32)))
    (store %3455 %3453 (bitvector 32) #:align 4)
    (br %3456))

; %3456
  (define-label (%3456) #:merge #f
    (set! %3457 (phi [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000d 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %3452] [%29 %3419]))
    (set! %3458 (sext %19 (bitvector 32)))
    (set! %3459 (add %3458 (bv #x00000800 32)))
    (set! %3460 (and %3458 (bv #x00000fff 32)))
    (set! %3461 (icmp/ult %3459 (bv #x00001000 32)))
    (set! %3462 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %3463 (load %3462 pointer #:align 4))
    (set! %3464 (icmp/eq %3463 nullptr))
    (br %3461 %3489 %3465))

; %3465
  (define-label (%3465) #:merge #f
    (br %3464 %3466 %3470))

; %3466
  (define-label (%3466) #:merge #f
    (set! %3467 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3468 (load %3467 (bitvector 32) #:align 4))
    (set! %3469 (add %3468 (bv #x00000001 32)))
    (store %3469 %3467 (bitvector 32) #:align 4)
    (br %3485))

; %3470
  (define-label (%3470) #:merge #f
    (set! %3471 (and %3459 (bv #xfffff000 32)))
    (set! %3472 (or %3471 (bv #x000002b7 32)))
    (set! %3473 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3474 (load %3473 (bitvector 32) #:align 4))
    (set! %3475 (getelementptr %3463 (array-offset %3474 4)))
    (store %3472 %3475 (bitvector 32) #:align 4)
    (set! %3476 (load %3462 pointer #:align 4))
    (set! %3477 (load %3473 (bitvector 32) #:align 4))
    (set! %3478 (add %3477 (bv #x00000001 32)))
    (store %3478 %3473 (bitvector 32) #:align 4)
    (set! %3479 (icmp/eq %3476 nullptr))
    (br %3479 %3485 %3480))

; %3480
  (define-label (%3480) #:merge #f
    (set! %3481 (shl %3460 (bv #x00000014 32)))
    (set! %3482 (or %3481 (bv #x00028293 32)))
    (set! %3483 (getelementptr %3476 (array-offset %3478 4)))
    (store %3482 %3483 (bitvector 32) #:align 4)
    (set! %3484 (load %3473 (bitvector 32) #:align 4))
    (br %3485))

; %3485
  (define-label (%3485) #:merge #f
    (set! %3486 (phi [%3473 %3470] [%3473 %3480] [%3467 %3466]))
    (set! %3487 (phi [%3478 %3470] [%3484 %3480] [%3469 %3466]))
    (set! %3488 (add %3487 (bv #x00000001 32)))
    (store %3488 %3486 (bitvector 32) #:align 4)
    (br %3500))

; %3489
  (define-label (%3489) #:merge #f
    (br %3464 %3496 %3490))

; %3490
  (define-label (%3490) #:merge #f
    (set! %3491 (shl %3460 (bv #x00000014 32)))
    (set! %3492 (or %3491 (bv #x00000293 32)))
    (set! %3493 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3494 (load %3493 (bitvector 32) #:align 4))
    (set! %3495 (getelementptr %3463 (array-offset %3494 4)))
    (store %3492 %3495 (bitvector 32) #:align 4)
    (br %3496))

; %3496
  (define-label (%3496) #:merge #f
    (set! %3497 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3498 (load %3497 (bitvector 32) #:align 4))
    (set! %3499 (add %3498 (bv #x00000001 32)))
    (store %3499 %3497 (bitvector 32) #:align 4)
    (br %3500))

; %3500
  (define-label (%3500) #:merge #f
    (set! %3501 (phi [%3488 %3485] [%3499 %3496]))
    (set! %3502 (load %3462 pointer #:align 4))
    (set! %3503 (icmp/eq %3502 nullptr))
    (br %3503 %3513 %3504))

; %3504
  (define-label (%3504) #:merge #f
    (set! %3505 (getelementptr %3457 (array-offset (bv #x00000001 32) 1)))
    (set! %3506 (load %3505 (bitvector 8) #:align 1))
    (set! %3507 (zext %3506 (bitvector 32)))
    (set! %3508 (shl %3507 (bv #x00000014 32)))
    (set! %3509 (or %3508 (bv #x000282b3 32)))
    (set! %3510 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3511 (getelementptr %3502 (array-offset %3501 4)))
    (store %3509 %3511 (bitvector 32) #:align 4)
    (set! %3512 (load %3510 (bitvector 32) #:align 4))
    (br %3513))

; %3513
  (define-label (%3513) #:merge #f
    (set! %3514 (phi [%3501 %3500] [%3512 %3504]))
    (set! %3515 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3516 (add %3514 (bv #x00000001 32)))
    (store %3516 %3515 (bitvector 32) #:align 4)
    (set! %3517 (lshr %7 (bv #x03 8)))
    (set! %3518 (and %3517 (bv #x03 8)))
    (set! %3519 (zext %3518 (bitvector 32)))
    (switch %3519 %3645 [(bv #x00000002 32) %3520] [(bv #x00000001 32) %3553] [(bv #x00000000 32) %3586] [(bv #x00000003 32) %3619]))

; %3520
  (define-label (%3520) #:merge #f
    (set! %3521 (load %3462 pointer #:align 4))
    (set! %3522 (icmp/eq %3521 nullptr))
    (br %3522 %3531 %3523))

; %3523
  (define-label (%3523) #:merge #f
    (set! %3524 (getelementptr %3420 (array-offset (bv #x00000001 32) 1)))
    (set! %3525 (load %3524 (bitvector 8) #:align 1))
    (set! %3526 (zext %3525 (bitvector 32)))
    (set! %3527 (shl %3526 (bv #x00000007 32)))
    (set! %3528 (or %3527 (bv #x0002c003 32)))
    (set! %3529 (getelementptr %3521 (array-offset %3516 4)))
    (store %3528 %3529 (bitvector 32) #:align 4)
    (set! %3530 (load %3515 (bitvector 32) #:align 4))
    (br %3531))

; %3531
  (define-label (%3531) #:merge #f
    (set! %3532 (phi [%3516 %3520] [%3530 %3523]))
    (set! %3533 (add %3532 (bv #x00000001 32)))
    (store %3533 %3515 (bitvector 32) #:align 4)
    (set! %3534 (load %11 pointer #:align 4))
    (set! %3535 (getelementptr %3534 (array-offset (bv #x00000000 32) 40) (struct-offset 28)))
    (set! %3536 (load %3535 pointer #:align 4))
    (set! %3537 (getelementptr %3536 (array-offset (bv #x00000000 32) 384) (struct-offset 56)))
    (set! %3538 (load %3537 (bitvector 8) #:align 8))
    (set! %3539 (icmp/eq %3538 (bv #x00 8)))
    (br %3539 %3540 %3646))

; %3540
  (define-label (%3540) #:merge #f
    (set! %3541 (load %3462 pointer #:align 4))
    (set! %3542 (icmp/eq %3541 nullptr))
    (br %3542 %3550 %3543))

; %3543
  (define-label (%3543) #:merge #f
    (set! %3544 (load %3420 (bitvector 8) #:align 1))
    (set! %3545 (zext %3544 (bitvector 32)))
    (set! %3546 (shl %3545 (bv #x00000007 32)))
    (set! %3547 (or %3546 (bv #x00000013 32)))
    (set! %3548 (getelementptr %3541 (array-offset %3533 4)))
    (store %3547 %3548 (bitvector 32) #:align 4)
    (set! %3549 (load %3515 (bitvector 32) #:align 4))
    (br %3550))

; %3550
  (define-label (%3550) #:merge #f
    (set! %3551 (phi [%3533 %3540] [%3549 %3543]))
    (set! %3552 (add %3551 (bv #x00000001 32)))
    (store %3552 %3515 (bitvector 32) #:align 4)
    (br %3646))

; %3553
  (define-label (%3553) #:merge #f
    (set! %3554 (load %3462 pointer #:align 4))
    (set! %3555 (icmp/eq %3554 nullptr))
    (br %3555 %3564 %3556))

; %3556
  (define-label (%3556) #:merge #f
    (set! %3557 (getelementptr %3420 (array-offset (bv #x00000001 32) 1)))
    (set! %3558 (load %3557 (bitvector 8) #:align 1))
    (set! %3559 (zext %3558 (bitvector 32)))
    (set! %3560 (shl %3559 (bv #x00000007 32)))
    (set! %3561 (or %3560 (bv #x0002d003 32)))
    (set! %3562 (getelementptr %3554 (array-offset %3516 4)))
    (store %3561 %3562 (bitvector 32) #:align 4)
    (set! %3563 (load %3515 (bitvector 32) #:align 4))
    (br %3564))

; %3564
  (define-label (%3564) #:merge #f
    (set! %3565 (phi [%3516 %3553] [%3563 %3556]))
    (set! %3566 (add %3565 (bv #x00000001 32)))
    (store %3566 %3515 (bitvector 32) #:align 4)
    (set! %3567 (load %11 pointer #:align 4))
    (set! %3568 (getelementptr %3567 (array-offset (bv #x00000000 32) 40) (struct-offset 28)))
    (set! %3569 (load %3568 pointer #:align 4))
    (set! %3570 (getelementptr %3569 (array-offset (bv #x00000000 32) 384) (struct-offset 56)))
    (set! %3571 (load %3570 (bitvector 8) #:align 8))
    (set! %3572 (icmp/eq %3571 (bv #x00 8)))
    (br %3572 %3573 %3646))

; %3573
  (define-label (%3573) #:merge #f
    (set! %3574 (load %3462 pointer #:align 4))
    (set! %3575 (icmp/eq %3574 nullptr))
    (br %3575 %3583 %3576))

; %3576
  (define-label (%3576) #:merge #f
    (set! %3577 (load %3420 (bitvector 8) #:align 1))
    (set! %3578 (zext %3577 (bitvector 32)))
    (set! %3579 (shl %3578 (bv #x00000007 32)))
    (set! %3580 (or %3579 (bv #x00000013 32)))
    (set! %3581 (getelementptr %3574 (array-offset %3566 4)))
    (store %3580 %3581 (bitvector 32) #:align 4)
    (set! %3582 (load %3515 (bitvector 32) #:align 4))
    (br %3583))

; %3583
  (define-label (%3583) #:merge #f
    (set! %3584 (phi [%3566 %3573] [%3582 %3576]))
    (set! %3585 (add %3584 (bv #x00000001 32)))
    (store %3585 %3515 (bitvector 32) #:align 4)
    (br %3646))

; %3586
  (define-label (%3586) #:merge #f
    (set! %3587 (load %3462 pointer #:align 4))
    (set! %3588 (icmp/eq %3587 nullptr))
    (br %3588 %3597 %3589))

; %3589
  (define-label (%3589) #:merge #f
    (set! %3590 (getelementptr %3420 (array-offset (bv #x00000001 32) 1)))
    (set! %3591 (load %3590 (bitvector 8) #:align 1))
    (set! %3592 (zext %3591 (bitvector 32)))
    (set! %3593 (shl %3592 (bv #x00000007 32)))
    (set! %3594 (or %3593 (bv #x0002a003 32)))
    (set! %3595 (getelementptr %3587 (array-offset %3516 4)))
    (store %3594 %3595 (bitvector 32) #:align 4)
    (set! %3596 (load %3515 (bitvector 32) #:align 4))
    (br %3597))

; %3597
  (define-label (%3597) #:merge #f
    (set! %3598 (phi [%3516 %3586] [%3596 %3589]))
    (set! %3599 (add %3598 (bv #x00000001 32)))
    (store %3599 %3515 (bitvector 32) #:align 4)
    (set! %3600 (load %11 pointer #:align 4))
    (set! %3601 (getelementptr %3600 (array-offset (bv #x00000000 32) 40) (struct-offset 28)))
    (set! %3602 (load %3601 pointer #:align 4))
    (set! %3603 (getelementptr %3602 (array-offset (bv #x00000000 32) 384) (struct-offset 56)))
    (set! %3604 (load %3603 (bitvector 8) #:align 8))
    (set! %3605 (icmp/eq %3604 (bv #x00 8)))
    (br %3605 %3606 %3646))

; %3606
  (define-label (%3606) #:merge #f
    (set! %3607 (load %3462 pointer #:align 4))
    (set! %3608 (icmp/eq %3607 nullptr))
    (br %3608 %3616 %3609))

; %3609
  (define-label (%3609) #:merge #f
    (set! %3610 (load %3420 (bitvector 8) #:align 1))
    (set! %3611 (zext %3610 (bitvector 32)))
    (set! %3612 (shl %3611 (bv #x00000007 32)))
    (set! %3613 (or %3612 (bv #x00000013 32)))
    (set! %3614 (getelementptr %3607 (array-offset %3599 4)))
    (store %3613 %3614 (bitvector 32) #:align 4)
    (set! %3615 (load %3515 (bitvector 32) #:align 4))
    (br %3616))

; %3616
  (define-label (%3616) #:merge #f
    (set! %3617 (phi [%3599 %3606] [%3615 %3609]))
    (set! %3618 (add %3617 (bv #x00000001 32)))
    (store %3618 %3515 (bitvector 32) #:align 4)
    (br %3646))

; %3619
  (define-label (%3619) #:merge #f
    (set! %3620 (load %3462 pointer #:align 4))
    (set! %3621 (icmp/eq %3620 nullptr))
    (br %3621 %3622 %3624))

; %3622
  (define-label (%3622) #:merge #f
    (set! %3623 (add %3514 (bv #x00000002 32)))
    (store %3623 %3515 (bitvector 32) #:align 4)
    (br %3642))

; %3624
  (define-label (%3624) #:merge #f
    (set! %3625 (getelementptr %3420 (array-offset (bv #x00000001 32) 1)))
    (set! %3626 (load %3625 (bitvector 8) #:align 1))
    (set! %3627 (zext %3626 (bitvector 32)))
    (set! %3628 (shl %3627 (bv #x00000007 32)))
    (set! %3629 (or %3628 (bv #x0002a003 32)))
    (set! %3630 (getelementptr %3620 (array-offset %3516 4)))
    (store %3629 %3630 (bitvector 32) #:align 4)
    (set! %3631 (load %3515 (bitvector 32) #:align 4))
    (set! %3632 (load %3462 pointer #:align 4))
    (set! %3633 (add %3631 (bv #x00000001 32)))
    (store %3633 %3515 (bitvector 32) #:align 4)
    (set! %3634 (icmp/eq %3632 nullptr))
    (br %3634 %3642 %3635))

; %3635
  (define-label (%3635) #:merge #f
    (set! %3636 (load %3420 (bitvector 8) #:align 1))
    (set! %3637 (zext %3636 (bitvector 32)))
    (set! %3638 (shl %3637 (bv #x00000007 32)))
    (set! %3639 (or %3638 (bv #x0042a003 32)))
    (set! %3640 (getelementptr %3632 (array-offset %3633 4)))
    (store %3639 %3640 (bitvector 32) #:align 4)
    (set! %3641 (load %3515 (bitvector 32) #:align 4))
    (br %3642))

; %3642
  (define-label (%3642) #:merge #f
    (set! %3643 (phi [%3633 %3624] [%3641 %3635] [%3623 %3622]))
    (set! %3644 (add %3643 (bv #x00000001 32)))
    (store %3644 %3515 (bitvector 32) #:align 4)
    (br %3646))

; %3645
  (define-label (%3645) #:merge #f
    (unreachable))

; %3646
  (define-label (%3646) #:merge #f
    (set! %3647 (phi [%3533 %3531] [%3566 %3564] [%3599 %3597] [%3618 %3616] [%3585 %3583] [%3552 %3550] [%3644 %3642]))
    (br %3387 %3648 %3989))

; %3648
  (define-label (%3648) #:merge #f
    (set! %3649 (sext %3384 (bitvector 16)))
    (set! %3650 (load %3462 pointer #:align 4))
    (set! %3651 (icmp/eq %3650 nullptr))
    (br %3651 %3652 %3654))

; %3652
  (define-label (%3652) #:merge #f
    (set! %3653 (add %3647 (bv #x00000001 32)))
    (store %3653 %3515 (bitvector 32) #:align 4)
    (br %3691))

; %3654
  (define-label (%3654) #:merge #f
    (set! %3655 (lshr %3649 (bv #x0005 16)))
    (set! %3656 (zext %3655 (bitvector 32)))
    (set! %3657 (shl %3656 (bv #x00000019 32)))
    (set! %3658 (load %3420 (bitvector 8) #:align 1))
    (set! %3659 (zext %3658 (bitvector 32)))
    (set! %3660 (shl %3659 (bv #x00000014 32)))
    (set! %3661 (shl %3649 (bv #x0007 16)))
    (set! %3662 (and %3661 (bv #x0f80 16)))
    (set! %3663 (zext %3662 (bitvector 32)))
    (set! %3664 (or %3657 %3663))
    (set! %3665 (or %3664 %3660))
    (set! %3666 (or %3665 (bv #x00042023 32)))
    (set! %3667 (getelementptr %3650 (array-offset %3647 4)))
    (store %3666 %3667 (bitvector 32) #:align 4)
    (set! %3668 (load %3462 pointer #:align 4))
    (set! %3669 (load %3515 (bitvector 32) #:align 4))
    (set! %3670 (add %3669 (bv #x00000001 32)))
    (store %3670 %3515 (bitvector 32) #:align 4)
    (set! %3671 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset %25 2) (array-offset (bv #x00000001 32) 1)))
    (set! %3672 (load %3671 (bitvector 8) #:align 1))
    (set! %3673 (sext %3672 (bitvector 16)))
    (set! %3674 (icmp/eq %3668 nullptr))
    (br %3674 %3691 %3675))

; %3675
  (define-label (%3675) #:merge #f
    (set! %3676 (lshr %3673 (bv #x0005 16)))
    (set! %3677 (zext %3676 (bitvector 32)))
    (set! %3678 (shl %3677 (bv #x00000019 32)))
    (set! %3679 (getelementptr %3420 (array-offset (bv #x00000001 32) 1)))
    (set! %3680 (load %3679 (bitvector 8) #:align 1))
    (set! %3681 (zext %3680 (bitvector 32)))
    (set! %3682 (shl %3681 (bv #x00000014 32)))
    (set! %3683 (shl %3673 (bv #x0007 16)))
    (set! %3684 (and %3683 (bv #x0f80 16)))
    (set! %3685 (zext %3684 (bitvector 32)))
    (set! %3686 (or %3678 %3685))
    (set! %3687 (or %3686 %3682))
    (set! %3688 (or %3687 (bv #x00042023 32)))
    (set! %3689 (getelementptr %3668 (array-offset %3670 4)))
    (store %3688 %3689 (bitvector 32) #:align 4)
    (set! %3690 (load %3515 (bitvector 32) #:align 4))
    (br %3691))

; %3691
  (define-label (%3691) #:merge #f
    (set! %3692 (phi [%3670 %3654] [%3690 %3675] [%3653 %3652]))
    (set! %3693 (add %3692 (bv #x00000001 32)))
    (store %3693 %3515 (bitvector 32) #:align 4)
    (br %3989))

; %3694
  (define-label (%3694) #:merge #f
    (set! %3695 (and %30 (bv #x00000007 32)))
    (set! %3696 (icmp/eq %3695 (bv #x00000002 32)))
    (br %3696 %3697 %3758))

; %3697
  (define-label (%3697) #:merge #f
    (set! %3698 (add %21 (bv #x00000800 32)))
    (set! %3699 (and %21 (bv #x00000fff 32)))
    (set! %3700 (icmp/ult %3698 (bv #x00001000 32)))
    (set! %3701 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %3702 (load %3701 pointer #:align 4))
    (set! %3703 (icmp/eq %3702 nullptr))
    (br %3700 %3728 %3704))

; %3704
  (define-label (%3704) #:merge #f
    (br %3703 %3705 %3709))

; %3705
  (define-label (%3705) #:merge #f
    (set! %3706 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3707 (load %3706 (bitvector 32) #:align 4))
    (set! %3708 (add %3707 (bv #x00000001 32)))
    (store %3708 %3706 (bitvector 32) #:align 4)
    (br %3724))

; %3709
  (define-label (%3709) #:merge #f
    (set! %3710 (and %3698 (bv #xfffff000 32)))
    (set! %3711 (or %3710 (bv #x00000eb7 32)))
    (set! %3712 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3713 (load %3712 (bitvector 32) #:align 4))
    (set! %3714 (getelementptr %3702 (array-offset %3713 4)))
    (store %3711 %3714 (bitvector 32) #:align 4)
    (set! %3715 (load %3701 pointer #:align 4))
    (set! %3716 (load %3712 (bitvector 32) #:align 4))
    (set! %3717 (add %3716 (bv #x00000001 32)))
    (store %3717 %3712 (bitvector 32) #:align 4)
    (set! %3718 (icmp/eq %3715 nullptr))
    (br %3718 %3724 %3719))

; %3719
  (define-label (%3719) #:merge #f
    (set! %3720 (shl %3699 (bv #x00000014 32)))
    (set! %3721 (or %3720 (bv #x000e8e93 32)))
    (set! %3722 (getelementptr %3715 (array-offset %3717 4)))
    (store %3721 %3722 (bitvector 32) #:align 4)
    (set! %3723 (load %3712 (bitvector 32) #:align 4))
    (br %3724))

; %3724
  (define-label (%3724) #:merge #f
    (set! %3725 (phi [%3712 %3709] [%3712 %3719] [%3706 %3705]))
    (set! %3726 (phi [%3717 %3709] [%3723 %3719] [%3708 %3705]))
    (set! %3727 (add %3726 (bv #x00000001 32)))
    (store %3727 %3725 (bitvector 32) #:align 4)
    (br %3739))

; %3728
  (define-label (%3728) #:merge #f
    (br %3703 %3735 %3729))

; %3729
  (define-label (%3729) #:merge #f
    (set! %3730 (shl %3699 (bv #x00000014 32)))
    (set! %3731 (or %3730 (bv #x00000e93 32)))
    (set! %3732 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3733 (load %3732 (bitvector 32) #:align 4))
    (set! %3734 (getelementptr %3702 (array-offset %3733 4)))
    (store %3731 %3734 (bitvector 32) #:align 4)
    (br %3735))

; %3735
  (define-label (%3735) #:merge #f
    (set! %3736 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3737 (load %3736 (bitvector 32) #:align 4))
    (set! %3738 (add %3737 (bv #x00000001 32)))
    (store %3738 %3736 (bitvector 32) #:align 4)
    (br %3739))

; %3739
  (define-label (%3739) #:merge #f
    (set! %3740 (phi [%3727 %3724] [%3738 %3735]))
    (set! %3741 (icmp/sgt %21 (bv #xffffffff 32)))
    (set! %3742 (load %3701 pointer #:align 4))
    (set! %3743 (icmp/eq %3742 nullptr))
    (br %3741 %3744 %3749))

; %3744
  (define-label (%3744) #:merge #f
    (br %3743 %3754 %3745))

; %3745
  (define-label (%3745) #:merge #f
    (set! %3746 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3747 (getelementptr %3742 (array-offset %3740 4)))
    (store (bv #x00000f13 32) %3747 (bitvector 32) #:align 4)
    (set! %3748 (load %3746 (bitvector 32) #:align 4))
    (br %3754))

; %3749
  (define-label (%3749) #:merge #f
    (br %3743 %3754 %3750))

; %3750
  (define-label (%3750) #:merge #f
    (set! %3751 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3752 (getelementptr %3742 (array-offset %3740 4)))
    (store (bv #xfff00f13 32) %3752 (bitvector 32) #:align 4)
    (set! %3753 (load %3751 (bitvector 32) #:align 4))
    (br %3754))

; %3754
  (define-label (%3754) #:merge #f
    (set! %3755 (phi [%3748 %3745] [%3740 %3744] [%3753 %3750] [%3740 %3749]))
    (set! %3756 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3757 (add %3755 (bv #x00000001 32)))
    (store %3757 %3756 (bitvector 32) #:align 4)
    (br %3758))

; %3758
  (define-label (%3758) #:merge #f
    (set! %3759 (phi [%29 %3694] [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000d 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %3754]))
    (set! %3760 (and %7 (bv #x18 8)))
    (set! %3761 (and %7 (bv #xe0 8)))
    (set! %3762 (load %26 (bitvector 8) #:align 1))
    (set! %3763 (lshr (bv #x00000bc0 32) %25))
    (set! %3764 (and %3763 (bv #x00000001 32)))
    (set! %3765 (icmp/eq %3764 (bv #x00000000 32)))
    (br %3765 %3797 %3766))

; %3766
  (define-label (%3766) #:merge #f
    (set! %3767 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %3768 (load %3767 pointer #:align 4))
    (set! %3769 (icmp/eq %3768 nullptr))
    (br %3769 %3770 %3774))

; %3770
  (define-label (%3770) #:merge #f
    (set! %3771 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3772 (load %3771 (bitvector 32) #:align 4))
    (set! %3773 (add %3772 (bv #x00000001 32)))
    (store %3773 %3771 (bitvector 32) #:align 4)
    (br %3793))

; %3774
  (define-label (%3774) #:merge #f
    (set! %3775 (sext %3762 (bitvector 32)))
    (set! %3776 (shl %3775 (bv #x00000014 32)))
    (set! %3777 (or %3776 (bv #x00042e03 32)))
    (set! %3778 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3779 (load %3778 (bitvector 32) #:align 4))
    (set! %3780 (getelementptr %3768 (array-offset %3779 4)))
    (store %3777 %3780 (bitvector 32) #:align 4)
    (set! %3781 (load %3767 pointer #:align 4))
    (set! %3782 (load %3778 (bitvector 32) #:align 4))
    (set! %3783 (add %3782 (bv #x00000001 32)))
    (store %3783 %3778 (bitvector 32) #:align 4)
    (set! %3784 (icmp/eq %3781 nullptr))
    (br %3784 %3793 %3785))

; %3785
  (define-label (%3785) #:merge #f
    (set! %3786 (getelementptr @bpf2rv32 (array-offset (bv #x00000000 32) 28) (array-offset %25 2) (array-offset (bv #x00000001 32) 1)))
    (set! %3787 (load %3786 (bitvector 8) #:align 1))
    (set! %3788 (sext %3787 (bitvector 32)))
    (set! %3789 (shl %3788 (bv #x00000014 32)))
    (set! %3790 (or %3789 (bv #x00042383 32)))
    (set! %3791 (getelementptr %3781 (array-offset %3783 4)))
    (store %3790 %3791 (bitvector 32) #:align 4)
    (set! %3792 (load %3778 (bitvector 32) #:align 4))
    (br %3793))

; %3793
  (define-label (%3793) #:merge #f
    (set! %3794 (phi [%3778 %3774] [%3778 %3785] [%3771 %3770]))
    (set! %3795 (phi [%3783 %3774] [%3792 %3785] [%3773 %3770]))
    (set! %3796 (add %3795 (bv #x00000001 32)))
    (store %3796 %3794 (bitvector 32) #:align 4)
    (br %3797))

; %3797
  (define-label (%3797) #:merge #f
    (set! %3798 (phi [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000c 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %3793] [%26 %3758]))
    (set! %3799 (load %3759 (bitvector 8) #:align 1))
    (set! %3800 (icmp/slt %3799 (bv #x00 8)))
    (br %3800 %3801 %3832))

; %3801
  (define-label (%3801) #:merge #f
    (set! %3802 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %3803 (load %3802 pointer #:align 4))
    (set! %3804 (icmp/eq %3803 nullptr))
    (br %3804 %3805 %3809))

; %3805
  (define-label (%3805) #:merge #f
    (set! %3806 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3807 (load %3806 (bitvector 32) #:align 4))
    (set! %3808 (add %3807 (bv #x00000001 32)))
    (store %3808 %3806 (bitvector 32) #:align 4)
    (br %3828))

; %3809
  (define-label (%3809) #:merge #f
    (set! %3810 (sext %3799 (bitvector 32)))
    (set! %3811 (shl %3810 (bv #x00000014 32)))
    (set! %3812 (or %3811 (bv #x00042f03 32)))
    (set! %3813 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3814 (load %3813 (bitvector 32) #:align 4))
    (set! %3815 (getelementptr %3803 (array-offset %3814 4)))
    (store %3812 %3815 (bitvector 32) #:align 4)
    (set! %3816 (load %3802 pointer #:align 4))
    (set! %3817 (load %3813 (bitvector 32) #:align 4))
    (set! %3818 (add %3817 (bv #x00000001 32)))
    (store %3818 %3813 (bitvector 32) #:align 4)
    (set! %3819 (icmp/eq %3816 nullptr))
    (br %3819 %3828 %3820))

; %3820
  (define-label (%3820) #:merge #f
    (set! %3821 (getelementptr %3759 (array-offset (bv #x00000001 32) 1)))
    (set! %3822 (load %3821 (bitvector 8) #:align 1))
    (set! %3823 (sext %3822 (bitvector 32)))
    (set! %3824 (shl %3823 (bv #x00000014 32)))
    (set! %3825 (or %3824 (bv #x00042e83 32)))
    (set! %3826 (getelementptr %3816 (array-offset %3818 4)))
    (store %3825 %3826 (bitvector 32) #:align 4)
    (set! %3827 (load %3813 (bitvector 32) #:align 4))
    (br %3828))

; %3828
  (define-label (%3828) #:merge #f
    (set! %3829 (phi [%3813 %3809] [%3813 %3820] [%3806 %3805]))
    (set! %3830 (phi [%3818 %3809] [%3827 %3820] [%3808 %3805]))
    (set! %3831 (add %3830 (bv #x00000001 32)))
    (store %3831 %3829 (bitvector 32) #:align 4)
    (br %3832))

; %3832
  (define-label (%3832) #:merge #f
    (set! %3833 (phi [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000d 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %3828] [%3759 %3797]))
    (set! %3834 (icmp/ne %3761 (bv #xc0 8)))
    (set! %3835 (icmp/eq %3760 (bv #x00 8)))
    (set! %3836 (or %3835 %3834))
    (br %3836 %3837 %3989))

; %3837
  (define-label (%3837) #:merge #f
    (set! %3838 (sext %19 (bitvector 32)))
    (set! %3839 (add %3838 (bv #x00000800 32)))
    (set! %3840 (and %3838 (bv #x00000fff 32)))
    (set! %3841 (icmp/ult %3839 (bv #x00001000 32)))
    (set! %3842 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %3843 (load %3842 pointer #:align 4))
    (set! %3844 (icmp/eq %3843 nullptr))
    (br %3841 %3869 %3845))

; %3845
  (define-label (%3845) #:merge #f
    (br %3844 %3846 %3850))

; %3846
  (define-label (%3846) #:merge #f
    (set! %3847 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3848 (load %3847 (bitvector 32) #:align 4))
    (set! %3849 (add %3848 (bv #x00000001 32)))
    (store %3849 %3847 (bitvector 32) #:align 4)
    (br %3865))

; %3850
  (define-label (%3850) #:merge #f
    (set! %3851 (and %3839 (bv #xfffff000 32)))
    (set! %3852 (or %3851 (bv #x000002b7 32)))
    (set! %3853 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3854 (load %3853 (bitvector 32) #:align 4))
    (set! %3855 (getelementptr %3843 (array-offset %3854 4)))
    (store %3852 %3855 (bitvector 32) #:align 4)
    (set! %3856 (load %3842 pointer #:align 4))
    (set! %3857 (load %3853 (bitvector 32) #:align 4))
    (set! %3858 (add %3857 (bv #x00000001 32)))
    (store %3858 %3853 (bitvector 32) #:align 4)
    (set! %3859 (icmp/eq %3856 nullptr))
    (br %3859 %3865 %3860))

; %3860
  (define-label (%3860) #:merge #f
    (set! %3861 (shl %3840 (bv #x00000014 32)))
    (set! %3862 (or %3861 (bv #x00028293 32)))
    (set! %3863 (getelementptr %3856 (array-offset %3858 4)))
    (store %3862 %3863 (bitvector 32) #:align 4)
    (set! %3864 (load %3853 (bitvector 32) #:align 4))
    (br %3865))

; %3865
  (define-label (%3865) #:merge #f
    (set! %3866 (phi [%3853 %3850] [%3853 %3860] [%3847 %3846]))
    (set! %3867 (phi [%3858 %3850] [%3864 %3860] [%3849 %3846]))
    (set! %3868 (add %3867 (bv #x00000001 32)))
    (store %3868 %3866 (bitvector 32) #:align 4)
    (br %3880))

; %3869
  (define-label (%3869) #:merge #f
    (br %3844 %3876 %3870))

; %3870
  (define-label (%3870) #:merge #f
    (set! %3871 (shl %3840 (bv #x00000014 32)))
    (set! %3872 (or %3871 (bv #x00000293 32)))
    (set! %3873 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3874 (load %3873 (bitvector 32) #:align 4))
    (set! %3875 (getelementptr %3843 (array-offset %3874 4)))
    (store %3872 %3875 (bitvector 32) #:align 4)
    (br %3876))

; %3876
  (define-label (%3876) #:merge #f
    (set! %3877 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3878 (load %3877 (bitvector 32) #:align 4))
    (set! %3879 (add %3878 (bv #x00000001 32)))
    (store %3879 %3877 (bitvector 32) #:align 4)
    (br %3880))

; %3880
  (define-label (%3880) #:merge #f
    (set! %3881 (phi [%3868 %3865] [%3879 %3876]))
    (set! %3882 (load %3842 pointer #:align 4))
    (set! %3883 (icmp/eq %3882 nullptr))
    (br %3883 %3893 %3884))

; %3884
  (define-label (%3884) #:merge #f
    (set! %3885 (getelementptr %3798 (array-offset (bv #x00000001 32) 1)))
    (set! %3886 (load %3885 (bitvector 8) #:align 1))
    (set! %3887 (zext %3886 (bitvector 32)))
    (set! %3888 (shl %3887 (bv #x00000014 32)))
    (set! %3889 (or %3888 (bv #x000282b3 32)))
    (set! %3890 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3891 (getelementptr %3882 (array-offset %3881 4)))
    (store %3889 %3891 (bitvector 32) #:align 4)
    (set! %3892 (load %3890 (bitvector 32) #:align 4))
    (br %3893))

; %3893
  (define-label (%3893) #:merge #f
    (set! %3894 (phi [%3881 %3880] [%3892 %3884]))
    (set! %3895 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %3896 (add %3894 (bv #x00000001 32)))
    (store %3896 %3895 (bitvector 32) #:align 4)
    (set! %3897 (lshr %3760 (bv #x03 8)))
    (set! %3898 (zext %3897 (bitvector 32)))
    (switch %3898 %3988 [(bv #x00000002 32) %3899] [(bv #x00000001 32) %3913] [(bv #x00000000 32) %3927] [(bv #x00000003 32) %3956]))

; %3899
  (define-label (%3899) #:merge #f
    (set! %3900 (load %3842 pointer #:align 4))
    (set! %3901 (icmp/eq %3900 nullptr))
    (br %3901 %3910 %3902))

; %3902
  (define-label (%3902) #:merge #f
    (set! %3903 (getelementptr %3833 (array-offset (bv #x00000001 32) 1)))
    (set! %3904 (load %3903 (bitvector 8) #:align 1))
    (set! %3905 (zext %3904 (bitvector 32)))
    (set! %3906 (shl %3905 (bv #x00000014 32)))
    (set! %3907 (or %3906 (bv #x00028023 32)))
    (set! %3908 (getelementptr %3900 (array-offset %3896 4)))
    (store %3907 %3908 (bitvector 32) #:align 4)
    (set! %3909 (load %3895 (bitvector 32) #:align 4))
    (br %3910))

; %3910
  (define-label (%3910) #:merge #f
    (set! %3911 (phi [%3896 %3899] [%3909 %3902]))
    (set! %3912 (add %3911 (bv #x00000001 32)))
    (store %3912 %3895 (bitvector 32) #:align 4)
    (br %3989))

; %3913
  (define-label (%3913) #:merge #f
    (set! %3914 (load %3842 pointer #:align 4))
    (set! %3915 (icmp/eq %3914 nullptr))
    (br %3915 %3924 %3916))

; %3916
  (define-label (%3916) #:merge #f
    (set! %3917 (getelementptr %3833 (array-offset (bv #x00000001 32) 1)))
    (set! %3918 (load %3917 (bitvector 8) #:align 1))
    (set! %3919 (zext %3918 (bitvector 32)))
    (set! %3920 (shl %3919 (bv #x00000014 32)))
    (set! %3921 (or %3920 (bv #x00029023 32)))
    (set! %3922 (getelementptr %3914 (array-offset %3896 4)))
    (store %3921 %3922 (bitvector 32) #:align 4)
    (set! %3923 (load %3895 (bitvector 32) #:align 4))
    (br %3924))

; %3924
  (define-label (%3924) #:merge #f
    (set! %3925 (phi [%3896 %3913] [%3923 %3916]))
    (set! %3926 (add %3925 (bv #x00000001 32)))
    (store %3926 %3895 (bitvector 32) #:align 4)
    (br %3989))

; %3927
  (define-label (%3927) #:merge #f
    (switch %3761 %3989 [(bv #x60 8) %3928] [(bv #xc0 8) %3942]))

; %3928
  (define-label (%3928) #:merge #f
    (set! %3929 (load %3842 pointer #:align 4))
    (set! %3930 (icmp/eq %3929 nullptr))
    (br %3930 %3939 %3931))

; %3931
  (define-label (%3931) #:merge #f
    (set! %3932 (getelementptr %3833 (array-offset (bv #x00000001 32) 1)))
    (set! %3933 (load %3932 (bitvector 8) #:align 1))
    (set! %3934 (zext %3933 (bitvector 32)))
    (set! %3935 (shl %3934 (bv #x00000014 32)))
    (set! %3936 (or %3935 (bv #x0002a023 32)))
    (set! %3937 (getelementptr %3929 (array-offset %3896 4)))
    (store %3936 %3937 (bitvector 32) #:align 4)
    (set! %3938 (load %3895 (bitvector 32) #:align 4))
    (br %3939))

; %3939
  (define-label (%3939) #:merge #f
    (set! %3940 (phi [%3896 %3928] [%3938 %3931]))
    (set! %3941 (add %3940 (bv #x00000001 32)))
    (store %3941 %3895 (bitvector 32) #:align 4)
    (br %3989))

; %3942
  (define-label (%3942) #:merge #f
    (set! %3943 (load %3842 pointer #:align 4))
    (set! %3944 (icmp/eq %3943 nullptr))
    (br %3944 %3953 %3945))

; %3945
  (define-label (%3945) #:merge #f
    (set! %3946 (getelementptr %3833 (array-offset (bv #x00000001 32) 1)))
    (set! %3947 (load %3946 (bitvector 8) #:align 1))
    (set! %3948 (zext %3947 (bitvector 32)))
    (set! %3949 (shl %3948 (bv #x00000014 32)))
    (set! %3950 (or %3949 (bv #x0002a02f 32)))
    (set! %3951 (getelementptr %3943 (array-offset %3896 4)))
    (store %3950 %3951 (bitvector 32) #:align 4)
    (set! %3952 (load %3895 (bitvector 32) #:align 4))
    (br %3953))

; %3953
  (define-label (%3953) #:merge #f
    (set! %3954 (phi [%3896 %3942] [%3952 %3945]))
    (set! %3955 (add %3954 (bv #x00000001 32)))
    (store %3955 %3895 (bitvector 32) #:align 4)
    (br %3989))

; %3956
  (define-label (%3956) #:merge #f
    (set! %3957 (load %3842 pointer #:align 4))
    (set! %3958 (icmp/eq %3957 nullptr))
    (br %3958 %3959 %3961))

; %3959
  (define-label (%3959) #:merge #f
    (set! %3960 (add %3894 (bv #x00000002 32)))
    (store %3960 %3895 (bitvector 32) #:align 4)
    (br %3979))

; %3961
  (define-label (%3961) #:merge #f
    (set! %3962 (getelementptr %3833 (array-offset (bv #x00000001 32) 1)))
    (set! %3963 (load %3962 (bitvector 8) #:align 1))
    (set! %3964 (zext %3963 (bitvector 32)))
    (set! %3965 (shl %3964 (bv #x00000014 32)))
    (set! %3966 (or %3965 (bv #x0002a023 32)))
    (set! %3967 (getelementptr %3957 (array-offset %3896 4)))
    (store %3966 %3967 (bitvector 32) #:align 4)
    (set! %3968 (load %3895 (bitvector 32) #:align 4))
    (set! %3969 (load %3842 pointer #:align 4))
    (set! %3970 (add %3968 (bv #x00000001 32)))
    (store %3970 %3895 (bitvector 32) #:align 4)
    (set! %3971 (icmp/eq %3969 nullptr))
    (br %3971 %3979 %3972))

; %3972
  (define-label (%3972) #:merge #f
    (set! %3973 (load %3833 (bitvector 8) #:align 1))
    (set! %3974 (zext %3973 (bitvector 32)))
    (set! %3975 (shl %3974 (bv #x00000014 32)))
    (set! %3976 (or %3975 (bv #x0002a223 32)))
    (set! %3977 (getelementptr %3969 (array-offset %3970 4)))
    (store %3976 %3977 (bitvector 32) #:align 4)
    (set! %3978 (load %3895 (bitvector 32) #:align 4))
    (br %3979))

; %3979
  (define-label (%3979) #:merge #f
    (set! %3980 (phi [%3970 %3961] [%3978 %3972] [%3960 %3959]))
    (set! %3981 (add %3980 (bv #x00000001 32)))
    (store %3981 %3895 (bitvector 32) #:align 4)
    (br %3989))

; %3982
  (define-label (%3982) #:merge #f
    (set! %3983 (load @bpf_jit_emit_insn.__print_once (bitvector 1) #:align 1))
    (br %3983 %3989 %3984))

; %3984
  (define-label (%3984) #:merge #f
    (store (bv #b1 1) @bpf_jit_emit_insn.__print_once (bitvector 1) #:align 1)
    (set! %3985 (call @printk (getelementptr @.str.1 (array-offset (bv #x00000000 32) 43) (array-offset (bv #x00000000 32) 1)) %30))
    (br %3989))

; %3986
  (define-label (%3986) #:merge #f
    (set! %3987 (call @printk (getelementptr @.str.2 (array-offset (bv #x00000000 32) 32) (array-offset (bv #x00000000 32) 1)) %30))
    (br %3989))

; %3988
  (define-label (%3988) #:merge #f
    (unreachable))

; %3989
  (define-label (%3989) #:merge #f
    (set! %3990 (phi [(bv #xffffffea 32) %3986] [%2157 %2259] [(bv #xffffffff 32) %1769] [(bv #xffffffff 32) %2023] [(bv #xfffffff2 32) %3984] [(bv #xfffffff2 32) %3982] [(bv #x00000001 32) %3332] [(bv #x00000001 32) %3380] [(bv #xffffffff 32) %3832] [(bv #x00000000 32) %3691] [(bv #x00000000 32) %3646] [(bv #x00000000 32) %3180] [(bv #x00000000 32) %3157] [(bv #x00000000 32) %2343] [(bv #x00000000 32) %2151] [(bv #x00000000 32) %2123] [(bv #x00000000 32) %2073] [(bv #x00000000 32) %2025] [(bv #x00000000 32) %1819] [(bv #x00000000 32) %1771] [(bv #x00000000 32) %972] [(bv #x00000000 32) %925] [(bv #x00000000 32) %871] [(bv #x00000000 32) %823] [(bv #x00000000 32) %2256] [(bv #x00000000 32) %3121] [(bv #x00000000 32) %3072] [(bv #x00000000 32) %3113] [(bv #x00000000 32) %1673] [(bv #x00000000 32) %1672] [(bv #x00000000 32) %1043] [(bv #x00000000 32) %98] [(bv #x00000000 32) %95] [(bv #x00000000 32) %3939] [(bv #x00000000 32) %3953] [(bv #x00000000 32) %3927] [(bv #x00000000 32) %3979] [(bv #x00000000 32) %3924] [(bv #x00000000 32) %3910]))
    (ret %3990))

  (define-value %4)
  (define-value %5)
  (define-value %6)
  (define-value %7)
  (define-value %8)
  (define-value %9)
  (define-value %10)
  (define-value %11)
  (define-value %12)
  (define-value %13)
  (define-value %14)
  (define-value %15)
  (define-value %16)
  (define-value %17)
  (define-value %18)
  (define-value %19)
  (define-value %20)
  (define-value %21)
  (define-value %22)
  (define-value %23)
  (define-value %24)
  (define-value %25)
  (define-value %26)
  (define-value %27)
  (define-value %28)
  (define-value %29)
  (define-value %30)
  (define-value %32)
  (define-value %33)
  (define-value %35)
  (define-value %36)
  (define-value %37)
  (define-value %38)
  (define-value %39)
  (define-value %40)
  (define-value %43)
  (define-value %44)
  (define-value %45)
  (define-value %47)
  (define-value %48)
  (define-value %49)
  (define-value %50)
  (define-value %51)
  (define-value %52)
  (define-value %53)
  (define-value %54)
  (define-value %55)
  (define-value %57)
  (define-value %58)
  (define-value %59)
  (define-value %60)
  (define-value %62)
  (define-value %63)
  (define-value %64)
  (define-value %67)
  (define-value %68)
  (define-value %69)
  (define-value %70)
  (define-value %71)
  (define-value %73)
  (define-value %74)
  (define-value %75)
  (define-value %77)
  (define-value %78)
  (define-value %79)
  (define-value %80)
  (define-value %83)
  (define-value %84)
  (define-value %85)
  (define-value %88)
  (define-value %89)
  (define-value %90)
  (define-value %92)
  (define-value %93)
  (define-value %94)
  (define-value %96)
  (define-value %97)
  (define-value %100)
  (define-value %101)
  (define-value %102)
  (define-value %103)
  (define-value %104)
  (define-value %106)
  (define-value %107)
  (define-value %108)
  (define-value %110)
  (define-value %111)
  (define-value %112)
  (define-value %114)
  (define-value %115)
  (define-value %116)
  (define-value %117)
  (define-value %118)
  (define-value %119)
  (define-value %120)
  (define-value %121)
  (define-value %122)
  (define-value %123)
  (define-value %125)
  (define-value %126)
  (define-value %127)
  (define-value %128)
  (define-value %129)
  (define-value %130)
  (define-value %131)
  (define-value %133)
  (define-value %134)
  (define-value %135)
  (define-value %137)
  (define-value %138)
  (define-value %139)
  (define-value %140)
  (define-value %142)
  (define-value %143)
  (define-value %144)
  (define-value %145)
  (define-value %146)
  (define-value %148)
  (define-value %149)
  (define-value %150)
  (define-value %151)
  (define-value %152)
  (define-value %154)
  (define-value %155)
  (define-value %156)
  (define-value %158)
  (define-value %159)
  (define-value %160)
  (define-value %161)
  (define-value %162)
  (define-value %163)
  (define-value %164)
  (define-value %165)
  (define-value %166)
  (define-value %167)
  (define-value %169)
  (define-value %170)
  (define-value %171)
  (define-value %172)
  (define-value %173)
  (define-value %174)
  (define-value %175)
  (define-value %177)
  (define-value %178)
  (define-value %179)
  (define-value %181)
  (define-value %182)
  (define-value %183)
  (define-value %185)
  (define-value %186)
  (define-value %187)
  (define-value %188)
  (define-value %189)
  (define-value %190)
  (define-value %191)
  (define-value %192)
  (define-value %194)
  (define-value %195)
  (define-value %196)
  (define-value %198)
  (define-value %199)
  (define-value %200)
  (define-value %201)
  (define-value %202)
  (define-value %203)
  (define-value %204)
  (define-value %205)
  (define-value %208)
  (define-value %209)
  (define-value %210)
  (define-value %211)
  (define-value %213)
  (define-value %214)
  (define-value %215)
  (define-value %218)
  (define-value %219)
  (define-value %220)
  (define-value %221)
  (define-value %223)
  (define-value %224)
  (define-value %225)
  (define-value %227)
  (define-value %228)
  (define-value %230)
  (define-value %231)
  (define-value %232)
  (define-value %233)
  (define-value %234)
  (define-value %235)
  (define-value %237)
  (define-value %238)
  (define-value %239)
  (define-value %240)
  (define-value %241)
  (define-value %242)
  (define-value %243)
  (define-value %244)
  (define-value %245)
  (define-value %247)
  (define-value %248)
  (define-value %249)
  (define-value %251)
  (define-value %252)
  (define-value %253)
  (define-value %255)
  (define-value %256)
  (define-value %257)
  (define-value %259)
  (define-value %260)
  (define-value %261)
  (define-value %262)
  (define-value %263)
  (define-value %264)
  (define-value %265)
  (define-value %266)
  (define-value %267)
  (define-value %269)
  (define-value %270)
  (define-value %271)
  (define-value %273)
  (define-value %274)
  (define-value %275)
  (define-value %276)
  (define-value %277)
  (define-value %278)
  (define-value %279)
  (define-value %280)
  (define-value %281)
  (define-value %282)
  (define-value %284)
  (define-value %285)
  (define-value %286)
  (define-value %287)
  (define-value %288)
  (define-value %289)
  (define-value %291)
  (define-value %292)
  (define-value %293)
  (define-value %295)
  (define-value %296)
  (define-value %298)
  (define-value %299)
  (define-value %300)
  (define-value %302)
  (define-value %303)
  (define-value %304)
  (define-value %305)
  (define-value %306)
  (define-value %307)
  (define-value %308)
  (define-value %310)
  (define-value %311)
  (define-value %312)
  (define-value %314)
  (define-value %315)
  (define-value %317)
  (define-value %318)
  (define-value %319)
  (define-value %320)
  (define-value %321)
  (define-value %322)
  (define-value %324)
  (define-value %325)
  (define-value %326)
  (define-value %327)
  (define-value %328)
  (define-value %329)
  (define-value %330)
  (define-value %331)
  (define-value %332)
  (define-value %334)
  (define-value %335)
  (define-value %336)
  (define-value %338)
  (define-value %339)
  (define-value %340)
  (define-value %342)
  (define-value %343)
  (define-value %344)
  (define-value %346)
  (define-value %347)
  (define-value %348)
  (define-value %349)
  (define-value %350)
  (define-value %351)
  (define-value %352)
  (define-value %353)
  (define-value %354)
  (define-value %356)
  (define-value %357)
  (define-value %358)
  (define-value %360)
  (define-value %361)
  (define-value %362)
  (define-value %363)
  (define-value %364)
  (define-value %365)
  (define-value %366)
  (define-value %367)
  (define-value %368)
  (define-value %369)
  (define-value %371)
  (define-value %372)
  (define-value %373)
  (define-value %374)
  (define-value %375)
  (define-value %376)
  (define-value %378)
  (define-value %379)
  (define-value %380)
  (define-value %382)
  (define-value %383)
  (define-value %385)
  (define-value %386)
  (define-value %387)
  (define-value %389)
  (define-value %390)
  (define-value %391)
  (define-value %392)
  (define-value %393)
  (define-value %394)
  (define-value %395)
  (define-value %397)
  (define-value %398)
  (define-value %399)
  (define-value %401)
  (define-value %402)
  (define-value %404)
  (define-value %405)
  (define-value %406)
  (define-value %407)
  (define-value %408)
  (define-value %409)
  (define-value %411)
  (define-value %412)
  (define-value %413)
  (define-value %414)
  (define-value %415)
  (define-value %416)
  (define-value %417)
  (define-value %418)
  (define-value %419)
  (define-value %421)
  (define-value %422)
  (define-value %423)
  (define-value %425)
  (define-value %426)
  (define-value %427)
  (define-value %429)
  (define-value %430)
  (define-value %431)
  (define-value %433)
  (define-value %434)
  (define-value %435)
  (define-value %436)
  (define-value %437)
  (define-value %438)
  (define-value %439)
  (define-value %440)
  (define-value %441)
  (define-value %443)
  (define-value %444)
  (define-value %445)
  (define-value %447)
  (define-value %448)
  (define-value %449)
  (define-value %450)
  (define-value %451)
  (define-value %452)
  (define-value %453)
  (define-value %454)
  (define-value %455)
  (define-value %456)
  (define-value %458)
  (define-value %459)
  (define-value %460)
  (define-value %461)
  (define-value %462)
  (define-value %463)
  (define-value %465)
  (define-value %466)
  (define-value %467)
  (define-value %469)
  (define-value %470)
  (define-value %472)
  (define-value %473)
  (define-value %474)
  (define-value %475)
  (define-value %476)
  (define-value %478)
  (define-value %479)
  (define-value %480)
  (define-value %481)
  (define-value %482)
  (define-value %483)
  (define-value %484)
  (define-value %486)
  (define-value %487)
  (define-value %488)
  (define-value %490)
  (define-value %492)
  (define-value %493)
  (define-value %494)
  (define-value %495)
  (define-value %497)
  (define-value %498)
  (define-value %499)
  (define-value %501)
  (define-value %502)
  (define-value %503)
  (define-value %504)
  (define-value %505)
  (define-value %506)
  (define-value %507)
  (define-value %508)
  (define-value %509)
  (define-value %510)
  (define-value %511)
  (define-value %512)
  (define-value %513)
  (define-value %514)
  (define-value %515)
  (define-value %516)
  (define-value %517)
  (define-value %518)
  (define-value %520)
  (define-value %521)
  (define-value %522)
  (define-value %523)
  (define-value %524)
  (define-value %525)
  (define-value %527)
  (define-value %528)
  (define-value %529)
  (define-value %531)
  (define-value %533)
  (define-value %534)
  (define-value %535)
  (define-value %536)
  (define-value %538)
  (define-value %540)
  (define-value %541)
  (define-value %542)
  (define-value %543)
  (define-value %544)
  (define-value %545)
  (define-value %546)
  (define-value %547)
  (define-value %548)
  (define-value %549)
  (define-value %550)
  (define-value %552)
  (define-value %553)
  (define-value %554)
  (define-value %555)
  (define-value %556)
  (define-value %557)
  (define-value %558)
  (define-value %559)
  (define-value %561)
  (define-value %563)
  (define-value %564)
  (define-value %565)
  (define-value %566)
  (define-value %567)
  (define-value %568)
  (define-value %569)
  (define-value %570)
  (define-value %571)
  (define-value %572)
  (define-value %573)
  (define-value %574)
  (define-value %576)
  (define-value %577)
  (define-value %579)
  (define-value %580)
  (define-value %581)
  (define-value %582)
  (define-value %583)
  (define-value %584)
  (define-value %585)
  (define-value %586)
  (define-value %587)
  (define-value %588)
  (define-value %589)
  (define-value %591)
  (define-value %592)
  (define-value %593)
  (define-value %594)
  (define-value %595)
  (define-value %596)
  (define-value %597)
  (define-value %599)
  (define-value %600)
  (define-value %602)
  (define-value %604)
  (define-value %605)
  (define-value %606)
  (define-value %608)
  (define-value %609)
  (define-value %610)
  (define-value %612)
  (define-value %613)
  (define-value %614)
  (define-value %615)
  (define-value %616)
  (define-value %617)
  (define-value %618)
  (define-value %619)
  (define-value %620)
  (define-value %621)
  (define-value %622)
  (define-value %623)
  (define-value %624)
  (define-value %625)
  (define-value %626)
  (define-value %627)
  (define-value %628)
  (define-value %629)
  (define-value %630)
  (define-value %632)
  (define-value %633)
  (define-value %634)
  (define-value %635)
  (define-value %636)
  (define-value %637)
  (define-value %639)
  (define-value %640)
  (define-value %641)
  (define-value %643)
  (define-value %645)
  (define-value %646)
  (define-value %647)
  (define-value %649)
  (define-value %651)
  (define-value %652)
  (define-value %653)
  (define-value %654)
  (define-value %655)
  (define-value %656)
  (define-value %657)
  (define-value %658)
  (define-value %659)
  (define-value %660)
  (define-value %661)
  (define-value %663)
  (define-value %664)
  (define-value %665)
  (define-value %666)
  (define-value %667)
  (define-value %668)
  (define-value %669)
  (define-value %670)
  (define-value %671)
  (define-value %673)
  (define-value %675)
  (define-value %676)
  (define-value %677)
  (define-value %678)
  (define-value %679)
  (define-value %680)
  (define-value %681)
  (define-value %682)
  (define-value %683)
  (define-value %684)
  (define-value %685)
  (define-value %686)
  (define-value %688)
  (define-value %689)
  (define-value %691)
  (define-value %692)
  (define-value %693)
  (define-value %694)
  (define-value %695)
  (define-value %696)
  (define-value %697)
  (define-value %698)
  (define-value %699)
  (define-value %700)
  (define-value %701)
  (define-value %703)
  (define-value %704)
  (define-value %705)
  (define-value %706)
  (define-value %707)
  (define-value %708)
  (define-value %709)
  (define-value %711)
  (define-value %712)
  (define-value %714)
  (define-value %716)
  (define-value %717)
  (define-value %718)
  (define-value %720)
  (define-value %721)
  (define-value %722)
  (define-value %723)
  (define-value %724)
  (define-value %725)
  (define-value %726)
  (define-value %727)
  (define-value %728)
  (define-value %729)
  (define-value %730)
  (define-value %731)
  (define-value %732)
  (define-value %733)
  (define-value %734)
  (define-value %735)
  (define-value %737)
  (define-value %738)
  (define-value %739)
  (define-value %740)
  (define-value %741)
  (define-value %742)
  (define-value %743)
  (define-value %745)
  (define-value %746)
  (define-value %747)
  (define-value %748)
  (define-value %749)
  (define-value %750)
  (define-value %752)
  (define-value %753)
  (define-value %755)
  (define-value %757)
  (define-value %758)
  (define-value %759)
  (define-value %761)
  (define-value %762)
  (define-value %763)
  (define-value %764)
  (define-value %765)
  (define-value %766)
  (define-value %767)
  (define-value %768)
  (define-value %769)
  (define-value %770)
  (define-value %771)
  (define-value %773)
  (define-value %774)
  (define-value %775)
  (define-value %776)
  (define-value %777)
  (define-value %778)
  (define-value %779)
  (define-value %780)
  (define-value %782)
  (define-value %784)
  (define-value %785)
  (define-value %786)
  (define-value %787)
  (define-value %788)
  (define-value %789)
  (define-value %790)
  (define-value %791)
  (define-value %792)
  (define-value %793)
  (define-value %794)
  (define-value %795)
  (define-value %796)
  (define-value %798)
  (define-value %799)
  (define-value %801)
  (define-value %802)
  (define-value %803)
  (define-value %804)
  (define-value %805)
  (define-value %806)
  (define-value %807)
  (define-value %808)
  (define-value %809)
  (define-value %810)
  (define-value %811)
  (define-value %813)
  (define-value %814)
  (define-value %815)
  (define-value %816)
  (define-value %817)
  (define-value %818)
  (define-value %819)
  (define-value %821)
  (define-value %822)
  (define-value %825)
  (define-value %826)
  (define-value %827)
  (define-value %828)
  (define-value %830)
  (define-value %831)
  (define-value %832)
  (define-value %833)
  (define-value %834)
  (define-value %835)
  (define-value %836)
  (define-value %837)
  (define-value %838)
  (define-value %839)
  (define-value %840)
  (define-value %841)
  (define-value %842)
  (define-value %843)
  (define-value %844)
  (define-value %845)
  (define-value %847)
  (define-value %848)
  (define-value %849)
  (define-value %850)
  (define-value %851)
  (define-value %852)
  (define-value %853)
  (define-value %854)
  (define-value %856)
  (define-value %857)
  (define-value %858)
  (define-value %859)
  (define-value %860)
  (define-value %861)
  (define-value %862)
  (define-value %863)
  (define-value %864)
  (define-value %865)
  (define-value %866)
  (define-value %867)
  (define-value %868)
  (define-value %869)
  (define-value %870)
  (define-value %872)
  (define-value %873)
  (define-value %875)
  (define-value %877)
  (define-value %878)
  (define-value %879)
  (define-value %880)
  (define-value %882)
  (define-value %883)
  (define-value %884)
  (define-value %886)
  (define-value %887)
  (define-value %888)
  (define-value %890)
  (define-value %891)
  (define-value %892)
  (define-value %893)
  (define-value %894)
  (define-value %895)
  (define-value %896)
  (define-value %897)
  (define-value %898)
  (define-value %899)
  (define-value %901)
  (define-value %902)
  (define-value %903)
  (define-value %904)
  (define-value %905)
  (define-value %906)
  (define-value %907)
  (define-value %909)
  (define-value %910)
  (define-value %911)
  (define-value %913)
  (define-value %914)
  (define-value %915)
  (define-value %916)
  (define-value %918)
  (define-value %919)
  (define-value %920)
  (define-value %921)
  (define-value %922)
  (define-value %923)
  (define-value %924)
  (define-value %926)
  (define-value %927)
  (define-value %928)
  (define-value %930)
  (define-value %931)
  (define-value %932)
  (define-value %934)
  (define-value %936)
  (define-value %937)
  (define-value %938)
  (define-value %939)
  (define-value %940)
  (define-value %941)
  (define-value %942)
  (define-value %943)
  (define-value %944)
  (define-value %945)
  (define-value %946)
  (define-value %947)
  (define-value %948)
  (define-value %949)
  (define-value %950)
  (define-value %951)
  (define-value %952)
  (define-value %953)
  (define-value %954)
  (define-value %955)
  (define-value %957)
  (define-value %958)
  (define-value %959)
  (define-value %960)
  (define-value %961)
  (define-value %962)
  (define-value %963)
  (define-value %964)
  (define-value %965)
  (define-value %966)
  (define-value %967)
  (define-value %968)
  (define-value %969)
  (define-value %970)
  (define-value %971)
  (define-value %973)
  (define-value %974)
  (define-value %976)
  (define-value %977)
  (define-value %979)
  (define-value %980)
  (define-value %981)
  (define-value %982)
  (define-value %983)
  (define-value %984)
  (define-value %987)
  (define-value %988)
  (define-value %989)
  (define-value %991)
  (define-value %992)
  (define-value %993)
  (define-value %994)
  (define-value %995)
  (define-value %996)
  (define-value %997)
  (define-value %998)
  (define-value %999)
  (define-value %1001)
  (define-value %1002)
  (define-value %1003)
  (define-value %1004)
  (define-value %1006)
  (define-value %1007)
  (define-value %1008)
  (define-value %1011)
  (define-value %1012)
  (define-value %1013)
  (define-value %1014)
  (define-value %1015)
  (define-value %1017)
  (define-value %1018)
  (define-value %1019)
  (define-value %1021)
  (define-value %1022)
  (define-value %1023)
  (define-value %1024)
  (define-value %1027)
  (define-value %1028)
  (define-value %1029)
  (define-value %1031)
  (define-value %1032)
  (define-value %1033)
  (define-value %1036)
  (define-value %1037)
  (define-value %1038)
  (define-value %1040)
  (define-value %1041)
  (define-value %1042)
  (define-value %1044)
  (define-value %1045)
  (define-value %1047)
  (define-value %1048)
  (define-value %1049)
  (define-value %1050)
  (define-value %1051)
  (define-value %1053)
  (define-value %1054)
  (define-value %1055)
  (define-value %1057)
  (define-value %1058)
  (define-value %1059)
  (define-value %1060)
  (define-value %1061)
  (define-value %1062)
  (define-value %1064)
  (define-value %1065)
  (define-value %1066)
  (define-value %1068)
  (define-value %1069)
  (define-value %1070)
  (define-value %1072)
  (define-value %1073)
  (define-value %1074)
  (define-value %1075)
  (define-value %1076)
  (define-value %1078)
  (define-value %1079)
  (define-value %1080)
  (define-value %1081)
  (define-value %1082)
  (define-value %1084)
  (define-value %1085)
  (define-value %1086)
  (define-value %1088)
  (define-value %1089)
  (define-value %1090)
  (define-value %1091)
  (define-value %1092)
  (define-value %1093)
  (define-value %1094)
  (define-value %1095)
  (define-value %1096)
  (define-value %1097)
  (define-value %1099)
  (define-value %1100)
  (define-value %1101)
  (define-value %1102)
  (define-value %1103)
  (define-value %1104)
  (define-value %1105)
  (define-value %1107)
  (define-value %1108)
  (define-value %1109)
  (define-value %1111)
  (define-value %1112)
  (define-value %1113)
  (define-value %1114)
  (define-value %1115)
  (define-value %1116)
  (define-value %1117)
  (define-value %1118)
  (define-value %1120)
  (define-value %1121)
  (define-value %1123)
  (define-value %1124)
  (define-value %1126)
  (define-value %1127)
  (define-value %1128)
  (define-value %1129)
  (define-value %1130)
  (define-value %1131)
  (define-value %1133)
  (define-value %1134)
  (define-value %1135)
  (define-value %1136)
  (define-value %1137)
  (define-value %1138)
  (define-value %1139)
  (define-value %1140)
  (define-value %1141)
  (define-value %1143)
  (define-value %1144)
  (define-value %1146)
  (define-value %1147)
  (define-value %1148)
  (define-value %1150)
  (define-value %1151)
  (define-value %1152)
  (define-value %1154)
  (define-value %1155)
  (define-value %1156)
  (define-value %1157)
  (define-value %1158)
  (define-value %1159)
  (define-value %1160)
  (define-value %1161)
  (define-value %1162)
  (define-value %1164)
  (define-value %1165)
  (define-value %1166)
  (define-value %1168)
  (define-value %1169)
  (define-value %1170)
  (define-value %1171)
  (define-value %1172)
  (define-value %1173)
  (define-value %1174)
  (define-value %1175)
  (define-value %1176)
  (define-value %1177)
  (define-value %1179)
  (define-value %1180)
  (define-value %1181)
  (define-value %1182)
  (define-value %1183)
  (define-value %1184)
  (define-value %1186)
  (define-value %1187)
  (define-value %1189)
  (define-value %1190)
  (define-value %1192)
  (define-value %1193)
  (define-value %1194)
  (define-value %1195)
  (define-value %1196)
  (define-value %1197)
  (define-value %1199)
  (define-value %1200)
  (define-value %1201)
  (define-value %1202)
  (define-value %1203)
  (define-value %1204)
  (define-value %1205)
  (define-value %1206)
  (define-value %1207)
  (define-value %1208)
  (define-value %1210)
  (define-value %1211)
  (define-value %1213)
  (define-value %1214)
  (define-value %1215)
  (define-value %1216)
  (define-value %1217)
  (define-value %1218)
  (define-value %1221)
  (define-value %1222)
  (define-value %1223)
  (define-value %1225)
  (define-value %1226)
  (define-value %1227)
  (define-value %1228)
  (define-value %1229)
  (define-value %1230)
  (define-value %1231)
  (define-value %1232)
  (define-value %1233)
  (define-value %1235)
  (define-value %1236)
  (define-value %1237)
  (define-value %1238)
  (define-value %1240)
  (define-value %1241)
  (define-value %1242)
  (define-value %1245)
  (define-value %1246)
  (define-value %1247)
  (define-value %1248)
  (define-value %1249)
  (define-value %1251)
  (define-value %1252)
  (define-value %1253)
  (define-value %1255)
  (define-value %1256)
  (define-value %1257)
  (define-value %1258)
  (define-value %1259)
  (define-value %1260)
  (define-value %1262)
  (define-value %1263)
  (define-value %1264)
  (define-value %1265)
  (define-value %1266)
  (define-value %1267)
  (define-value %1268)
  (define-value %1270)
  (define-value %1271)
  (define-value %1273)
  (define-value %1274)
  (define-value %1276)
  (define-value %1277)
  (define-value %1278)
  (define-value %1279)
  (define-value %1280)
  (define-value %1281)
  (define-value %1283)
  (define-value %1284)
  (define-value %1285)
  (define-value %1286)
  (define-value %1287)
  (define-value %1288)
  (define-value %1289)
  (define-value %1290)
  (define-value %1291)
  (define-value %1293)
  (define-value %1294)
  (define-value %1296)
  (define-value %1297)
  (define-value %1298)
  (define-value %1300)
  (define-value %1301)
  (define-value %1302)
  (define-value %1304)
  (define-value %1305)
  (define-value %1306)
  (define-value %1307)
  (define-value %1308)
  (define-value %1309)
  (define-value %1310)
  (define-value %1311)
  (define-value %1312)
  (define-value %1314)
  (define-value %1315)
  (define-value %1316)
  (define-value %1318)
  (define-value %1319)
  (define-value %1320)
  (define-value %1321)
  (define-value %1322)
  (define-value %1323)
  (define-value %1324)
  (define-value %1325)
  (define-value %1326)
  (define-value %1327)
  (define-value %1329)
  (define-value %1330)
  (define-value %1331)
  (define-value %1332)
  (define-value %1333)
  (define-value %1334)
  (define-value %1336)
  (define-value %1337)
  (define-value %1339)
  (define-value %1340)
  (define-value %1342)
  (define-value %1343)
  (define-value %1344)
  (define-value %1345)
  (define-value %1346)
  (define-value %1347)
  (define-value %1349)
  (define-value %1350)
  (define-value %1351)
  (define-value %1352)
  (define-value %1353)
  (define-value %1354)
  (define-value %1355)
  (define-value %1356)
  (define-value %1357)
  (define-value %1359)
  (define-value %1360)
  (define-value %1362)
  (define-value %1363)
  (define-value %1364)
  (define-value %1366)
  (define-value %1367)
  (define-value %1368)
  (define-value %1370)
  (define-value %1371)
  (define-value %1372)
  (define-value %1373)
  (define-value %1374)
  (define-value %1375)
  (define-value %1376)
  (define-value %1377)
  (define-value %1378)
  (define-value %1380)
  (define-value %1381)
  (define-value %1382)
  (define-value %1384)
  (define-value %1385)
  (define-value %1386)
  (define-value %1387)
  (define-value %1388)
  (define-value %1389)
  (define-value %1390)
  (define-value %1391)
  (define-value %1392)
  (define-value %1393)
  (define-value %1395)
  (define-value %1396)
  (define-value %1397)
  (define-value %1398)
  (define-value %1399)
  (define-value %1400)
  (define-value %1402)
  (define-value %1403)
  (define-value %1405)
  (define-value %1406)
  (define-value %1408)
  (define-value %1409)
  (define-value %1410)
  (define-value %1411)
  (define-value %1412)
  (define-value %1413)
  (define-value %1415)
  (define-value %1416)
  (define-value %1417)
  (define-value %1418)
  (define-value %1419)
  (define-value %1420)
  (define-value %1421)
  (define-value %1422)
  (define-value %1423)
  (define-value %1425)
  (define-value %1426)
  (define-value %1428)
  (define-value %1429)
  (define-value %1430)
  (define-value %1432)
  (define-value %1433)
  (define-value %1434)
  (define-value %1436)
  (define-value %1437)
  (define-value %1438)
  (define-value %1439)
  (define-value %1440)
  (define-value %1441)
  (define-value %1442)
  (define-value %1443)
  (define-value %1444)
  (define-value %1446)
  (define-value %1447)
  (define-value %1448)
  (define-value %1450)
  (define-value %1451)
  (define-value %1452)
  (define-value %1453)
  (define-value %1454)
  (define-value %1455)
  (define-value %1456)
  (define-value %1457)
  (define-value %1458)
  (define-value %1459)
  (define-value %1461)
  (define-value %1462)
  (define-value %1463)
  (define-value %1464)
  (define-value %1465)
  (define-value %1466)
  (define-value %1468)
  (define-value %1469)
  (define-value %1471)
  (define-value %1472)
  (define-value %1474)
  (define-value %1475)
  (define-value %1476)
  (define-value %1477)
  (define-value %1478)
  (define-value %1479)
  (define-value %1481)
  (define-value %1482)
  (define-value %1483)
  (define-value %1484)
  (define-value %1485)
  (define-value %1486)
  (define-value %1487)
  (define-value %1488)
  (define-value %1489)
  (define-value %1491)
  (define-value %1492)
  (define-value %1494)
  (define-value %1495)
  (define-value %1496)
  (define-value %1498)
  (define-value %1499)
  (define-value %1500)
  (define-value %1502)
  (define-value %1503)
  (define-value %1504)
  (define-value %1505)
  (define-value %1506)
  (define-value %1507)
  (define-value %1508)
  (define-value %1509)
  (define-value %1510)
  (define-value %1512)
  (define-value %1513)
  (define-value %1514)
  (define-value %1516)
  (define-value %1517)
  (define-value %1518)
  (define-value %1519)
  (define-value %1520)
  (define-value %1521)
  (define-value %1522)
  (define-value %1523)
  (define-value %1524)
  (define-value %1525)
  (define-value %1527)
  (define-value %1528)
  (define-value %1529)
  (define-value %1530)
  (define-value %1531)
  (define-value %1532)
  (define-value %1534)
  (define-value %1535)
  (define-value %1537)
  (define-value %1538)
  (define-value %1540)
  (define-value %1541)
  (define-value %1542)
  (define-value %1543)
  (define-value %1544)
  (define-value %1545)
  (define-value %1547)
  (define-value %1548)
  (define-value %1549)
  (define-value %1550)
  (define-value %1551)
  (define-value %1552)
  (define-value %1553)
  (define-value %1554)
  (define-value %1555)
  (define-value %1557)
  (define-value %1558)
  (define-value %1560)
  (define-value %1561)
  (define-value %1562)
  (define-value %1564)
  (define-value %1565)
  (define-value %1566)
  (define-value %1568)
  (define-value %1569)
  (define-value %1570)
  (define-value %1571)
  (define-value %1572)
  (define-value %1573)
  (define-value %1574)
  (define-value %1575)
  (define-value %1576)
  (define-value %1578)
  (define-value %1579)
  (define-value %1580)
  (define-value %1582)
  (define-value %1583)
  (define-value %1584)
  (define-value %1585)
  (define-value %1586)
  (define-value %1587)
  (define-value %1588)
  (define-value %1589)
  (define-value %1590)
  (define-value %1591)
  (define-value %1593)
  (define-value %1594)
  (define-value %1595)
  (define-value %1596)
  (define-value %1597)
  (define-value %1598)
  (define-value %1600)
  (define-value %1601)
  (define-value %1603)
  (define-value %1604)
  (define-value %1606)
  (define-value %1607)
  (define-value %1608)
  (define-value %1609)
  (define-value %1610)
  (define-value %1611)
  (define-value %1613)
  (define-value %1614)
  (define-value %1615)
  (define-value %1616)
  (define-value %1617)
  (define-value %1618)
  (define-value %1619)
  (define-value %1620)
  (define-value %1621)
  (define-value %1623)
  (define-value %1624)
  (define-value %1626)
  (define-value %1627)
  (define-value %1628)
  (define-value %1630)
  (define-value %1631)
  (define-value %1632)
  (define-value %1634)
  (define-value %1635)
  (define-value %1636)
  (define-value %1637)
  (define-value %1638)
  (define-value %1639)
  (define-value %1640)
  (define-value %1641)
  (define-value %1642)
  (define-value %1644)
  (define-value %1645)
  (define-value %1646)
  (define-value %1648)
  (define-value %1649)
  (define-value %1650)
  (define-value %1651)
  (define-value %1652)
  (define-value %1653)
  (define-value %1654)
  (define-value %1655)
  (define-value %1656)
  (define-value %1657)
  (define-value %1659)
  (define-value %1660)
  (define-value %1661)
  (define-value %1662)
  (define-value %1663)
  (define-value %1664)
  (define-value %1666)
  (define-value %1667)
  (define-value %1669)
  (define-value %1670)
  (define-value %1671)
  (define-value %1675)
  (define-value %1676)
  (define-value %1677)
  (define-value %1678)
  (define-value %1680)
  (define-value %1681)
  (define-value %1682)
  (define-value %1684)
  (define-value %1685)
  (define-value %1686)
  (define-value %1688)
  (define-value %1689)
  (define-value %1690)
  (define-value %1691)
  (define-value %1692)
  (define-value %1693)
  (define-value %1694)
  (define-value %1695)
  (define-value %1696)
  (define-value %1697)
  (define-value %1699)
  (define-value %1700)
  (define-value %1701)
  (define-value %1702)
  (define-value %1703)
  (define-value %1704)
  (define-value %1705)
  (define-value %1707)
  (define-value %1708)
  (define-value %1709)
  (define-value %1711)
  (define-value %1713)
  (define-value %1714)
  (define-value %1715)
  (define-value %1716)
  (define-value %1717)
  (define-value %1718)
  (define-value %1720)
  (define-value %1721)
  (define-value %1722)
  (define-value %1723)
  (define-value %1724)
  (define-value %1725)
  (define-value %1726)
  (define-value %1727)
  (define-value %1729)
  (define-value %1730)
  (define-value %1731)
  (define-value %1732)
  (define-value %1733)
  (define-value %1734)
  (define-value %1735)
  (define-value %1737)
  (define-value %1738)
  (define-value %1739)
  (define-value %1740)
  (define-value %1741)
  (define-value %1742)
  (define-value %1744)
  (define-value %1745)
  (define-value %1747)
  (define-value %1748)
  (define-value %1749)
  (define-value %1750)
  (define-value %1751)
  (define-value %1752)
  (define-value %1754)
  (define-value %1755)
  (define-value %1756)
  (define-value %1758)
  (define-value %1759)
  (define-value %1760)
  (define-value %1761)
  (define-value %1762)
  (define-value %1763)
  (define-value %1764)
  (define-value %1766)
  (define-value %1767)
  (define-value %1768)
  (define-value %1770)
  (define-value %1773)
  (define-value %1774)
  (define-value %1775)
  (define-value %1776)
  (define-value %1778)
  (define-value %1779)
  (define-value %1780)
  (define-value %1781)
  (define-value %1782)
  (define-value %1783)
  (define-value %1784)
  (define-value %1785)
  (define-value %1786)
  (define-value %1787)
  (define-value %1788)
  (define-value %1789)
  (define-value %1790)
  (define-value %1791)
  (define-value %1792)
  (define-value %1793)
  (define-value %1795)
  (define-value %1796)
  (define-value %1797)
  (define-value %1798)
  (define-value %1799)
  (define-value %1800)
  (define-value %1801)
  (define-value %1802)
  (define-value %1804)
  (define-value %1805)
  (define-value %1806)
  (define-value %1807)
  (define-value %1808)
  (define-value %1809)
  (define-value %1810)
  (define-value %1811)
  (define-value %1812)
  (define-value %1813)
  (define-value %1814)
  (define-value %1815)
  (define-value %1816)
  (define-value %1817)
  (define-value %1818)
  (define-value %1820)
  (define-value %1821)
  (define-value %1823)
  (define-value %1824)
  (define-value %1825)
  (define-value %1826)
  (define-value %1828)
  (define-value %1829)
  (define-value %1830)
  (define-value %1832)
  (define-value %1833)
  (define-value %1834)
  (define-value %1836)
  (define-value %1837)
  (define-value %1838)
  (define-value %1839)
  (define-value %1840)
  (define-value %1841)
  (define-value %1842)
  (define-value %1843)
  (define-value %1844)
  (define-value %1845)
  (define-value %1847)
  (define-value %1848)
  (define-value %1849)
  (define-value %1850)
  (define-value %1851)
  (define-value %1852)
  (define-value %1853)
  (define-value %1855)
  (define-value %1856)
  (define-value %1857)
  (define-value %1859)
  (define-value %1861)
  (define-value %1862)
  (define-value %1863)
  (define-value %1864)
  (define-value %1865)
  (define-value %1866)
  (define-value %1867)
  (define-value %1868)
  (define-value %1869)
  (define-value %1871)
  (define-value %1872)
  (define-value %1873)
  (define-value %1875)
  (define-value %1876)
  (define-value %1877)
  (define-value %1878)
  (define-value %1879)
  (define-value %1880)
  (define-value %1881)
  (define-value %1882)
  (define-value %1884)
  (define-value %1885)
  (define-value %1886)
  (define-value %1888)
  (define-value %1889)
  (define-value %1890)
  (define-value %1891)
  (define-value %1892)
  (define-value %1893)
  (define-value %1895)
  (define-value %1896)
  (define-value %1897)
  (define-value %1899)
  (define-value %1900)
  (define-value %1901)
  (define-value %1902)
  (define-value %1903)
  (define-value %1904)
  (define-value %1906)
  (define-value %1907)
  (define-value %1908)
  (define-value %1910)
  (define-value %1911)
  (define-value %1912)
  (define-value %1913)
  (define-value %1914)
  (define-value %1915)
  (define-value %1917)
  (define-value %1918)
  (define-value %1919)
  (define-value %1921)
  (define-value %1922)
  (define-value %1923)
  (define-value %1924)
  (define-value %1925)
  (define-value %1926)
  (define-value %1927)
  (define-value %1928)
  (define-value %1929)
  (define-value %1931)
  (define-value %1932)
  (define-value %1934)
  (define-value %1935)
  (define-value %1936)
  (define-value %1937)
  (define-value %1938)
  (define-value %1939)
  (define-value %1940)
  (define-value %1942)
  (define-value %1943)
  (define-value %1944)
  (define-value %1946)
  (define-value %1947)
  (define-value %1948)
  (define-value %1949)
  (define-value %1950)
  (define-value %1951)
  (define-value %1952)
  (define-value %1953)
  (define-value %1955)
  (define-value %1956)
  (define-value %1957)
  (define-value %1959)
  (define-value %1960)
  (define-value %1961)
  (define-value %1962)
  (define-value %1963)
  (define-value %1964)
  (define-value %1965)
  (define-value %1967)
  (define-value %1968)
  (define-value %1969)
  (define-value %1971)
  (define-value %1972)
  (define-value %1973)
  (define-value %1974)
  (define-value %1976)
  (define-value %1977)
  (define-value %1978)
  (define-value %1980)
  (define-value %1981)
  (define-value %1982)
  (define-value %1983)
  (define-value %1984)
  (define-value %1985)
  (define-value %1986)
  (define-value %1987)
  (define-value %1988)
  (define-value %1989)
  (define-value %1990)
  (define-value %1991)
  (define-value %1993)
  (define-value %1994)
  (define-value %1995)
  (define-value %1997)
  (define-value %1998)
  (define-value %1999)
  (define-value %2000)
  (define-value %2001)
  (define-value %2002)
  (define-value %2003)
  (define-value %2004)
  (define-value %2005)
  (define-value %2006)
  (define-value %2007)
  (define-value %2008)
  (define-value %2009)
  (define-value %2011)
  (define-value %2012)
  (define-value %2013)
  (define-value %2014)
  (define-value %2015)
  (define-value %2016)
  (define-value %2018)
  (define-value %2019)
  (define-value %2020)
  (define-value %2021)
  (define-value %2022)
  (define-value %2024)
  (define-value %2027)
  (define-value %2028)
  (define-value %2029)
  (define-value %2030)
  (define-value %2032)
  (define-value %2033)
  (define-value %2034)
  (define-value %2035)
  (define-value %2036)
  (define-value %2037)
  (define-value %2038)
  (define-value %2039)
  (define-value %2040)
  (define-value %2041)
  (define-value %2042)
  (define-value %2043)
  (define-value %2044)
  (define-value %2045)
  (define-value %2046)
  (define-value %2047)
  (define-value %2049)
  (define-value %2050)
  (define-value %2051)
  (define-value %2052)
  (define-value %2053)
  (define-value %2054)
  (define-value %2055)
  (define-value %2056)
  (define-value %2058)
  (define-value %2059)
  (define-value %2060)
  (define-value %2061)
  (define-value %2062)
  (define-value %2063)
  (define-value %2064)
  (define-value %2065)
  (define-value %2066)
  (define-value %2067)
  (define-value %2068)
  (define-value %2069)
  (define-value %2070)
  (define-value %2071)
  (define-value %2072)
  (define-value %2074)
  (define-value %2075)
  (define-value %2077)
  (define-value %2078)
  (define-value %2080)
  (define-value %2081)
  (define-value %2082)
  (define-value %2083)
  (define-value %2084)
  (define-value %2086)
  (define-value %2087)
  (define-value %2088)
  (define-value %2090)
  (define-value %2091)
  (define-value %2092)
  (define-value %2093)
  (define-value %2095)
  (define-value %2096)
  (define-value %2097)
  (define-value %2098)
  (define-value %2099)
  (define-value %2100)
  (define-value %2101)
  (define-value %2103)
  (define-value %2104)
  (define-value %2105)
  (define-value %2106)
  (define-value %2108)
  (define-value %2109)
  (define-value %2110)
  (define-value %2111)
  (define-value %2112)
  (define-value %2113)
  (define-value %2114)
  (define-value %2115)
  (define-value %2116)
  (define-value %2117)
  (define-value %2118)
  (define-value %2119)
  (define-value %2120)
  (define-value %2121)
  (define-value %2122)
  (define-value %2124)
  (define-value %2125)
  (define-value %2126)
  (define-value %2128)
  (define-value %2129)
  (define-value %2130)
  (define-value %2132)
  (define-value %2133)
  (define-value %2134)
  (define-value %2136)
  (define-value %2137)
  (define-value %2138)
  (define-value %2139)
  (define-value %2140)
  (define-value %2141)
  (define-value %2142)
  (define-value %2143)
  (define-value %2144)
  (define-value %2145)
  (define-value %2147)
  (define-value %2148)
  (define-value %2149)
  (define-value %2150)
  (define-value %2152)
  (define-value %2153)
  (define-value %2154)
  (define-value %2156)
  (define-value %2157)
  (define-value %2158)
  (define-value %2160)
  (define-value %2161)
  (define-value %2162)
  (define-value %2163)
  (define-value %2164)
  (define-value %2165)
  (define-value %2166)
  (define-value %2167)
  (define-value %2168)
  (define-value %2170)
  (define-value %2172)
  (define-value %2173)
  (define-value %2174)
  (define-value %2175)
  (define-value %2176)
  (define-value %2178)
  (define-value %2179)
  (define-value %2181)
  (define-value %2182)
  (define-value %2183)
  (define-value %2184)
  (define-value %2185)
  (define-value %2187)
  (define-value %2188)
  (define-value %2190)
  (define-value %2191)
  (define-value %2192)
  (define-value %2193)
  (define-value %2194)
  (define-value %2196)
  (define-value %2197)
  (define-value %2199)
  (define-value %2200)
  (define-value %2201)
  (define-value %2202)
  (define-value %2203)
  (define-value %2205)
  (define-value %2206)
  (define-value %2208)
  (define-value %2209)
  (define-value %2210)
  (define-value %2211)
  (define-value %2212)
  (define-value %2213)
  (define-value %2215)
  (define-value %2216)
  (define-value %2217)
  (define-value %2219)
  (define-value %2220)
  (define-value %2221)
  (define-value %2222)
  (define-value %2223)
  (define-value %2224)
  (define-value %2225)
  (define-value %2227)
  (define-value %2228)
  (define-value %2230)
  (define-value %2231)
  (define-value %2232)
  (define-value %2233)
  (define-value %2234)
  (define-value %2236)
  (define-value %2237)
  (define-value %2239)
  (define-value %2240)
  (define-value %2241)
  (define-value %2242)
  (define-value %2243)
  (define-value %2245)
  (define-value %2246)
  (define-value %2248)
  (define-value %2249)
  (define-value %2250)
  (define-value %2251)
  (define-value %2252)
  (define-value %2254)
  (define-value %2255)
  (define-value %2257)
  (define-value %2258)
  (define-value %2261)
  (define-value %2262)
  (define-value %2263)
  (define-value %2264)
  (define-value %2265)
  (define-value %2267)
  (define-value %2268)
  (define-value %2269)
  (define-value %2270)
  (define-value %2271)
  (define-value %2272)
  (define-value %2274)
  (define-value %2276)
  (define-value %2277)
  (define-value %2278)
  (define-value %2279)
  (define-value %2281)
  (define-value %2282)
  (define-value %2284)
  (define-value %2285)
  (define-value %2286)
  (define-value %2287)
  (define-value %2288)
  (define-value %2289)
  (define-value %2290)
  (define-value %2291)
  (define-value %2293)
  (define-value %2294)
  (define-value %2296)
  (define-value %2297)
  (define-value %2298)
  (define-value %2299)
  (define-value %2300)
  (define-value %2301)
  (define-value %2302)
  (define-value %2303)
  (define-value %2305)
  (define-value %2307)
  (define-value %2308)
  (define-value %2309)
  (define-value %2310)
  (define-value %2311)
  (define-value %2313)
  (define-value %2315)
  (define-value %2316)
  (define-value %2317)
  (define-value %2318)
  (define-value %2319)
  (define-value %2321)
  (define-value %2322)
  (define-value %2324)
  (define-value %2325)
  (define-value %2326)
  (define-value %2327)
  (define-value %2328)
  (define-value %2329)
  (define-value %2330)
  (define-value %2331)
  (define-value %2333)
  (define-value %2335)
  (define-value %2336)
  (define-value %2337)
  (define-value %2338)
  (define-value %2339)
  (define-value %2341)
  (define-value %2342)
  (define-value %2344)
  (define-value %2345)
  (define-value %2347)
  (define-value %2348)
  (define-value %2350)
  (define-value %2351)
  (define-value %2352)
  (define-value %2353)
  (define-value %2354)
  (define-value %2356)
  (define-value %2357)
  (define-value %2358)
  (define-value %2360)
  (define-value %2361)
  (define-value %2362)
  (define-value %2363)
  (define-value %2365)
  (define-value %2366)
  (define-value %2367)
  (define-value %2368)
  (define-value %2369)
  (define-value %2370)
  (define-value %2371)
  (define-value %2373)
  (define-value %2374)
  (define-value %2375)
  (define-value %2376)
  (define-value %2377)
  (define-value %2378)
  (define-value %2381)
  (define-value %2383)
  (define-value %2384)
  (define-value %2385)
  (define-value %2386)
  (define-value %2387)
  (define-value %2388)
  (define-value %2389)
  (define-value %2391)
  (define-value %2392)
  (define-value %2393)
  (define-value %2394)
  (define-value %2397)
  (define-value %2398)
  (define-value %2399)
  (define-value %2400)
  (define-value %2402)
  (define-value %2403)
  (define-value %2405)
  (define-value %2406)
  (define-value %2407)
  (define-value %2408)
  (define-value %2409)
  (define-value %2412)
  (define-value %2415)
  (define-value %2417)
  (define-value %2418)
  (define-value %2419)
  (define-value %2420)
  (define-value %2421)
  (define-value %2423)
  (define-value %2424)
  (define-value %2425)
  (define-value %2426)
  (define-value %2427)
  (define-value %2429)
  (define-value %2430)
  (define-value %2431)
  (define-value %2432)
  (define-value %2434)
  (define-value %2435)
  (define-value %2436)
  (define-value %2438)
  (define-value %2440)
  (define-value %2441)
  (define-value %2442)
  (define-value %2443)
  (define-value %2444)
  (define-value %2445)
  (define-value %2446)
  (define-value %2447)
  (define-value %2449)
  (define-value %2450)
  (define-value %2451)
  (define-value %2452)
  (define-value %2453)
  (define-value %2454)
  (define-value %2455)
  (define-value %2457)
  (define-value %2458)
  (define-value %2460)
  (define-value %2461)
  (define-value %2462)
  (define-value %2463)
  (define-value %2465)
  (define-value %2466)
  (define-value %2467)
  (define-value %2469)
  (define-value %2471)
  (define-value %2472)
  (define-value %2473)
  (define-value %2474)
  (define-value %2475)
  (define-value %2476)
  (define-value %2477)
  (define-value %2478)
  (define-value %2480)
  (define-value %2481)
  (define-value %2482)
  (define-value %2483)
  (define-value %2484)
  (define-value %2485)
  (define-value %2486)
  (define-value %2488)
  (define-value %2489)
  (define-value %2491)
  (define-value %2492)
  (define-value %2493)
  (define-value %2494)
  (define-value %2495)
  (define-value %2497)
  (define-value %2498)
  (define-value %2499)
  (define-value %2501)
  (define-value %2503)
  (define-value %2504)
  (define-value %2505)
  (define-value %2506)
  (define-value %2507)
  (define-value %2508)
  (define-value %2509)
  (define-value %2510)
  (define-value %2511)
  (define-value %2512)
  (define-value %2513)
  (define-value %2514)
  (define-value %2515)
  (define-value %2517)
  (define-value %2518)
  (define-value %2519)
  (define-value %2520)
  (define-value %2521)
  (define-value %2522)
  (define-value %2523)
  (define-value %2524)
  (define-value %2525)
  (define-value %2526)
  (define-value %2527)
  (define-value %2528)
  (define-value %2530)
  (define-value %2531)
  (define-value %2533)
  (define-value %2534)
  (define-value %2535)
  (define-value %2537)
  (define-value %2539)
  (define-value %2540)
  (define-value %2541)
  (define-value %2542)
  (define-value %2543)
  (define-value %2544)
  (define-value %2545)
  (define-value %2546)
  (define-value %2547)
  (define-value %2548)
  (define-value %2549)
  (define-value %2550)
  (define-value %2551)
  (define-value %2553)
  (define-value %2554)
  (define-value %2556)
  (define-value %2557)
  (define-value %2558)
  (define-value %2559)
  (define-value %2560)
  (define-value %2561)
  (define-value %2562)
  (define-value %2563)
  (define-value %2564)
  (define-value %2565)
  (define-value %2566)
  (define-value %2567)
  (define-value %2568)
  (define-value %2570)
  (define-value %2571)
  (define-value %2572)
  (define-value %2573)
  (define-value %2574)
  (define-value %2575)
  (define-value %2576)
  (define-value %2577)
  (define-value %2578)
  (define-value %2579)
  (define-value %2580)
  (define-value %2581)
  (define-value %2583)
  (define-value %2584)
  (define-value %2586)
  (define-value %2587)
  (define-value %2588)
  (define-value %2590)
  (define-value %2592)
  (define-value %2593)
  (define-value %2594)
  (define-value %2595)
  (define-value %2596)
  (define-value %2597)
  (define-value %2598)
  (define-value %2599)
  (define-value %2600)
  (define-value %2601)
  (define-value %2602)
  (define-value %2603)
  (define-value %2604)
  (define-value %2606)
  (define-value %2607)
  (define-value %2609)
  (define-value %2610)
  (define-value %2611)
  (define-value %2612)
  (define-value %2613)
  (define-value %2614)
  (define-value %2615)
  (define-value %2616)
  (define-value %2617)
  (define-value %2618)
  (define-value %2619)
  (define-value %2620)
  (define-value %2621)
  (define-value %2623)
  (define-value %2624)
  (define-value %2625)
  (define-value %2626)
  (define-value %2627)
  (define-value %2628)
  (define-value %2629)
  (define-value %2630)
  (define-value %2631)
  (define-value %2632)
  (define-value %2633)
  (define-value %2634)
  (define-value %2636)
  (define-value %2637)
  (define-value %2639)
  (define-value %2640)
  (define-value %2641)
  (define-value %2643)
  (define-value %2645)
  (define-value %2646)
  (define-value %2647)
  (define-value %2648)
  (define-value %2649)
  (define-value %2650)
  (define-value %2651)
  (define-value %2652)
  (define-value %2653)
  (define-value %2654)
  (define-value %2655)
  (define-value %2656)
  (define-value %2657)
  (define-value %2659)
  (define-value %2660)
  (define-value %2662)
  (define-value %2663)
  (define-value %2664)
  (define-value %2665)
  (define-value %2666)
  (define-value %2667)
  (define-value %2668)
  (define-value %2669)
  (define-value %2670)
  (define-value %2671)
  (define-value %2672)
  (define-value %2673)
  (define-value %2674)
  (define-value %2676)
  (define-value %2677)
  (define-value %2678)
  (define-value %2679)
  (define-value %2680)
  (define-value %2681)
  (define-value %2682)
  (define-value %2683)
  (define-value %2684)
  (define-value %2685)
  (define-value %2686)
  (define-value %2687)
  (define-value %2689)
  (define-value %2690)
  (define-value %2692)
  (define-value %2693)
  (define-value %2694)
  (define-value %2696)
  (define-value %2698)
  (define-value %2699)
  (define-value %2700)
  (define-value %2701)
  (define-value %2702)
  (define-value %2703)
  (define-value %2704)
  (define-value %2705)
  (define-value %2706)
  (define-value %2707)
  (define-value %2708)
  (define-value %2709)
  (define-value %2710)
  (define-value %2712)
  (define-value %2713)
  (define-value %2715)
  (define-value %2716)
  (define-value %2717)
  (define-value %2718)
  (define-value %2719)
  (define-value %2720)
  (define-value %2721)
  (define-value %2722)
  (define-value %2723)
  (define-value %2724)
  (define-value %2725)
  (define-value %2726)
  (define-value %2727)
  (define-value %2729)
  (define-value %2730)
  (define-value %2731)
  (define-value %2732)
  (define-value %2733)
  (define-value %2734)
  (define-value %2735)
  (define-value %2736)
  (define-value %2737)
  (define-value %2738)
  (define-value %2739)
  (define-value %2740)
  (define-value %2742)
  (define-value %2743)
  (define-value %2745)
  (define-value %2746)
  (define-value %2747)
  (define-value %2749)
  (define-value %2751)
  (define-value %2752)
  (define-value %2753)
  (define-value %2754)
  (define-value %2755)
  (define-value %2756)
  (define-value %2757)
  (define-value %2758)
  (define-value %2759)
  (define-value %2760)
  (define-value %2761)
  (define-value %2762)
  (define-value %2763)
  (define-value %2765)
  (define-value %2766)
  (define-value %2767)
  (define-value %2768)
  (define-value %2769)
  (define-value %2770)
  (define-value %2771)
  (define-value %2772)
  (define-value %2773)
  (define-value %2774)
  (define-value %2775)
  (define-value %2776)
  (define-value %2778)
  (define-value %2779)
  (define-value %2781)
  (define-value %2782)
  (define-value %2783)
  (define-value %2785)
  (define-value %2787)
  (define-value %2788)
  (define-value %2789)
  (define-value %2790)
  (define-value %2791)
  (define-value %2792)
  (define-value %2793)
  (define-value %2794)
  (define-value %2795)
  (define-value %2796)
  (define-value %2797)
  (define-value %2798)
  (define-value %2799)
  (define-value %2801)
  (define-value %2802)
  (define-value %2804)
  (define-value %2805)
  (define-value %2806)
  (define-value %2807)
  (define-value %2808)
  (define-value %2809)
  (define-value %2810)
  (define-value %2811)
  (define-value %2812)
  (define-value %2813)
  (define-value %2814)
  (define-value %2815)
  (define-value %2816)
  (define-value %2818)
  (define-value %2819)
  (define-value %2820)
  (define-value %2821)
  (define-value %2822)
  (define-value %2823)
  (define-value %2824)
  (define-value %2825)
  (define-value %2826)
  (define-value %2827)
  (define-value %2828)
  (define-value %2829)
  (define-value %2831)
  (define-value %2832)
  (define-value %2834)
  (define-value %2835)
  (define-value %2836)
  (define-value %2838)
  (define-value %2840)
  (define-value %2841)
  (define-value %2842)
  (define-value %2843)
  (define-value %2844)
  (define-value %2845)
  (define-value %2846)
  (define-value %2847)
  (define-value %2848)
  (define-value %2849)
  (define-value %2850)
  (define-value %2851)
  (define-value %2852)
  (define-value %2854)
  (define-value %2855)
  (define-value %2857)
  (define-value %2858)
  (define-value %2859)
  (define-value %2860)
  (define-value %2861)
  (define-value %2862)
  (define-value %2863)
  (define-value %2864)
  (define-value %2865)
  (define-value %2866)
  (define-value %2867)
  (define-value %2868)
  (define-value %2869)
  (define-value %2871)
  (define-value %2872)
  (define-value %2873)
  (define-value %2874)
  (define-value %2875)
  (define-value %2876)
  (define-value %2877)
  (define-value %2878)
  (define-value %2879)
  (define-value %2880)
  (define-value %2881)
  (define-value %2882)
  (define-value %2884)
  (define-value %2885)
  (define-value %2887)
  (define-value %2888)
  (define-value %2889)
  (define-value %2891)
  (define-value %2893)
  (define-value %2894)
  (define-value %2895)
  (define-value %2896)
  (define-value %2897)
  (define-value %2898)
  (define-value %2899)
  (define-value %2900)
  (define-value %2901)
  (define-value %2902)
  (define-value %2903)
  (define-value %2904)
  (define-value %2905)
  (define-value %2907)
  (define-value %2908)
  (define-value %2910)
  (define-value %2911)
  (define-value %2912)
  (define-value %2913)
  (define-value %2914)
  (define-value %2915)
  (define-value %2916)
  (define-value %2917)
  (define-value %2918)
  (define-value %2919)
  (define-value %2920)
  (define-value %2921)
  (define-value %2922)
  (define-value %2924)
  (define-value %2925)
  (define-value %2926)
  (define-value %2927)
  (define-value %2928)
  (define-value %2929)
  (define-value %2930)
  (define-value %2931)
  (define-value %2932)
  (define-value %2933)
  (define-value %2934)
  (define-value %2935)
  (define-value %2937)
  (define-value %2938)
  (define-value %2940)
  (define-value %2941)
  (define-value %2942)
  (define-value %2944)
  (define-value %2946)
  (define-value %2947)
  (define-value %2948)
  (define-value %2949)
  (define-value %2950)
  (define-value %2951)
  (define-value %2952)
  (define-value %2953)
  (define-value %2954)
  (define-value %2955)
  (define-value %2956)
  (define-value %2957)
  (define-value %2958)
  (define-value %2960)
  (define-value %2961)
  (define-value %2963)
  (define-value %2964)
  (define-value %2965)
  (define-value %2966)
  (define-value %2967)
  (define-value %2968)
  (define-value %2969)
  (define-value %2970)
  (define-value %2971)
  (define-value %2972)
  (define-value %2973)
  (define-value %2974)
  (define-value %2975)
  (define-value %2977)
  (define-value %2978)
  (define-value %2979)
  (define-value %2980)
  (define-value %2981)
  (define-value %2982)
  (define-value %2983)
  (define-value %2984)
  (define-value %2985)
  (define-value %2986)
  (define-value %2987)
  (define-value %2988)
  (define-value %2990)
  (define-value %2991)
  (define-value %2993)
  (define-value %2994)
  (define-value %2995)
  (define-value %2997)
  (define-value %2999)
  (define-value %3000)
  (define-value %3001)
  (define-value %3002)
  (define-value %3003)
  (define-value %3004)
  (define-value %3005)
  (define-value %3006)
  (define-value %3007)
  (define-value %3008)
  (define-value %3009)
  (define-value %3010)
  (define-value %3011)
  (define-value %3013)
  (define-value %3014)
  (define-value %3016)
  (define-value %3017)
  (define-value %3018)
  (define-value %3019)
  (define-value %3020)
  (define-value %3022)
  (define-value %3023)
  (define-value %3025)
  (define-value %3026)
  (define-value %3027)
  (define-value %3028)
  (define-value %3029)
  (define-value %3030)
  (define-value %3031)
  (define-value %3032)
  (define-value %3033)
  (define-value %3034)
  (define-value %3035)
  (define-value %3036)
  (define-value %3037)
  (define-value %3038)
  (define-value %3039)
  (define-value %3041)
  (define-value %3042)
  (define-value %3044)
  (define-value %3045)
  (define-value %3047)
  (define-value %3049)
  (define-value %3050)
  (define-value %3051)
  (define-value %3052)
  (define-value %3053)
  (define-value %3054)
  (define-value %3055)
  (define-value %3057)
  (define-value %3059)
  (define-value %3060)
  (define-value %3061)
  (define-value %3062)
  (define-value %3063)
  (define-value %3064)
  (define-value %3065)
  (define-value %3066)
  (define-value %3068)
  (define-value %3069)
  (define-value %3070)
  (define-value %3071)
  (define-value %3073)
  (define-value %3074)
  (define-value %3076)
  (define-value %3077)
  (define-value %3078)
  (define-value %3079)
  (define-value %3080)
  (define-value %3082)
  (define-value %3083)
  (define-value %3084)
  (define-value %3086)
  (define-value %3087)
  (define-value %3088)
  (define-value %3089)
  (define-value %3090)
  (define-value %3092)
  (define-value %3093)
  (define-value %3095)
  (define-value %3096)
  (define-value %3097)
  (define-value %3098)
  (define-value %3099)
  (define-value %3101)
  (define-value %3102)
  (define-value %3103)
  (define-value %3105)
  (define-value %3106)
  (define-value %3107)
  (define-value %3108)
  (define-value %3109)
  (define-value %3111)
  (define-value %3112)
  (define-value %3114)
  (define-value %3115)
  (define-value %3116)
  (define-value %3117)
  (define-value %3118)
  (define-value %3119)
  (define-value %3120)
  (define-value %3122)
  (define-value %3123)
  (define-value %3124)
  (define-value %3125)
  (define-value %3127)
  (define-value %3128)
  (define-value %3129)
  (define-value %3130)
  (define-value %3131)
  (define-value %3132)
  (define-value %3133)
  (define-value %3134)
  (define-value %3135)
  (define-value %3136)
  (define-value %3138)
  (define-value %3139)
  (define-value %3140)
  (define-value %3141)
  (define-value %3143)
  (define-value %3144)
  (define-value %3145)
  (define-value %3146)
  (define-value %3147)
  (define-value %3148)
  (define-value %3149)
  (define-value %3150)
  (define-value %3151)
  (define-value %3152)
  (define-value %3153)
  (define-value %3154)
  (define-value %3155)
  (define-value %3156)
  (define-value %3158)
  (define-value %3159)
  (define-value %3161)
  (define-value %3162)
  (define-value %3163)
  (define-value %3165)
  (define-value %3167)
  (define-value %3168)
  (define-value %3169)
  (define-value %3170)
  (define-value %3171)
  (define-value %3172)
  (define-value %3173)
  (define-value %3174)
  (define-value %3176)
  (define-value %3177)
  (define-value %3178)
  (define-value %3179)
  (define-value %3181)
  (define-value %3182)
  (define-value %3184)
  (define-value %3185)
  (define-value %3186)
  (define-value %3187)
  (define-value %3188)
  (define-value %3189)
  (define-value %3191)
  (define-value %3192)
  (define-value %3193)
  (define-value %3195)
  (define-value %3196)
  (define-value %3197)
  (define-value %3199)
  (define-value %3200)
  (define-value %3201)
  (define-value %3202)
  (define-value %3203)
  (define-value %3204)
  (define-value %3205)
  (define-value %3206)
  (define-value %3207)
  (define-value %3208)
  (define-value %3210)
  (define-value %3211)
  (define-value %3212)
  (define-value %3213)
  (define-value %3214)
  (define-value %3215)
  (define-value %3216)
  (define-value %3218)
  (define-value %3219)
  (define-value %3220)
  (define-value %3222)
  (define-value %3223)
  (define-value %3224)
  (define-value %3225)
  (define-value %3226)
  (define-value %3227)
  (define-value %3229)
  (define-value %3230)
  (define-value %3231)
  (define-value %3232)
  (define-value %3233)
  (define-value %3235)
  (define-value %3236)
  (define-value %3237)
  (define-value %3239)
  (define-value %3240)
  (define-value %3241)
  (define-value %3242)
  (define-value %3243)
  (define-value %3244)
  (define-value %3245)
  (define-value %3246)
  (define-value %3247)
  (define-value %3248)
  (define-value %3250)
  (define-value %3251)
  (define-value %3252)
  (define-value %3253)
  (define-value %3254)
  (define-value %3255)
  (define-value %3256)
  (define-value %3258)
  (define-value %3259)
  (define-value %3260)
  (define-value %3262)
  (define-value %3263)
  (define-value %3264)
  (define-value %3266)
  (define-value %3267)
  (define-value %3268)
  (define-value %3269)
  (define-value %3270)
  (define-value %3271)
  (define-value %3272)
  (define-value %3273)
  (define-value %3275)
  (define-value %3276)
  (define-value %3277)
  (define-value %3279)
  (define-value %3280)
  (define-value %3281)
  (define-value %3282)
  (define-value %3283)
  (define-value %3285)
  (define-value %3286)
  (define-value %3287)
  (define-value %3288)
  (define-value %3289)
  (define-value %3291)
  (define-value %3292)
  (define-value %3294)
  (define-value %3295)
  (define-value %3296)
  (define-value %3297)
  (define-value %3298)
  (define-value %3299)
  (define-value %3300)
  (define-value %3301)
  (define-value %3302)
  (define-value %3304)
  (define-value %3305)
  (define-value %3306)
  (define-value %3307)
  (define-value %3308)
  (define-value %3309)
  (define-value %3310)
  (define-value %3312)
  (define-value %3313)
  (define-value %3314)
  (define-value %3316)
  (define-value %3317)
  (define-value %3318)
  (define-value %3320)
  (define-value %3321)
  (define-value %3322)
  (define-value %3323)
  (define-value %3324)
  (define-value %3325)
  (define-value %3326)
  (define-value %3327)
  (define-value %3329)
  (define-value %3330)
  (define-value %3331)
  (define-value %3333)
  (define-value %3335)
  (define-value %3336)
  (define-value %3337)
  (define-value %3338)
  (define-value %3340)
  (define-value %3341)
  (define-value %3342)
  (define-value %3343)
  (define-value %3344)
  (define-value %3345)
  (define-value %3346)
  (define-value %3347)
  (define-value %3348)
  (define-value %3349)
  (define-value %3350)
  (define-value %3351)
  (define-value %3352)
  (define-value %3353)
  (define-value %3354)
  (define-value %3355)
  (define-value %3357)
  (define-value %3358)
  (define-value %3359)
  (define-value %3360)
  (define-value %3361)
  (define-value %3362)
  (define-value %3363)
  (define-value %3364)
  (define-value %3366)
  (define-value %3367)
  (define-value %3368)
  (define-value %3369)
  (define-value %3370)
  (define-value %3371)
  (define-value %3372)
  (define-value %3373)
  (define-value %3374)
  (define-value %3375)
  (define-value %3376)
  (define-value %3377)
  (define-value %3378)
  (define-value %3379)
  (define-value %3381)
  (define-value %3382)
  (define-value %3384)
  (define-value %3385)
  (define-value %3386)
  (define-value %3387)
  (define-value %3389)
  (define-value %3390)
  (define-value %3391)
  (define-value %3393)
  (define-value %3394)
  (define-value %3395)
  (define-value %3397)
  (define-value %3398)
  (define-value %3399)
  (define-value %3400)
  (define-value %3401)
  (define-value %3402)
  (define-value %3403)
  (define-value %3404)
  (define-value %3405)
  (define-value %3406)
  (define-value %3408)
  (define-value %3409)
  (define-value %3410)
  (define-value %3411)
  (define-value %3412)
  (define-value %3413)
  (define-value %3414)
  (define-value %3416)
  (define-value %3417)
  (define-value %3418)
  (define-value %3420)
  (define-value %3421)
  (define-value %3422)
  (define-value %3423)
  (define-value %3424)
  (define-value %3426)
  (define-value %3427)
  (define-value %3428)
  (define-value %3430)
  (define-value %3431)
  (define-value %3432)
  (define-value %3434)
  (define-value %3435)
  (define-value %3436)
  (define-value %3437)
  (define-value %3438)
  (define-value %3439)
  (define-value %3440)
  (define-value %3441)
  (define-value %3442)
  (define-value %3443)
  (define-value %3445)
  (define-value %3446)
  (define-value %3447)
  (define-value %3448)
  (define-value %3449)
  (define-value %3450)
  (define-value %3451)
  (define-value %3453)
  (define-value %3454)
  (define-value %3455)
  (define-value %3457)
  (define-value %3458)
  (define-value %3459)
  (define-value %3460)
  (define-value %3461)
  (define-value %3462)
  (define-value %3463)
  (define-value %3464)
  (define-value %3467)
  (define-value %3468)
  (define-value %3469)
  (define-value %3471)
  (define-value %3472)
  (define-value %3473)
  (define-value %3474)
  (define-value %3475)
  (define-value %3476)
  (define-value %3477)
  (define-value %3478)
  (define-value %3479)
  (define-value %3481)
  (define-value %3482)
  (define-value %3483)
  (define-value %3484)
  (define-value %3486)
  (define-value %3487)
  (define-value %3488)
  (define-value %3491)
  (define-value %3492)
  (define-value %3493)
  (define-value %3494)
  (define-value %3495)
  (define-value %3497)
  (define-value %3498)
  (define-value %3499)
  (define-value %3501)
  (define-value %3502)
  (define-value %3503)
  (define-value %3505)
  (define-value %3506)
  (define-value %3507)
  (define-value %3508)
  (define-value %3509)
  (define-value %3510)
  (define-value %3511)
  (define-value %3512)
  (define-value %3514)
  (define-value %3515)
  (define-value %3516)
  (define-value %3517)
  (define-value %3518)
  (define-value %3519)
  (define-value %3521)
  (define-value %3522)
  (define-value %3524)
  (define-value %3525)
  (define-value %3526)
  (define-value %3527)
  (define-value %3528)
  (define-value %3529)
  (define-value %3530)
  (define-value %3532)
  (define-value %3533)
  (define-value %3534)
  (define-value %3535)
  (define-value %3536)
  (define-value %3537)
  (define-value %3538)
  (define-value %3539)
  (define-value %3541)
  (define-value %3542)
  (define-value %3544)
  (define-value %3545)
  (define-value %3546)
  (define-value %3547)
  (define-value %3548)
  (define-value %3549)
  (define-value %3551)
  (define-value %3552)
  (define-value %3554)
  (define-value %3555)
  (define-value %3557)
  (define-value %3558)
  (define-value %3559)
  (define-value %3560)
  (define-value %3561)
  (define-value %3562)
  (define-value %3563)
  (define-value %3565)
  (define-value %3566)
  (define-value %3567)
  (define-value %3568)
  (define-value %3569)
  (define-value %3570)
  (define-value %3571)
  (define-value %3572)
  (define-value %3574)
  (define-value %3575)
  (define-value %3577)
  (define-value %3578)
  (define-value %3579)
  (define-value %3580)
  (define-value %3581)
  (define-value %3582)
  (define-value %3584)
  (define-value %3585)
  (define-value %3587)
  (define-value %3588)
  (define-value %3590)
  (define-value %3591)
  (define-value %3592)
  (define-value %3593)
  (define-value %3594)
  (define-value %3595)
  (define-value %3596)
  (define-value %3598)
  (define-value %3599)
  (define-value %3600)
  (define-value %3601)
  (define-value %3602)
  (define-value %3603)
  (define-value %3604)
  (define-value %3605)
  (define-value %3607)
  (define-value %3608)
  (define-value %3610)
  (define-value %3611)
  (define-value %3612)
  (define-value %3613)
  (define-value %3614)
  (define-value %3615)
  (define-value %3617)
  (define-value %3618)
  (define-value %3620)
  (define-value %3621)
  (define-value %3623)
  (define-value %3625)
  (define-value %3626)
  (define-value %3627)
  (define-value %3628)
  (define-value %3629)
  (define-value %3630)
  (define-value %3631)
  (define-value %3632)
  (define-value %3633)
  (define-value %3634)
  (define-value %3636)
  (define-value %3637)
  (define-value %3638)
  (define-value %3639)
  (define-value %3640)
  (define-value %3641)
  (define-value %3643)
  (define-value %3644)
  (define-value %3647)
  (define-value %3649)
  (define-value %3650)
  (define-value %3651)
  (define-value %3653)
  (define-value %3655)
  (define-value %3656)
  (define-value %3657)
  (define-value %3658)
  (define-value %3659)
  (define-value %3660)
  (define-value %3661)
  (define-value %3662)
  (define-value %3663)
  (define-value %3664)
  (define-value %3665)
  (define-value %3666)
  (define-value %3667)
  (define-value %3668)
  (define-value %3669)
  (define-value %3670)
  (define-value %3671)
  (define-value %3672)
  (define-value %3673)
  (define-value %3674)
  (define-value %3676)
  (define-value %3677)
  (define-value %3678)
  (define-value %3679)
  (define-value %3680)
  (define-value %3681)
  (define-value %3682)
  (define-value %3683)
  (define-value %3684)
  (define-value %3685)
  (define-value %3686)
  (define-value %3687)
  (define-value %3688)
  (define-value %3689)
  (define-value %3690)
  (define-value %3692)
  (define-value %3693)
  (define-value %3695)
  (define-value %3696)
  (define-value %3698)
  (define-value %3699)
  (define-value %3700)
  (define-value %3701)
  (define-value %3702)
  (define-value %3703)
  (define-value %3706)
  (define-value %3707)
  (define-value %3708)
  (define-value %3710)
  (define-value %3711)
  (define-value %3712)
  (define-value %3713)
  (define-value %3714)
  (define-value %3715)
  (define-value %3716)
  (define-value %3717)
  (define-value %3718)
  (define-value %3720)
  (define-value %3721)
  (define-value %3722)
  (define-value %3723)
  (define-value %3725)
  (define-value %3726)
  (define-value %3727)
  (define-value %3730)
  (define-value %3731)
  (define-value %3732)
  (define-value %3733)
  (define-value %3734)
  (define-value %3736)
  (define-value %3737)
  (define-value %3738)
  (define-value %3740)
  (define-value %3741)
  (define-value %3742)
  (define-value %3743)
  (define-value %3746)
  (define-value %3747)
  (define-value %3748)
  (define-value %3751)
  (define-value %3752)
  (define-value %3753)
  (define-value %3755)
  (define-value %3756)
  (define-value %3757)
  (define-value %3759)
  (define-value %3760)
  (define-value %3761)
  (define-value %3762)
  (define-value %3763)
  (define-value %3764)
  (define-value %3765)
  (define-value %3767)
  (define-value %3768)
  (define-value %3769)
  (define-value %3771)
  (define-value %3772)
  (define-value %3773)
  (define-value %3775)
  (define-value %3776)
  (define-value %3777)
  (define-value %3778)
  (define-value %3779)
  (define-value %3780)
  (define-value %3781)
  (define-value %3782)
  (define-value %3783)
  (define-value %3784)
  (define-value %3786)
  (define-value %3787)
  (define-value %3788)
  (define-value %3789)
  (define-value %3790)
  (define-value %3791)
  (define-value %3792)
  (define-value %3794)
  (define-value %3795)
  (define-value %3796)
  (define-value %3798)
  (define-value %3799)
  (define-value %3800)
  (define-value %3802)
  (define-value %3803)
  (define-value %3804)
  (define-value %3806)
  (define-value %3807)
  (define-value %3808)
  (define-value %3810)
  (define-value %3811)
  (define-value %3812)
  (define-value %3813)
  (define-value %3814)
  (define-value %3815)
  (define-value %3816)
  (define-value %3817)
  (define-value %3818)
  (define-value %3819)
  (define-value %3821)
  (define-value %3822)
  (define-value %3823)
  (define-value %3824)
  (define-value %3825)
  (define-value %3826)
  (define-value %3827)
  (define-value %3829)
  (define-value %3830)
  (define-value %3831)
  (define-value %3833)
  (define-value %3834)
  (define-value %3835)
  (define-value %3836)
  (define-value %3838)
  (define-value %3839)
  (define-value %3840)
  (define-value %3841)
  (define-value %3842)
  (define-value %3843)
  (define-value %3844)
  (define-value %3847)
  (define-value %3848)
  (define-value %3849)
  (define-value %3851)
  (define-value %3852)
  (define-value %3853)
  (define-value %3854)
  (define-value %3855)
  (define-value %3856)
  (define-value %3857)
  (define-value %3858)
  (define-value %3859)
  (define-value %3861)
  (define-value %3862)
  (define-value %3863)
  (define-value %3864)
  (define-value %3866)
  (define-value %3867)
  (define-value %3868)
  (define-value %3871)
  (define-value %3872)
  (define-value %3873)
  (define-value %3874)
  (define-value %3875)
  (define-value %3877)
  (define-value %3878)
  (define-value %3879)
  (define-value %3881)
  (define-value %3882)
  (define-value %3883)
  (define-value %3885)
  (define-value %3886)
  (define-value %3887)
  (define-value %3888)
  (define-value %3889)
  (define-value %3890)
  (define-value %3891)
  (define-value %3892)
  (define-value %3894)
  (define-value %3895)
  (define-value %3896)
  (define-value %3897)
  (define-value %3898)
  (define-value %3900)
  (define-value %3901)
  (define-value %3903)
  (define-value %3904)
  (define-value %3905)
  (define-value %3906)
  (define-value %3907)
  (define-value %3908)
  (define-value %3909)
  (define-value %3911)
  (define-value %3912)
  (define-value %3914)
  (define-value %3915)
  (define-value %3917)
  (define-value %3918)
  (define-value %3919)
  (define-value %3920)
  (define-value %3921)
  (define-value %3922)
  (define-value %3923)
  (define-value %3925)
  (define-value %3926)
  (define-value %3929)
  (define-value %3930)
  (define-value %3932)
  (define-value %3933)
  (define-value %3934)
  (define-value %3935)
  (define-value %3936)
  (define-value %3937)
  (define-value %3938)
  (define-value %3940)
  (define-value %3941)
  (define-value %3943)
  (define-value %3944)
  (define-value %3946)
  (define-value %3947)
  (define-value %3948)
  (define-value %3949)
  (define-value %3950)
  (define-value %3951)
  (define-value %3952)
  (define-value %3954)
  (define-value %3955)
  (define-value %3957)
  (define-value %3958)
  (define-value %3960)
  (define-value %3962)
  (define-value %3963)
  (define-value %3964)
  (define-value %3965)
  (define-value %3966)
  (define-value %3967)
  (define-value %3968)
  (define-value %3969)
  (define-value %3970)
  (define-value %3971)
  (define-value %3973)
  (define-value %3974)
  (define-value %3975)
  (define-value %3976)
  (define-value %3977)
  (define-value %3978)
  (define-value %3980)
  (define-value %3981)
  (define-value %3983)
  (define-value %3985)
  (define-value %3987)
  (define-value %3990)
  (enter! %3))

(define (@emit_alu_r64 %0 %1 %2 %3)
; %4
  (define-label (%4) #:merge #f
    (set! %5 (load %0 (bitvector 8) #:align 1))
    (set! %6 (icmp/slt %5 (bv #x00 8)))
    (br %6 %7 %38))

; %7
  (define-label (%7) #:merge #f
    (set! %8 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %9 (load %8 pointer #:align 4))
    (set! %10 (icmp/eq %9 nullptr))
    (br %10 %11 %15))

; %11
  (define-label (%11) #:merge #f
    (set! %12 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %13 (load %12 (bitvector 32) #:align 4))
    (set! %14 (add %13 (bv #x00000001 32)))
    (store %14 %12 (bitvector 32) #:align 4)
    (br %34))

; %15
  (define-label (%15) #:merge #f
    (set! %16 (sext %5 (bitvector 32)))
    (set! %17 (shl %16 (bv #x00000014 32)))
    (set! %18 (or %17 (bv #x00042e03 32)))
    (set! %19 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %20 (load %19 (bitvector 32) #:align 4))
    (set! %21 (getelementptr %9 (array-offset %20 4)))
    (store %18 %21 (bitvector 32) #:align 4)
    (set! %22 (load %8 pointer #:align 4))
    (set! %23 (load %19 (bitvector 32) #:align 4))
    (set! %24 (add %23 (bv #x00000001 32)))
    (store %24 %19 (bitvector 32) #:align 4)
    (set! %25 (icmp/eq %22 nullptr))
    (br %25 %34 %26))

; %26
  (define-label (%26) #:merge #f
    (set! %27 (getelementptr %0 (array-offset (bv #x00000001 32) 1)))
    (set! %28 (load %27 (bitvector 8) #:align 1))
    (set! %29 (sext %28 (bitvector 32)))
    (set! %30 (shl %29 (bv #x00000014 32)))
    (set! %31 (or %30 (bv #x00042383 32)))
    (set! %32 (getelementptr %22 (array-offset %24 4)))
    (store %31 %32 (bitvector 32) #:align 4)
    (set! %33 (load %19 (bitvector 32) #:align 4))
    (br %34))

; %34
  (define-label (%34) #:merge #f
    (set! %35 (phi [%19 %15] [%19 %26] [%12 %11]))
    (set! %36 (phi [%24 %15] [%33 %26] [%14 %11]))
    (set! %37 (add %36 (bv #x00000001 32)))
    (store %37 %35 (bitvector 32) #:align 4)
    (br %38))

; %38
  (define-label (%38) #:merge #f
    (set! %39 (phi [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000c 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %34] [%0 %4]))
    (set! %40 (load %1 (bitvector 8) #:align 1))
    (set! %41 (icmp/slt %40 (bv #x00 8)))
    (br %41 %42 %73))

; %42
  (define-label (%42) #:merge #f
    (set! %43 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %44 (load %43 pointer #:align 4))
    (set! %45 (icmp/eq %44 nullptr))
    (br %45 %46 %50))

; %46
  (define-label (%46) #:merge #f
    (set! %47 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %48 (load %47 (bitvector 32) #:align 4))
    (set! %49 (add %48 (bv #x00000001 32)))
    (store %49 %47 (bitvector 32) #:align 4)
    (br %69))

; %50
  (define-label (%50) #:merge #f
    (set! %51 (sext %40 (bitvector 32)))
    (set! %52 (shl %51 (bv #x00000014 32)))
    (set! %53 (or %52 (bv #x00042f03 32)))
    (set! %54 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %55 (load %54 (bitvector 32) #:align 4))
    (set! %56 (getelementptr %44 (array-offset %55 4)))
    (store %53 %56 (bitvector 32) #:align 4)
    (set! %57 (load %43 pointer #:align 4))
    (set! %58 (load %54 (bitvector 32) #:align 4))
    (set! %59 (add %58 (bv #x00000001 32)))
    (store %59 %54 (bitvector 32) #:align 4)
    (set! %60 (icmp/eq %57 nullptr))
    (br %60 %69 %61))

; %61
  (define-label (%61) #:merge #f
    (set! %62 (getelementptr %1 (array-offset (bv #x00000001 32) 1)))
    (set! %63 (load %62 (bitvector 8) #:align 1))
    (set! %64 (sext %63 (bitvector 32)))
    (set! %65 (shl %64 (bv #x00000014 32)))
    (set! %66 (or %65 (bv #x00042e83 32)))
    (set! %67 (getelementptr %57 (array-offset %59 4)))
    (store %66 %67 (bitvector 32) #:align 4)
    (set! %68 (load %54 (bitvector 32) #:align 4))
    (br %69))

; %69
  (define-label (%69) #:merge #f
    (set! %70 (phi [%54 %50] [%54 %61] [%47 %46]))
    (set! %71 (phi [%59 %50] [%68 %61] [%49 %46]))
    (set! %72 (add %71 (bv #x00000001 32)))
    (store %72 %70 (bitvector 32) #:align 4)
    (br %73))

; %73
  (define-label (%73) #:merge #f
    (set! %74 (phi [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000d 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %69] [%1 %38]))
    (set! %75 (zext %3 (bitvector 32)))
    (set! %76 (lshr %75 (bv #x00000004 32)))
    (set! %77 (shl %75 (bv #x0000001c 32)))
    (set! %78 (or %76 %77))
    (switch %78 %1090 [(bv #x0000000b 32) %79] [(bv #x00000000 32) %117] [(bv #x00000001 32) %251] [(bv #x00000005 32) %318] [(bv #x00000004 32) %358] [(bv #x0000000a 32) %398] [(bv #x00000002 32) %438] [(bv #x00000006 32) %541] [(bv #x00000007 32) %701] [(bv #x0000000c 32) %861] [(bv #x00000008 32) %1023]))

; %79
  (define-label (%79) #:merge #f
    (set! %80 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %81 (load %80 pointer #:align 4))
    (set! %82 (icmp/eq %81 nullptr))
    (br %82 %83 %87))

; %83
  (define-label (%83) #:merge #f
    (set! %84 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %85 (load %84 (bitvector 32) #:align 4))
    (set! %86 (add %85 (bv #x00000001 32)))
    (store %86 %84 (bitvector 32) #:align 4)
    (br %1086))

; %87
  (define-label (%87) #:merge #f
    (set! %88 (getelementptr %39 (array-offset (bv #x00000001 32) 1)))
    (set! %89 (load %88 (bitvector 8) #:align 1))
    (set! %90 (zext %89 (bitvector 32)))
    (set! %91 (shl %90 (bv #x00000007 32)))
    (set! %92 (getelementptr %74 (array-offset (bv #x00000001 32) 1)))
    (set! %93 (load %92 (bitvector 8) #:align 1))
    (set! %94 (zext %93 (bitvector 32)))
    (set! %95 (shl %94 (bv #x0000000f 32)))
    (set! %96 (or %91 %95))
    (set! %97 (or %96 (bv #x00000013 32)))
    (set! %98 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %99 (load %98 (bitvector 32) #:align 4))
    (set! %100 (getelementptr %81 (array-offset %99 4)))
    (store %97 %100 (bitvector 32) #:align 4)
    (set! %101 (load %80 pointer #:align 4))
    (set! %102 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %103 (load %102 (bitvector 32) #:align 4))
    (set! %104 (add %103 (bv #x00000001 32)))
    (store %104 %102 (bitvector 32) #:align 4)
    (set! %105 (icmp/eq %101 nullptr))
    (br %105 %1086 %106))

; %106
  (define-label (%106) #:merge #f
    (set! %107 (load %39 (bitvector 8) #:align 1))
    (set! %108 (zext %107 (bitvector 32)))
    (set! %109 (shl %108 (bv #x00000007 32)))
    (set! %110 (load %74 (bitvector 8) #:align 1))
    (set! %111 (zext %110 (bitvector 32)))
    (set! %112 (shl %111 (bv #x0000000f 32)))
    (set! %113 (or %109 %112))
    (set! %114 (or %113 (bv #x00000013 32)))
    (set! %115 (getelementptr %101 (array-offset %104 4)))
    (store %114 %115 (bitvector 32) #:align 4)
    (set! %116 (load %102 (bitvector 32) #:align 4))
    (br %1086))

; %117
  (define-label (%117) #:merge #f
    (set! %118 (icmp/eq %39 %74))
    (set! %119 (getelementptr %39 (array-offset (bv #x00000001 32) 1)))
    (set! %120 (load %119 (bitvector 8) #:align 1))
    (br %118 %121 %177))

; %121
  (define-label (%121) #:merge #f
    (set! %122 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %123 (load %122 pointer #:align 4))
    (set! %124 (icmp/eq %123 nullptr))
    (br %124 %133 %125))

; %125
  (define-label (%125) #:merge #f
    (set! %126 (zext %120 (bitvector 32)))
    (set! %127 (shl %126 (bv #x0000000f 32)))
    (set! %128 (or %127 (bv #x01f05293 32)))
    (set! %129 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %130 (load %129 (bitvector 32) #:align 4))
    (set! %131 (getelementptr %123 (array-offset %130 4)))
    (store %128 %131 (bitvector 32) #:align 4)
    (set! %132 (load %122 pointer #:align 4))
    (br %133))

; %133
  (define-label (%133) #:merge #f
    (set! %134 (phi [#(struct:nullptr) %121] [%132 %125]))
    (set! %135 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %136 (load %135 (bitvector 32) #:align 4))
    (set! %137 (add %136 (bv #x00000001 32)))
    (store %137 %135 (bitvector 32) #:align 4)
    (set! %138 (load %39 (bitvector 8) #:align 1))
    (set! %139 (zext %138 (bitvector 32)))
    (set! %140 (icmp/eq %134 nullptr))
    (br %140 %141 %143))

; %141
  (define-label (%141) #:merge #f
    (set! %142 (add %136 (bv #x00000002 32)))
    (store %142 %135 (bitvector 32) #:align 4)
    (br %155))

; %143
  (define-label (%143) #:merge #f
    (set! %144 (shl %139 (bv #x00000007 32)))
    (set! %145 (shl %139 (bv #x0000000f 32)))
    (set! %146 (or %145 %144))
    (set! %147 (or %146 (bv #x00101013 32)))
    (set! %148 (getelementptr %134 (array-offset %137 4)))
    (store %147 %148 (bitvector 32) #:align 4)
    (set! %149 (load %135 (bitvector 32) #:align 4))
    (set! %150 (load %122 pointer #:align 4))
    (set! %151 (add %149 (bv #x00000001 32)))
    (store %151 %135 (bitvector 32) #:align 4)
    (set! %152 (load %39 (bitvector 8) #:align 1))
    (set! %153 (zext %152 (bitvector 32)))
    (set! %154 (icmp/eq %150 nullptr))
    (br %154 %155 %158))

; %155
  (define-label (%155) #:merge #f
    (set! %156 (phi [%142 %141] [%151 %143]))
    (set! %157 (add %156 (bv #x00000001 32)))
    (store %157 %135 (bitvector 32) #:align 4)
    (br %1086))

; %158
  (define-label (%158) #:merge #f
    (set! %159 (shl %153 (bv #x00000007 32)))
    (set! %160 (shl %153 (bv #x00000014 32)))
    (set! %161 (or %160 %159))
    (set! %162 (or %161 (bv #x0002e033 32)))
    (set! %163 (getelementptr %150 (array-offset %151 4)))
    (store %162 %163 (bitvector 32) #:align 4)
    (set! %164 (load %135 (bitvector 32) #:align 4))
    (set! %165 (load %122 pointer #:align 4))
    (set! %166 (add %164 (bv #x00000001 32)))
    (store %166 %135 (bitvector 32) #:align 4)
    (set! %167 (load %119 (bitvector 8) #:align 1))
    (set! %168 (zext %167 (bitvector 32)))
    (set! %169 (icmp/eq %165 nullptr))
    (br %169 %1086 %170))

; %170
  (define-label (%170) #:merge #f
    (set! %171 (shl %168 (bv #x00000007 32)))
    (set! %172 (shl %168 (bv #x0000000f 32)))
    (set! %173 (or %172 %171))
    (set! %174 (or %173 (bv #x00101013 32)))
    (set! %175 (getelementptr %165 (array-offset %166 4)))
    (store %174 %175 (bitvector 32) #:align 4)
    (set! %176 (load %135 (bitvector 32) #:align 4))
    (br %1086))

; %177
  (define-label (%177) #:merge #f
    (set! %178 (getelementptr %74 (array-offset (bv #x00000001 32) 1)))
    (set! %179 (zext %120 (bitvector 32)))
    (set! %180 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %181 (load %180 pointer #:align 4))
    (set! %182 (icmp/eq %181 nullptr))
    (br %182 %183 %187))

; %183
  (define-label (%183) #:merge #f
    (set! %184 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %185 (load %184 (bitvector 32) #:align 4))
    (set! %186 (add %185 (bv #x00000001 32)))
    (store %186 %184 (bitvector 32) #:align 4)
    (br %204))

; %187
  (define-label (%187) #:merge #f
    (set! %188 (shl %179 (bv #x00000007 32)))
    (set! %189 (shl %179 (bv #x0000000f 32)))
    (set! %190 (load %178 (bitvector 8) #:align 1))
    (set! %191 (zext %190 (bitvector 32)))
    (set! %192 (shl %191 (bv #x00000014 32)))
    (set! %193 (or %189 %188))
    (set! %194 (or %193 %192))
    (set! %195 (or %194 (bv #x00000033 32)))
    (set! %196 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %197 (load %196 (bitvector 32) #:align 4))
    (set! %198 (getelementptr %181 (array-offset %197 4)))
    (store %195 %198 (bitvector 32) #:align 4)
    (set! %199 (load %180 pointer #:align 4))
    (set! %200 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %201 (load %200 (bitvector 32) #:align 4))
    (set! %202 (add %201 (bv #x00000001 32)))
    (store %202 %200 (bitvector 32) #:align 4)
    (set! %203 (icmp/eq %199 nullptr))
    (br %203 %204 %208))

; %204
  (define-label (%204) #:merge #f
    (set! %205 (phi [%184 %183] [%200 %187]))
    (set! %206 (phi [%186 %183] [%202 %187]))
    (set! %207 (add %206 (bv #x00000001 32)))
    (store %207 %205 (bitvector 32) #:align 4)
    (br %224))

; %208
  (define-label (%208) #:merge #f
    (set! %209 (load %119 (bitvector 8) #:align 1))
    (set! %210 (zext %209 (bitvector 32)))
    (set! %211 (shl %210 (bv #x0000000f 32)))
    (set! %212 (load %178 (bitvector 8) #:align 1))
    (set! %213 (zext %212 (bitvector 32)))
    (set! %214 (shl %213 (bv #x00000014 32)))
    (set! %215 (or %211 %214))
    (set! %216 (or %215 (bv #x000032b3 32)))
    (set! %217 (getelementptr %199 (array-offset %202 4)))
    (store %216 %217 (bitvector 32) #:align 4)
    (set! %218 (load %200 (bitvector 32) #:align 4))
    (set! %219 (load %180 pointer #:align 4))
    (set! %220 (add %218 (bv #x00000001 32)))
    (store %220 %200 (bitvector 32) #:align 4)
    (set! %221 (load %39 (bitvector 8) #:align 1))
    (set! %222 (zext %221 (bitvector 32)))
    (set! %223 (icmp/eq %219 nullptr))
    (br %223 %224 %228))

; %224
  (define-label (%224) #:merge #f
    (set! %225 (phi [%205 %204] [%200 %208]))
    (set! %226 (phi [%207 %204] [%220 %208]))
    (set! %227 (add %226 (bv #x00000001 32)))
    (store %227 %225 (bitvector 32) #:align 4)
    (br %1086))

; %228
  (define-label (%228) #:merge #f
    (set! %229 (shl %222 (bv #x00000007 32)))
    (set! %230 (shl %222 (bv #x0000000f 32)))
    (set! %231 (load %74 (bitvector 8) #:align 1))
    (set! %232 (zext %231 (bitvector 32)))
    (set! %233 (shl %232 (bv #x00000014 32)))
    (set! %234 (or %230 %229))
    (set! %235 (or %234 %233))
    (set! %236 (or %235 (bv #x00000033 32)))
    (set! %237 (getelementptr %219 (array-offset %220 4)))
    (store %236 %237 (bitvector 32) #:align 4)
    (set! %238 (load %200 (bitvector 32) #:align 4))
    (set! %239 (load %180 pointer #:align 4))
    (set! %240 (add %238 (bv #x00000001 32)))
    (store %240 %200 (bitvector 32) #:align 4)
    (set! %241 (load %39 (bitvector 8) #:align 1))
    (set! %242 (zext %241 (bitvector 32)))
    (set! %243 (icmp/eq %239 nullptr))
    (br %243 %1086 %244))

; %244
  (define-label (%244) #:merge #f
    (set! %245 (shl %242 (bv #x00000007 32)))
    (set! %246 (shl %242 (bv #x0000000f 32)))
    (set! %247 (or %246 %245))
    (set! %248 (or %247 (bv #x00500033 32)))
    (set! %249 (getelementptr %239 (array-offset %240 4)))
    (store %248 %249 (bitvector 32) #:align 4)
    (set! %250 (load %200 (bitvector 32) #:align 4))
    (br %1086))

; %251
  (define-label (%251) #:merge #f
    (set! %252 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %253 (load %252 pointer #:align 4))
    (set! %254 (icmp/eq %253 nullptr))
    (br %254 %268 %255))

; %255
  (define-label (%255) #:merge #f
    (set! %256 (load %39 (bitvector 8) #:align 1))
    (set! %257 (zext %256 (bitvector 32)))
    (set! %258 (shl %257 (bv #x0000000f 32)))
    (set! %259 (load %74 (bitvector 8) #:align 1))
    (set! %260 (zext %259 (bitvector 32)))
    (set! %261 (shl %260 (bv #x00000014 32)))
    (set! %262 (or %258 %261))
    (set! %263 (or %262 (bv #x40000333 32)))
    (set! %264 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %265 (load %264 (bitvector 32) #:align 4))
    (set! %266 (getelementptr %253 (array-offset %265 4)))
    (store %263 %266 (bitvector 32) #:align 4)
    (set! %267 (load %252 pointer #:align 4))
    (br %268))

; %268
  (define-label (%268) #:merge #f
    (set! %269 (phi [#(struct:nullptr) %251] [%267 %255]))
    (set! %270 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %271 (load %270 (bitvector 32) #:align 4))
    (set! %272 (add %271 (bv #x00000001 32)))
    (store %272 %270 (bitvector 32) #:align 4)
    (set! %273 (getelementptr %39 (array-offset (bv #x00000001 32) 1)))
    (set! %274 (getelementptr %74 (array-offset (bv #x00000001 32) 1)))
    (set! %275 (icmp/eq %269 nullptr))
    (br %275 %276 %278))

; %276
  (define-label (%276) #:merge #f
    (set! %277 (add %271 (bv #x00000002 32)))
    (store %277 %270 (bitvector 32) #:align 4)
    (br %292))

; %278
  (define-label (%278) #:merge #f
    (set! %279 (load %273 (bitvector 8) #:align 1))
    (set! %280 (zext %279 (bitvector 32)))
    (set! %281 (shl %280 (bv #x0000000f 32)))
    (set! %282 (load %274 (bitvector 8) #:align 1))
    (set! %283 (zext %282 (bitvector 32)))
    (set! %284 (shl %283 (bv #x00000014 32)))
    (set! %285 (or %281 %284))
    (set! %286 (or %285 (bv #x000032b3 32)))
    (set! %287 (getelementptr %269 (array-offset %272 4)))
    (store %286 %287 (bitvector 32) #:align 4)
    (set! %288 (load %270 (bitvector 32) #:align 4))
    (set! %289 (load %252 pointer #:align 4))
    (set! %290 (add %288 (bv #x00000001 32)))
    (store %290 %270 (bitvector 32) #:align 4)
    (set! %291 (icmp/eq %289 nullptr))
    (br %291 %292 %295))

; %292
  (define-label (%292) #:merge #f
    (set! %293 (phi [%277 %276] [%290 %278]))
    (set! %294 (add %293 (bv #x00000001 32)))
    (store %294 %270 (bitvector 32) #:align 4)
    (br %1086))

; %295
  (define-label (%295) #:merge #f
    (set! %296 (load %39 (bitvector 8) #:align 1))
    (set! %297 (zext %296 (bitvector 32)))
    (set! %298 (shl %297 (bv #x00000007 32)))
    (set! %299 (or %298 (bv #x40530033 32)))
    (set! %300 (getelementptr %289 (array-offset %290 4)))
    (store %299 %300 (bitvector 32) #:align 4)
    (set! %301 (load %270 (bitvector 32) #:align 4))
    (set! %302 (load %252 pointer #:align 4))
    (set! %303 (add %301 (bv #x00000001 32)))
    (store %303 %270 (bitvector 32) #:align 4)
    (set! %304 (load %273 (bitvector 8) #:align 1))
    (set! %305 (zext %304 (bitvector 32)))
    (set! %306 (icmp/eq %302 nullptr))
    (br %306 %1086 %307))

; %307
  (define-label (%307) #:merge #f
    (set! %308 (shl %305 (bv #x00000007 32)))
    (set! %309 (shl %305 (bv #x0000000f 32)))
    (set! %310 (load %274 (bitvector 8) #:align 1))
    (set! %311 (zext %310 (bitvector 32)))
    (set! %312 (shl %311 (bv #x00000014 32)))
    (set! %313 (or %309 %308))
    (set! %314 (or %313 %312))
    (set! %315 (or %314 (bv #x40000033 32)))
    (set! %316 (getelementptr %302 (array-offset %303 4)))
    (store %315 %316 (bitvector 32) #:align 4)
    (set! %317 (load %270 (bitvector 32) #:align 4))
    (br %1086))

; %318
  (define-label (%318) #:merge #f
    (set! %319 (getelementptr %39 (array-offset (bv #x00000001 32) 1)))
    (set! %320 (load %319 (bitvector 8) #:align 1))
    (set! %321 (zext %320 (bitvector 32)))
    (set! %322 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %323 (load %322 pointer #:align 4))
    (set! %324 (icmp/eq %323 nullptr))
    (br %324 %339 %325))

; %325
  (define-label (%325) #:merge #f
    (set! %326 (shl %321 (bv #x00000007 32)))
    (set! %327 (shl %321 (bv #x0000000f 32)))
    (set! %328 (getelementptr %74 (array-offset (bv #x00000001 32) 1)))
    (set! %329 (load %328 (bitvector 8) #:align 1))
    (set! %330 (zext %329 (bitvector 32)))
    (set! %331 (shl %330 (bv #x00000014 32)))
    (set! %332 (or %327 %326))
    (set! %333 (or %332 %331))
    (set! %334 (or %333 (bv #x00007033 32)))
    (set! %335 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %336 (load %335 (bitvector 32) #:align 4))
    (set! %337 (getelementptr %323 (array-offset %336 4)))
    (store %334 %337 (bitvector 32) #:align 4)
    (set! %338 (load %322 pointer #:align 4))
    (br %339))

; %339
  (define-label (%339) #:merge #f
    (set! %340 (phi [#(struct:nullptr) %318] [%338 %325]))
    (set! %341 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %342 (load %341 (bitvector 32) #:align 4))
    (set! %343 (add %342 (bv #x00000001 32)))
    (store %343 %341 (bitvector 32) #:align 4)
    (set! %344 (load %39 (bitvector 8) #:align 1))
    (set! %345 (zext %344 (bitvector 32)))
    (set! %346 (icmp/eq %340 nullptr))
    (br %346 %1086 %347))

; %347
  (define-label (%347) #:merge #f
    (set! %348 (shl %345 (bv #x00000007 32)))
    (set! %349 (shl %345 (bv #x0000000f 32)))
    (set! %350 (load %74 (bitvector 8) #:align 1))
    (set! %351 (zext %350 (bitvector 32)))
    (set! %352 (shl %351 (bv #x00000014 32)))
    (set! %353 (or %349 %348))
    (set! %354 (or %353 %352))
    (set! %355 (or %354 (bv #x00007033 32)))
    (set! %356 (getelementptr %340 (array-offset %343 4)))
    (store %355 %356 (bitvector 32) #:align 4)
    (set! %357 (load %341 (bitvector 32) #:align 4))
    (br %1086))

; %358
  (define-label (%358) #:merge #f
    (set! %359 (getelementptr %39 (array-offset (bv #x00000001 32) 1)))
    (set! %360 (load %359 (bitvector 8) #:align 1))
    (set! %361 (zext %360 (bitvector 32)))
    (set! %362 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %363 (load %362 pointer #:align 4))
    (set! %364 (icmp/eq %363 nullptr))
    (br %364 %379 %365))

; %365
  (define-label (%365) #:merge #f
    (set! %366 (shl %361 (bv #x00000007 32)))
    (set! %367 (shl %361 (bv #x0000000f 32)))
    (set! %368 (getelementptr %74 (array-offset (bv #x00000001 32) 1)))
    (set! %369 (load %368 (bitvector 8) #:align 1))
    (set! %370 (zext %369 (bitvector 32)))
    (set! %371 (shl %370 (bv #x00000014 32)))
    (set! %372 (or %367 %366))
    (set! %373 (or %372 %371))
    (set! %374 (or %373 (bv #x00006033 32)))
    (set! %375 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %376 (load %375 (bitvector 32) #:align 4))
    (set! %377 (getelementptr %363 (array-offset %376 4)))
    (store %374 %377 (bitvector 32) #:align 4)
    (set! %378 (load %362 pointer #:align 4))
    (br %379))

; %379
  (define-label (%379) #:merge #f
    (set! %380 (phi [#(struct:nullptr) %358] [%378 %365]))
    (set! %381 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %382 (load %381 (bitvector 32) #:align 4))
    (set! %383 (add %382 (bv #x00000001 32)))
    (store %383 %381 (bitvector 32) #:align 4)
    (set! %384 (load %39 (bitvector 8) #:align 1))
    (set! %385 (zext %384 (bitvector 32)))
    (set! %386 (icmp/eq %380 nullptr))
    (br %386 %1086 %387))

; %387
  (define-label (%387) #:merge #f
    (set! %388 (shl %385 (bv #x00000007 32)))
    (set! %389 (shl %385 (bv #x0000000f 32)))
    (set! %390 (load %74 (bitvector 8) #:align 1))
    (set! %391 (zext %390 (bitvector 32)))
    (set! %392 (shl %391 (bv #x00000014 32)))
    (set! %393 (or %389 %388))
    (set! %394 (or %393 %392))
    (set! %395 (or %394 (bv #x00006033 32)))
    (set! %396 (getelementptr %380 (array-offset %383 4)))
    (store %395 %396 (bitvector 32) #:align 4)
    (set! %397 (load %381 (bitvector 32) #:align 4))
    (br %1086))

; %398
  (define-label (%398) #:merge #f
    (set! %399 (getelementptr %39 (array-offset (bv #x00000001 32) 1)))
    (set! %400 (load %399 (bitvector 8) #:align 1))
    (set! %401 (zext %400 (bitvector 32)))
    (set! %402 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %403 (load %402 pointer #:align 4))
    (set! %404 (icmp/eq %403 nullptr))
    (br %404 %419 %405))

; %405
  (define-label (%405) #:merge #f
    (set! %406 (shl %401 (bv #x00000007 32)))
    (set! %407 (shl %401 (bv #x0000000f 32)))
    (set! %408 (getelementptr %74 (array-offset (bv #x00000001 32) 1)))
    (set! %409 (load %408 (bitvector 8) #:align 1))
    (set! %410 (zext %409 (bitvector 32)))
    (set! %411 (shl %410 (bv #x00000014 32)))
    (set! %412 (or %407 %406))
    (set! %413 (or %412 %411))
    (set! %414 (or %413 (bv #x00004033 32)))
    (set! %415 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %416 (load %415 (bitvector 32) #:align 4))
    (set! %417 (getelementptr %403 (array-offset %416 4)))
    (store %414 %417 (bitvector 32) #:align 4)
    (set! %418 (load %402 pointer #:align 4))
    (br %419))

; %419
  (define-label (%419) #:merge #f
    (set! %420 (phi [#(struct:nullptr) %398] [%418 %405]))
    (set! %421 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %422 (load %421 (bitvector 32) #:align 4))
    (set! %423 (add %422 (bv #x00000001 32)))
    (store %423 %421 (bitvector 32) #:align 4)
    (set! %424 (load %39 (bitvector 8) #:align 1))
    (set! %425 (zext %424 (bitvector 32)))
    (set! %426 (icmp/eq %420 nullptr))
    (br %426 %1086 %427))

; %427
  (define-label (%427) #:merge #f
    (set! %428 (shl %425 (bv #x00000007 32)))
    (set! %429 (shl %425 (bv #x0000000f 32)))
    (set! %430 (load %74 (bitvector 8) #:align 1))
    (set! %431 (zext %430 (bitvector 32)))
    (set! %432 (shl %431 (bv #x00000014 32)))
    (set! %433 (or %429 %428))
    (set! %434 (or %433 %432))
    (set! %435 (or %434 (bv #x00004033 32)))
    (set! %436 (getelementptr %420 (array-offset %423 4)))
    (store %435 %436 (bitvector 32) #:align 4)
    (set! %437 (load %421 (bitvector 32) #:align 4))
    (br %1086))

; %438
  (define-label (%438) #:merge #f
    (set! %439 (getelementptr %39 (array-offset (bv #x00000001 32) 1)))
    (set! %440 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %441 (load %440 pointer #:align 4))
    (set! %442 (icmp/eq %441 nullptr))
    (br %442 %456 %443))

; %443
  (define-label (%443) #:merge #f
    (set! %444 (load %74 (bitvector 8) #:align 1))
    (set! %445 (zext %444 (bitvector 32)))
    (set! %446 (shl %445 (bv #x0000000f 32)))
    (set! %447 (load %439 (bitvector 8) #:align 1))
    (set! %448 (zext %447 (bitvector 32)))
    (set! %449 (shl %448 (bv #x00000014 32)))
    (set! %450 (or %446 %449))
    (set! %451 (or %450 (bv #x020002b3 32)))
    (set! %452 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %453 (load %452 (bitvector 32) #:align 4))
    (set! %454 (getelementptr %441 (array-offset %453 4)))
    (store %451 %454 (bitvector 32) #:align 4)
    (set! %455 (load %440 pointer #:align 4))
    (br %456))

; %456
  (define-label (%456) #:merge #f
    (set! %457 (phi [#(struct:nullptr) %438] [%455 %443]))
    (set! %458 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %459 (load %458 (bitvector 32) #:align 4))
    (set! %460 (add %459 (bv #x00000001 32)))
    (store %460 %458 (bitvector 32) #:align 4)
    (set! %461 (load %39 (bitvector 8) #:align 1))
    (set! %462 (getelementptr %74 (array-offset (bv #x00000001 32) 1)))
    (set! %463 (zext %461 (bitvector 32)))
    (set! %464 (icmp/eq %457 nullptr))
    (br %464 %465 %467))

; %465
  (define-label (%465) #:merge #f
    (set! %466 (add %459 (bv #x00000002 32)))
    (store %466 %458 (bitvector 32) #:align 4)
    (br %481))

; %467
  (define-label (%467) #:merge #f
    (set! %468 (shl %463 (bv #x00000007 32)))
    (set! %469 (shl %463 (bv #x0000000f 32)))
    (set! %470 (load %462 (bitvector 8) #:align 1))
    (set! %471 (zext %470 (bitvector 32)))
    (set! %472 (shl %471 (bv #x00000014 32)))
    (set! %473 (or %469 %468))
    (set! %474 (or %473 %472))
    (set! %475 (or %474 (bv #x02000033 32)))
    (set! %476 (getelementptr %457 (array-offset %460 4)))
    (store %475 %476 (bitvector 32) #:align 4)
    (set! %477 (load %458 (bitvector 32) #:align 4))
    (set! %478 (load %440 pointer #:align 4))
    (set! %479 (add %477 (bv #x00000001 32)))
    (store %479 %458 (bitvector 32) #:align 4)
    (set! %480 (icmp/eq %478 nullptr))
    (br %480 %481 %484))

; %481
  (define-label (%481) #:merge #f
    (set! %482 (phi [%466 %465] [%479 %467]))
    (set! %483 (add %482 (bv #x00000001 32)))
    (store %483 %458 (bitvector 32) #:align 4)
    (br %500))

; %484
  (define-label (%484) #:merge #f
    (set! %485 (load %439 (bitvector 8) #:align 1))
    (set! %486 (zext %485 (bitvector 32)))
    (set! %487 (shl %486 (bv #x0000000f 32)))
    (set! %488 (load %462 (bitvector 8) #:align 1))
    (set! %489 (zext %488 (bitvector 32)))
    (set! %490 (shl %489 (bv #x00000014 32)))
    (set! %491 (or %487 %490))
    (set! %492 (or %491 (bv #x02003333 32)))
    (set! %493 (getelementptr %478 (array-offset %479 4)))
    (store %492 %493 (bitvector 32) #:align 4)
    (set! %494 (load %458 (bitvector 32) #:align 4))
    (set! %495 (load %440 pointer #:align 4))
    (set! %496 (add %494 (bv #x00000001 32)))
    (store %496 %458 (bitvector 32) #:align 4)
    (set! %497 (load %39 (bitvector 8) #:align 1))
    (set! %498 (zext %497 (bitvector 32)))
    (set! %499 (icmp/eq %495 nullptr))
    (br %499 %500 %503))

; %500
  (define-label (%500) #:merge #f
    (set! %501 (phi [%483 %481] [%496 %484]))
    (set! %502 (add %501 (bv #x00000001 32)))
    (store %502 %458 (bitvector 32) #:align 4)
    (br %515))

; %503
  (define-label (%503) #:merge #f
    (set! %504 (shl %498 (bv #x00000007 32)))
    (set! %505 (shl %498 (bv #x0000000f 32)))
    (set! %506 (or %505 %504))
    (set! %507 (or %506 (bv #x00500033 32)))
    (set! %508 (getelementptr %495 (array-offset %496 4)))
    (store %507 %508 (bitvector 32) #:align 4)
    (set! %509 (load %458 (bitvector 32) #:align 4))
    (set! %510 (load %440 pointer #:align 4))
    (set! %511 (add %509 (bv #x00000001 32)))
    (store %511 %458 (bitvector 32) #:align 4)
    (set! %512 (load %439 (bitvector 8) #:align 1))
    (set! %513 (zext %512 (bitvector 32)))
    (set! %514 (icmp/eq %510 nullptr))
    (br %514 %515 %518))

; %515
  (define-label (%515) #:merge #f
    (set! %516 (phi [%502 %500] [%511 %503]))
    (set! %517 (add %516 (bv #x00000001 32)))
    (store %517 %458 (bitvector 32) #:align 4)
    (br %1086))

; %518
  (define-label (%518) #:merge #f
    (set! %519 (shl %513 (bv #x00000007 32)))
    (set! %520 (shl %513 (bv #x0000000f 32)))
    (set! %521 (load %462 (bitvector 8) #:align 1))
    (set! %522 (zext %521 (bitvector 32)))
    (set! %523 (shl %522 (bv #x00000014 32)))
    (set! %524 (or %520 %519))
    (set! %525 (or %524 %523))
    (set! %526 (or %525 (bv #x02000033 32)))
    (set! %527 (getelementptr %510 (array-offset %511 4)))
    (store %526 %527 (bitvector 32) #:align 4)
    (set! %528 (load %458 (bitvector 32) #:align 4))
    (set! %529 (load %440 pointer #:align 4))
    (set! %530 (add %528 (bv #x00000001 32)))
    (store %530 %458 (bitvector 32) #:align 4)
    (set! %531 (load %39 (bitvector 8) #:align 1))
    (set! %532 (zext %531 (bitvector 32)))
    (set! %533 (icmp/eq %529 nullptr))
    (br %533 %1086 %534))

; %534
  (define-label (%534) #:merge #f
    (set! %535 (shl %532 (bv #x00000007 32)))
    (set! %536 (shl %532 (bv #x0000000f 32)))
    (set! %537 (or %536 %535))
    (set! %538 (or %537 (bv #x00600033 32)))
    (set! %539 (getelementptr %529 (array-offset %530 4)))
    (store %538 %539 (bitvector 32) #:align 4)
    (set! %540 (load %458 (bitvector 32) #:align 4))
    (br %1086))

; %541
  (define-label (%541) #:merge #f
    (set! %542 (getelementptr %74 (array-offset (bv #x00000001 32) 1)))
    (set! %543 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %544 (load %543 pointer #:align 4))
    (set! %545 (icmp/eq %544 nullptr))
    (set! %546 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %547 (load %546 (bitvector 32) #:align 4))
    (br %545 %548 %550))

; %548
  (define-label (%548) #:merge #f
    (set! %549 (add %547 (bv #x00000001 32)))
    (store %549 %546 (bitvector 32) #:align 4)
    (br %560))

; %550
  (define-label (%550) #:merge #f
    (set! %551 (load %542 (bitvector 8) #:align 1))
    (set! %552 (zext %551 (bitvector 32)))
    (set! %553 (shl %552 (bv #x0000000f 32)))
    (set! %554 (or %553 (bv #xfe000293 32)))
    (set! %555 (getelementptr %544 (array-offset %547 4)))
    (store %554 %555 (bitvector 32) #:align 4)
    (set! %556 (load %543 pointer #:align 4))
    (set! %557 (load %546 (bitvector 32) #:align 4))
    (set! %558 (add %557 (bv #x00000001 32)))
    (store %558 %546 (bitvector 32) #:align 4)
    (set! %559 (icmp/eq %556 nullptr))
    (br %559 %560 %563))

; %560
  (define-label (%560) #:merge #f
    (set! %561 (phi [%558 %550] [%549 %548]))
    (set! %562 (add %561 (bv #x00000001 32)))
    (store %562 %546 (bitvector 32) #:align 4)
    (br %570))

; %563
  (define-label (%563) #:merge #f
    (set! %564 (getelementptr %556 (array-offset %558 4)))
    (store (bv #x0002c863 32) %564 (bitvector 32) #:align 4)
    (set! %565 (load %546 (bitvector 32) #:align 4))
    (set! %566 (load %543 pointer #:align 4))
    (set! %567 (add %565 (bv #x00000001 32)))
    (store %567 %546 (bitvector 32) #:align 4)
    (set! %568 (getelementptr %39 (array-offset (bv #x00000001 32) 1)))
    (set! %569 (icmp/eq %566 nullptr))
    (br %569 %570 %573))

; %570
  (define-label (%570) #:merge #f
    (set! %571 (phi [%562 %560] [%567 %563]))
    (set! %572 (add %571 (bv #x00000001 32)))
    (store %572 %546 (bitvector 32) #:align 4)
    (br %587))

; %573
  (define-label (%573) #:merge #f
    (set! %574 (load %39 (bitvector 8) #:align 1))
    (set! %575 (zext %574 (bitvector 32)))
    (set! %576 (shl %575 (bv #x00000007 32)))
    (set! %577 (load %568 (bitvector 8) #:align 1))
    (set! %578 (zext %577 (bitvector 32)))
    (set! %579 (shl %578 (bv #x0000000f 32)))
    (set! %580 (or %576 %579))
    (set! %581 (or %580 (bv #x00501033 32)))
    (set! %582 (getelementptr %566 (array-offset %567 4)))
    (store %581 %582 (bitvector 32) #:align 4)
    (set! %583 (load %546 (bitvector 32) #:align 4))
    (set! %584 (load %543 pointer #:align 4))
    (set! %585 (add %583 (bv #x00000001 32)))
    (store %585 %546 (bitvector 32) #:align 4)
    (set! %586 (icmp/eq %584 nullptr))
    (br %586 %587 %590))

; %587
  (define-label (%587) #:merge #f
    (set! %588 (phi [%571 %570] [%583 %573]))
    (set! %589 (add %588 (bv #x00000003 32)))
    (br %608))

; %590
  (define-label (%590) #:merge #f
    (set! %591 (load %568 (bitvector 8) #:align 1))
    (set! %592 (zext %591 (bitvector 32)))
    (set! %593 (shl %592 (bv #x00000007 32)))
    (set! %594 (or %593 (bv #x00000013 32)))
    (set! %595 (getelementptr %584 (array-offset %585 4)))
    (store %594 %595 (bitvector 32) #:align 4)
    (set! %596 (load %543 pointer #:align 4))
    (set! %597 (load %546 (bitvector 32) #:align 4))
    (set! %598 (add %597 (bv #x00000001 32)))
    (store %598 %546 (bitvector 32) #:align 4)
    (set! %599 (icmp/eq %596 nullptr))
    (br %599 %600 %602))

; %600
  (define-label (%600) #:merge #f
    (set! %601 (add %597 (bv #x00000002 32)))
    (br %608))

; %602
  (define-label (%602) #:merge #f
    (set! %603 (getelementptr %596 (array-offset %598 4)))
    (store (bv #x0200006f 32) %603 (bitvector 32) #:align 4)
    (set! %604 (load %543 pointer #:align 4))
    (set! %605 (load %546 (bitvector 32) #:align 4))
    (set! %606 (add %605 (bv #x00000001 32)))
    (store %606 %546 (bitvector 32) #:align 4)
    (set! %607 (icmp/eq %604 nullptr))
    (br %607 %610 %613))

; %608
  (define-label (%608) #:merge #f
    (set! %609 (phi [%601 %600] [%589 %587]))
    (store %609 %546 (bitvector 32) #:align 4)
    (br %610))

; %610
  (define-label (%610) #:merge #f
    (set! %611 (phi [%606 %602] [%609 %608]))
    (set! %612 (add %611 (bv #x00000001 32)))
    (store %612 %546 (bitvector 32) #:align 4)
    (br %619))

; %613
  (define-label (%613) #:merge #f
    (set! %614 (getelementptr %604 (array-offset %606 4)))
    (store (bv #x01f00313 32) %614 (bitvector 32) #:align 4)
    (set! %615 (load %546 (bitvector 32) #:align 4))
    (set! %616 (load %543 pointer #:align 4))
    (set! %617 (add %615 (bv #x00000001 32)))
    (store %617 %546 (bitvector 32) #:align 4)
    (set! %618 (icmp/eq %616 nullptr))
    (br %618 %619 %622))

; %619
  (define-label (%619) #:merge #f
    (set! %620 (phi [%612 %610] [%617 %613]))
    (set! %621 (add %620 (bv #x00000001 32)))
    (store %621 %546 (bitvector 32) #:align 4)
    (br %632))

; %622
  (define-label (%622) #:merge #f
    (set! %623 (load %568 (bitvector 8) #:align 1))
    (set! %624 (zext %623 (bitvector 32)))
    (set! %625 (shl %624 (bv #x0000000f 32)))
    (set! %626 (or %625 (bv #x00105293 32)))
    (set! %627 (getelementptr %616 (array-offset %617 4)))
    (store %626 %627 (bitvector 32) #:align 4)
    (set! %628 (load %546 (bitvector 32) #:align 4))
    (set! %629 (load %543 pointer #:align 4))
    (set! %630 (add %628 (bv #x00000001 32)))
    (store %630 %546 (bitvector 32) #:align 4)
    (set! %631 (icmp/eq %629 nullptr))
    (br %631 %632 %635))

; %632
  (define-label (%632) #:merge #f
    (set! %633 (phi [%620 %619] [%628 %622]))
    (set! %634 (add %633 (bv #x00000002 32)))
    (store %634 %546 (bitvector 32) #:align 4)
    (br %645))

; %635
  (define-label (%635) #:merge #f
    (set! %636 (load %542 (bitvector 8) #:align 1))
    (set! %637 (zext %636 (bitvector 32)))
    (set! %638 (shl %637 (bv #x00000014 32)))
    (set! %639 (or %638 (bv #x40030333 32)))
    (set! %640 (getelementptr %629 (array-offset %630 4)))
    (store %639 %640 (bitvector 32) #:align 4)
    (set! %641 (load %543 pointer #:align 4))
    (set! %642 (load %546 (bitvector 32) #:align 4))
    (set! %643 (add %642 (bv #x00000001 32)))
    (store %643 %546 (bitvector 32) #:align 4)
    (set! %644 (icmp/eq %641 nullptr))
    (br %644 %645 %648))

; %645
  (define-label (%645) #:merge #f
    (set! %646 (phi [%643 %635] [%634 %632]))
    (set! %647 (add %646 (bv #x00000001 32)))
    (store %647 %546 (bitvector 32) #:align 4)
    (br %656))

; %648
  (define-label (%648) #:merge #f
    (set! %649 (getelementptr %641 (array-offset %643 4)))
    (store (bv #x0062d2b3 32) %649 (bitvector 32) #:align 4)
    (set! %650 (load %546 (bitvector 32) #:align 4))
    (set! %651 (load %543 pointer #:align 4))
    (set! %652 (add %650 (bv #x00000001 32)))
    (store %652 %546 (bitvector 32) #:align 4)
    (set! %653 (load %39 (bitvector 8) #:align 1))
    (set! %654 (zext %653 (bitvector 32)))
    (set! %655 (icmp/eq %651 nullptr))
    (br %655 %656 %659))

; %656
  (define-label (%656) #:merge #f
    (set! %657 (phi [%647 %645] [%652 %648]))
    (set! %658 (add %657 (bv #x00000001 32)))
    (store %658 %546 (bitvector 32) #:align 4)
    (br %675))

; %659
  (define-label (%659) #:merge #f
    (set! %660 (shl %654 (bv #x00000007 32)))
    (set! %661 (shl %654 (bv #x0000000f 32)))
    (set! %662 (load %542 (bitvector 8) #:align 1))
    (set! %663 (zext %662 (bitvector 32)))
    (set! %664 (shl %663 (bv #x00000014 32)))
    (set! %665 (or %661 %660))
    (set! %666 (or %665 %664))
    (set! %667 (or %666 (bv #x00001033 32)))
    (set! %668 (getelementptr %651 (array-offset %652 4)))
    (store %667 %668 (bitvector 32) #:align 4)
    (set! %669 (load %546 (bitvector 32) #:align 4))
    (set! %670 (load %543 pointer #:align 4))
    (set! %671 (add %669 (bv #x00000001 32)))
    (store %671 %546 (bitvector 32) #:align 4)
    (set! %672 (load %39 (bitvector 8) #:align 1))
    (set! %673 (zext %672 (bitvector 32)))
    (set! %674 (icmp/eq %670 nullptr))
    (br %674 %675 %678))

; %675
  (define-label (%675) #:merge #f
    (set! %676 (phi [%658 %656] [%671 %659]))
    (set! %677 (add %676 (bv #x00000001 32)))
    (store %677 %546 (bitvector 32) #:align 4)
    (br %1086))

; %678
  (define-label (%678) #:merge #f
    (set! %679 (shl %673 (bv #x00000007 32)))
    (set! %680 (shl %673 (bv #x00000014 32)))
    (set! %681 (or %680 %679))
    (set! %682 (or %681 (bv #x0002e033 32)))
    (set! %683 (getelementptr %670 (array-offset %671 4)))
    (store %682 %683 (bitvector 32) #:align 4)
    (set! %684 (load %546 (bitvector 32) #:align 4))
    (set! %685 (load %543 pointer #:align 4))
    (set! %686 (add %684 (bv #x00000001 32)))
    (store %686 %546 (bitvector 32) #:align 4)
    (set! %687 (load %568 (bitvector 8) #:align 1))
    (set! %688 (zext %687 (bitvector 32)))
    (set! %689 (icmp/eq %685 nullptr))
    (br %689 %1086 %690))

; %690
  (define-label (%690) #:merge #f
    (set! %691 (shl %688 (bv #x00000007 32)))
    (set! %692 (shl %688 (bv #x0000000f 32)))
    (set! %693 (load %542 (bitvector 8) #:align 1))
    (set! %694 (zext %693 (bitvector 32)))
    (set! %695 (shl %694 (bv #x00000014 32)))
    (set! %696 (or %692 %691))
    (set! %697 (or %696 %695))
    (set! %698 (or %697 (bv #x00001033 32)))
    (set! %699 (getelementptr %685 (array-offset %686 4)))
    (store %698 %699 (bitvector 32) #:align 4)
    (set! %700 (load %546 (bitvector 32) #:align 4))
    (br %1086))

; %701
  (define-label (%701) #:merge #f
    (set! %702 (getelementptr %74 (array-offset (bv #x00000001 32) 1)))
    (set! %703 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %704 (load %703 pointer #:align 4))
    (set! %705 (icmp/eq %704 nullptr))
    (set! %706 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %707 (load %706 (bitvector 32) #:align 4))
    (br %705 %708 %710))

; %708
  (define-label (%708) #:merge #f
    (set! %709 (add %707 (bv #x00000001 32)))
    (store %709 %706 (bitvector 32) #:align 4)
    (br %720))

; %710
  (define-label (%710) #:merge #f
    (set! %711 (load %702 (bitvector 8) #:align 1))
    (set! %712 (zext %711 (bitvector 32)))
    (set! %713 (shl %712 (bv #x0000000f 32)))
    (set! %714 (or %713 (bv #xfe000293 32)))
    (set! %715 (getelementptr %704 (array-offset %707 4)))
    (store %714 %715 (bitvector 32) #:align 4)
    (set! %716 (load %703 pointer #:align 4))
    (set! %717 (load %706 (bitvector 32) #:align 4))
    (set! %718 (add %717 (bv #x00000001 32)))
    (store %718 %706 (bitvector 32) #:align 4)
    (set! %719 (icmp/eq %716 nullptr))
    (br %719 %720 %723))

; %720
  (define-label (%720) #:merge #f
    (set! %721 (phi [%718 %710] [%709 %708]))
    (set! %722 (add %721 (bv #x00000001 32)))
    (store %722 %706 (bitvector 32) #:align 4)
    (br %730))

; %723
  (define-label (%723) #:merge #f
    (set! %724 (getelementptr %716 (array-offset %718 4)))
    (store (bv #x0002c863 32) %724 (bitvector 32) #:align 4)
    (set! %725 (load %706 (bitvector 32) #:align 4))
    (set! %726 (load %703 pointer #:align 4))
    (set! %727 (add %725 (bv #x00000001 32)))
    (store %727 %706 (bitvector 32) #:align 4)
    (set! %728 (getelementptr %39 (array-offset (bv #x00000001 32) 1)))
    (set! %729 (icmp/eq %726 nullptr))
    (br %729 %730 %733))

; %730
  (define-label (%730) #:merge #f
    (set! %731 (phi [%722 %720] [%727 %723]))
    (set! %732 (add %731 (bv #x00000001 32)))
    (store %732 %706 (bitvector 32) #:align 4)
    (br %747))

; %733
  (define-label (%733) #:merge #f
    (set! %734 (load %728 (bitvector 8) #:align 1))
    (set! %735 (zext %734 (bitvector 32)))
    (set! %736 (shl %735 (bv #x00000007 32)))
    (set! %737 (load %39 (bitvector 8) #:align 1))
    (set! %738 (zext %737 (bitvector 32)))
    (set! %739 (shl %738 (bv #x0000000f 32)))
    (set! %740 (or %736 %739))
    (set! %741 (or %740 (bv #x00505033 32)))
    (set! %742 (getelementptr %726 (array-offset %727 4)))
    (store %741 %742 (bitvector 32) #:align 4)
    (set! %743 (load %706 (bitvector 32) #:align 4))
    (set! %744 (load %703 pointer #:align 4))
    (set! %745 (add %743 (bv #x00000001 32)))
    (store %745 %706 (bitvector 32) #:align 4)
    (set! %746 (icmp/eq %744 nullptr))
    (br %746 %747 %750))

; %747
  (define-label (%747) #:merge #f
    (set! %748 (phi [%731 %730] [%743 %733]))
    (set! %749 (add %748 (bv #x00000003 32)))
    (br %768))

; %750
  (define-label (%750) #:merge #f
    (set! %751 (load %39 (bitvector 8) #:align 1))
    (set! %752 (zext %751 (bitvector 32)))
    (set! %753 (shl %752 (bv #x00000007 32)))
    (set! %754 (or %753 (bv #x00000013 32)))
    (set! %755 (getelementptr %744 (array-offset %745 4)))
    (store %754 %755 (bitvector 32) #:align 4)
    (set! %756 (load %703 pointer #:align 4))
    (set! %757 (load %706 (bitvector 32) #:align 4))
    (set! %758 (add %757 (bv #x00000001 32)))
    (store %758 %706 (bitvector 32) #:align 4)
    (set! %759 (icmp/eq %756 nullptr))
    (br %759 %760 %762))

; %760
  (define-label (%760) #:merge #f
    (set! %761 (add %757 (bv #x00000002 32)))
    (br %768))

; %762
  (define-label (%762) #:merge #f
    (set! %763 (getelementptr %756 (array-offset %758 4)))
    (store (bv #x0200006f 32) %763 (bitvector 32) #:align 4)
    (set! %764 (load %703 pointer #:align 4))
    (set! %765 (load %706 (bitvector 32) #:align 4))
    (set! %766 (add %765 (bv #x00000001 32)))
    (store %766 %706 (bitvector 32) #:align 4)
    (set! %767 (icmp/eq %764 nullptr))
    (br %767 %770 %773))

; %768
  (define-label (%768) #:merge #f
    (set! %769 (phi [%761 %760] [%749 %747]))
    (store %769 %706 (bitvector 32) #:align 4)
    (br %770))

; %770
  (define-label (%770) #:merge #f
    (set! %771 (phi [%766 %762] [%769 %768]))
    (set! %772 (add %771 (bv #x00000001 32)))
    (store %772 %706 (bitvector 32) #:align 4)
    (br %779))

; %773
  (define-label (%773) #:merge #f
    (set! %774 (getelementptr %764 (array-offset %766 4)))
    (store (bv #x01f00313 32) %774 (bitvector 32) #:align 4)
    (set! %775 (load %706 (bitvector 32) #:align 4))
    (set! %776 (load %703 pointer #:align 4))
    (set! %777 (add %775 (bv #x00000001 32)))
    (store %777 %706 (bitvector 32) #:align 4)
    (set! %778 (icmp/eq %776 nullptr))
    (br %778 %779 %782))

; %779
  (define-label (%779) #:merge #f
    (set! %780 (phi [%772 %770] [%777 %773]))
    (set! %781 (add %780 (bv #x00000001 32)))
    (store %781 %706 (bitvector 32) #:align 4)
    (br %792))

; %782
  (define-label (%782) #:merge #f
    (set! %783 (load %39 (bitvector 8) #:align 1))
    (set! %784 (zext %783 (bitvector 32)))
    (set! %785 (shl %784 (bv #x0000000f 32)))
    (set! %786 (or %785 (bv #x00101293 32)))
    (set! %787 (getelementptr %776 (array-offset %777 4)))
    (store %786 %787 (bitvector 32) #:align 4)
    (set! %788 (load %706 (bitvector 32) #:align 4))
    (set! %789 (load %703 pointer #:align 4))
    (set! %790 (add %788 (bv #x00000001 32)))
    (store %790 %706 (bitvector 32) #:align 4)
    (set! %791 (icmp/eq %789 nullptr))
    (br %791 %792 %795))

; %792
  (define-label (%792) #:merge #f
    (set! %793 (phi [%780 %779] [%788 %782]))
    (set! %794 (add %793 (bv #x00000002 32)))
    (store %794 %706 (bitvector 32) #:align 4)
    (br %805))

; %795
  (define-label (%795) #:merge #f
    (set! %796 (load %702 (bitvector 8) #:align 1))
    (set! %797 (zext %796 (bitvector 32)))
    (set! %798 (shl %797 (bv #x00000014 32)))
    (set! %799 (or %798 (bv #x40030333 32)))
    (set! %800 (getelementptr %789 (array-offset %790 4)))
    (store %799 %800 (bitvector 32) #:align 4)
    (set! %801 (load %703 pointer #:align 4))
    (set! %802 (load %706 (bitvector 32) #:align 4))
    (set! %803 (add %802 (bv #x00000001 32)))
    (store %803 %706 (bitvector 32) #:align 4)
    (set! %804 (icmp/eq %801 nullptr))
    (br %804 %805 %808))

; %805
  (define-label (%805) #:merge #f
    (set! %806 (phi [%803 %795] [%794 %792]))
    (set! %807 (add %806 (bv #x00000001 32)))
    (store %807 %706 (bitvector 32) #:align 4)
    (br %816))

; %808
  (define-label (%808) #:merge #f
    (set! %809 (getelementptr %801 (array-offset %803 4)))
    (store (bv #x006292b3 32) %809 (bitvector 32) #:align 4)
    (set! %810 (load %706 (bitvector 32) #:align 4))
    (set! %811 (load %703 pointer #:align 4))
    (set! %812 (add %810 (bv #x00000001 32)))
    (store %812 %706 (bitvector 32) #:align 4)
    (set! %813 (load %728 (bitvector 8) #:align 1))
    (set! %814 (zext %813 (bitvector 32)))
    (set! %815 (icmp/eq %811 nullptr))
    (br %815 %816 %819))

; %816
  (define-label (%816) #:merge #f
    (set! %817 (phi [%807 %805] [%812 %808]))
    (set! %818 (add %817 (bv #x00000001 32)))
    (store %818 %706 (bitvector 32) #:align 4)
    (br %835))

; %819
  (define-label (%819) #:merge #f
    (set! %820 (shl %814 (bv #x00000007 32)))
    (set! %821 (shl %814 (bv #x0000000f 32)))
    (set! %822 (load %702 (bitvector 8) #:align 1))
    (set! %823 (zext %822 (bitvector 32)))
    (set! %824 (shl %823 (bv #x00000014 32)))
    (set! %825 (or %821 %820))
    (set! %826 (or %825 %824))
    (set! %827 (or %826 (bv #x00005033 32)))
    (set! %828 (getelementptr %811 (array-offset %812 4)))
    (store %827 %828 (bitvector 32) #:align 4)
    (set! %829 (load %706 (bitvector 32) #:align 4))
    (set! %830 (load %703 pointer #:align 4))
    (set! %831 (add %829 (bv #x00000001 32)))
    (store %831 %706 (bitvector 32) #:align 4)
    (set! %832 (load %728 (bitvector 8) #:align 1))
    (set! %833 (zext %832 (bitvector 32)))
    (set! %834 (icmp/eq %830 nullptr))
    (br %834 %835 %838))

; %835
  (define-label (%835) #:merge #f
    (set! %836 (phi [%818 %816] [%831 %819]))
    (set! %837 (add %836 (bv #x00000001 32)))
    (store %837 %706 (bitvector 32) #:align 4)
    (br %1086))

; %838
  (define-label (%838) #:merge #f
    (set! %839 (shl %833 (bv #x00000007 32)))
    (set! %840 (shl %833 (bv #x00000014 32)))
    (set! %841 (or %840 %839))
    (set! %842 (or %841 (bv #x0002e033 32)))
    (set! %843 (getelementptr %830 (array-offset %831 4)))
    (store %842 %843 (bitvector 32) #:align 4)
    (set! %844 (load %706 (bitvector 32) #:align 4))
    (set! %845 (load %703 pointer #:align 4))
    (set! %846 (add %844 (bv #x00000001 32)))
    (store %846 %706 (bitvector 32) #:align 4)
    (set! %847 (load %39 (bitvector 8) #:align 1))
    (set! %848 (zext %847 (bitvector 32)))
    (set! %849 (icmp/eq %845 nullptr))
    (br %849 %1086 %850))

; %850
  (define-label (%850) #:merge #f
    (set! %851 (shl %848 (bv #x00000007 32)))
    (set! %852 (shl %848 (bv #x0000000f 32)))
    (set! %853 (load %702 (bitvector 8) #:align 1))
    (set! %854 (zext %853 (bitvector 32)))
    (set! %855 (shl %854 (bv #x00000014 32)))
    (set! %856 (or %852 %851))
    (set! %857 (or %856 %855))
    (set! %858 (or %857 (bv #x00005033 32)))
    (set! %859 (getelementptr %845 (array-offset %846 4)))
    (store %858 %859 (bitvector 32) #:align 4)
    (set! %860 (load %706 (bitvector 32) #:align 4))
    (br %1086))

; %861
  (define-label (%861) #:merge #f
    (set! %862 (getelementptr %74 (array-offset (bv #x00000001 32) 1)))
    (set! %863 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %864 (load %863 pointer #:align 4))
    (set! %865 (icmp/eq %864 nullptr))
    (set! %866 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %867 (load %866 (bitvector 32) #:align 4))
    (br %865 %868 %870))

; %868
  (define-label (%868) #:merge #f
    (set! %869 (add %867 (bv #x00000001 32)))
    (store %869 %866 (bitvector 32) #:align 4)
    (br %880))

; %870
  (define-label (%870) #:merge #f
    (set! %871 (load %862 (bitvector 8) #:align 1))
    (set! %872 (zext %871 (bitvector 32)))
    (set! %873 (shl %872 (bv #x0000000f 32)))
    (set! %874 (or %873 (bv #xfe000293 32)))
    (set! %875 (getelementptr %864 (array-offset %867 4)))
    (store %874 %875 (bitvector 32) #:align 4)
    (set! %876 (load %863 pointer #:align 4))
    (set! %877 (load %866 (bitvector 32) #:align 4))
    (set! %878 (add %877 (bv #x00000001 32)))
    (store %878 %866 (bitvector 32) #:align 4)
    (set! %879 (icmp/eq %876 nullptr))
    (br %879 %880 %883))

; %880
  (define-label (%880) #:merge #f
    (set! %881 (phi [%878 %870] [%869 %868]))
    (set! %882 (add %881 (bv #x00000001 32)))
    (store %882 %866 (bitvector 32) #:align 4)
    (br %890))

; %883
  (define-label (%883) #:merge #f
    (set! %884 (getelementptr %876 (array-offset %878 4)))
    (store (bv #x0002c863 32) %884 (bitvector 32) #:align 4)
    (set! %885 (load %866 (bitvector 32) #:align 4))
    (set! %886 (load %863 pointer #:align 4))
    (set! %887 (add %885 (bv #x00000001 32)))
    (store %887 %866 (bitvector 32) #:align 4)
    (set! %888 (getelementptr %39 (array-offset (bv #x00000001 32) 1)))
    (set! %889 (icmp/eq %886 nullptr))
    (br %889 %890 %893))

; %890
  (define-label (%890) #:merge #f
    (set! %891 (phi [%882 %880] [%887 %883]))
    (set! %892 (add %891 (bv #x00000001 32)))
    (store %892 %866 (bitvector 32) #:align 4)
    (br %909))

; %893
  (define-label (%893) #:merge #f
    (set! %894 (load %888 (bitvector 8) #:align 1))
    (set! %895 (zext %894 (bitvector 32)))
    (set! %896 (shl %895 (bv #x00000007 32)))
    (set! %897 (load %39 (bitvector 8) #:align 1))
    (set! %898 (zext %897 (bitvector 32)))
    (set! %899 (shl %898 (bv #x0000000f 32)))
    (set! %900 (or %896 %899))
    (set! %901 (or %900 (bv #x40505033 32)))
    (set! %902 (getelementptr %886 (array-offset %887 4)))
    (store %901 %902 (bitvector 32) #:align 4)
    (set! %903 (load %866 (bitvector 32) #:align 4))
    (set! %904 (load %863 pointer #:align 4))
    (set! %905 (add %903 (bv #x00000001 32)))
    (store %905 %866 (bitvector 32) #:align 4)
    (set! %906 (load %39 (bitvector 8) #:align 1))
    (set! %907 (zext %906 (bitvector 32)))
    (set! %908 (icmp/eq %904 nullptr))
    (br %908 %909 %912))

; %909
  (define-label (%909) #:merge #f
    (set! %910 (phi [%891 %890] [%903 %893]))
    (set! %911 (add %910 (bv #x00000003 32)))
    (br %930))

; %912
  (define-label (%912) #:merge #f
    (set! %913 (shl %907 (bv #x00000007 32)))
    (set! %914 (shl %907 (bv #x0000000f 32)))
    (set! %915 (or %914 %913))
    (set! %916 (or %915 (bv #x41f05013 32)))
    (set! %917 (getelementptr %904 (array-offset %905 4)))
    (store %916 %917 (bitvector 32) #:align 4)
    (set! %918 (load %863 pointer #:align 4))
    (set! %919 (load %866 (bitvector 32) #:align 4))
    (set! %920 (add %919 (bv #x00000001 32)))
    (store %920 %866 (bitvector 32) #:align 4)
    (set! %921 (icmp/eq %918 nullptr))
    (br %921 %922 %924))

; %922
  (define-label (%922) #:merge #f
    (set! %923 (add %919 (bv #x00000002 32)))
    (br %930))

; %924
  (define-label (%924) #:merge #f
    (set! %925 (getelementptr %918 (array-offset %920 4)))
    (store (bv #x0200006f 32) %925 (bitvector 32) #:align 4)
    (set! %926 (load %863 pointer #:align 4))
    (set! %927 (load %866 (bitvector 32) #:align 4))
    (set! %928 (add %927 (bv #x00000001 32)))
    (store %928 %866 (bitvector 32) #:align 4)
    (set! %929 (icmp/eq %926 nullptr))
    (br %929 %932 %935))

; %930
  (define-label (%930) #:merge #f
    (set! %931 (phi [%923 %922] [%911 %909]))
    (store %931 %866 (bitvector 32) #:align 4)
    (br %932))

; %932
  (define-label (%932) #:merge #f
    (set! %933 (phi [%928 %924] [%931 %930]))
    (set! %934 (add %933 (bv #x00000001 32)))
    (store %934 %866 (bitvector 32) #:align 4)
    (br %941))

; %935
  (define-label (%935) #:merge #f
    (set! %936 (getelementptr %926 (array-offset %928 4)))
    (store (bv #x01f00313 32) %936 (bitvector 32) #:align 4)
    (set! %937 (load %866 (bitvector 32) #:align 4))
    (set! %938 (load %863 pointer #:align 4))
    (set! %939 (add %937 (bv #x00000001 32)))
    (store %939 %866 (bitvector 32) #:align 4)
    (set! %940 (icmp/eq %938 nullptr))
    (br %940 %941 %944))

; %941
  (define-label (%941) #:merge #f
    (set! %942 (phi [%934 %932] [%939 %935]))
    (set! %943 (add %942 (bv #x00000001 32)))
    (store %943 %866 (bitvector 32) #:align 4)
    (br %954))

; %944
  (define-label (%944) #:merge #f
    (set! %945 (load %39 (bitvector 8) #:align 1))
    (set! %946 (zext %945 (bitvector 32)))
    (set! %947 (shl %946 (bv #x0000000f 32)))
    (set! %948 (or %947 (bv #x00101293 32)))
    (set! %949 (getelementptr %938 (array-offset %939 4)))
    (store %948 %949 (bitvector 32) #:align 4)
    (set! %950 (load %866 (bitvector 32) #:align 4))
    (set! %951 (load %863 pointer #:align 4))
    (set! %952 (add %950 (bv #x00000001 32)))
    (store %952 %866 (bitvector 32) #:align 4)
    (set! %953 (icmp/eq %951 nullptr))
    (br %953 %954 %957))

; %954
  (define-label (%954) #:merge #f
    (set! %955 (phi [%942 %941] [%950 %944]))
    (set! %956 (add %955 (bv #x00000002 32)))
    (store %956 %866 (bitvector 32) #:align 4)
    (br %967))

; %957
  (define-label (%957) #:merge #f
    (set! %958 (load %862 (bitvector 8) #:align 1))
    (set! %959 (zext %958 (bitvector 32)))
    (set! %960 (shl %959 (bv #x00000014 32)))
    (set! %961 (or %960 (bv #x40030333 32)))
    (set! %962 (getelementptr %951 (array-offset %952 4)))
    (store %961 %962 (bitvector 32) #:align 4)
    (set! %963 (load %863 pointer #:align 4))
    (set! %964 (load %866 (bitvector 32) #:align 4))
    (set! %965 (add %964 (bv #x00000001 32)))
    (store %965 %866 (bitvector 32) #:align 4)
    (set! %966 (icmp/eq %963 nullptr))
    (br %966 %967 %970))

; %967
  (define-label (%967) #:merge #f
    (set! %968 (phi [%965 %957] [%956 %954]))
    (set! %969 (add %968 (bv #x00000001 32)))
    (store %969 %866 (bitvector 32) #:align 4)
    (br %978))

; %970
  (define-label (%970) #:merge #f
    (set! %971 (getelementptr %963 (array-offset %965 4)))
    (store (bv #x006292b3 32) %971 (bitvector 32) #:align 4)
    (set! %972 (load %866 (bitvector 32) #:align 4))
    (set! %973 (load %863 pointer #:align 4))
    (set! %974 (add %972 (bv #x00000001 32)))
    (store %974 %866 (bitvector 32) #:align 4)
    (set! %975 (load %888 (bitvector 8) #:align 1))
    (set! %976 (zext %975 (bitvector 32)))
    (set! %977 (icmp/eq %973 nullptr))
    (br %977 %978 %981))

; %978
  (define-label (%978) #:merge #f
    (set! %979 (phi [%969 %967] [%974 %970]))
    (set! %980 (add %979 (bv #x00000001 32)))
    (store %980 %866 (bitvector 32) #:align 4)
    (br %997))

; %981
  (define-label (%981) #:merge #f
    (set! %982 (shl %976 (bv #x00000007 32)))
    (set! %983 (shl %976 (bv #x0000000f 32)))
    (set! %984 (load %862 (bitvector 8) #:align 1))
    (set! %985 (zext %984 (bitvector 32)))
    (set! %986 (shl %985 (bv #x00000014 32)))
    (set! %987 (or %983 %982))
    (set! %988 (or %987 %986))
    (set! %989 (or %988 (bv #x00005033 32)))
    (set! %990 (getelementptr %973 (array-offset %974 4)))
    (store %989 %990 (bitvector 32) #:align 4)
    (set! %991 (load %866 (bitvector 32) #:align 4))
    (set! %992 (load %863 pointer #:align 4))
    (set! %993 (add %991 (bv #x00000001 32)))
    (store %993 %866 (bitvector 32) #:align 4)
    (set! %994 (load %888 (bitvector 8) #:align 1))
    (set! %995 (zext %994 (bitvector 32)))
    (set! %996 (icmp/eq %992 nullptr))
    (br %996 %997 %1000))

; %997
  (define-label (%997) #:merge #f
    (set! %998 (phi [%980 %978] [%993 %981]))
    (set! %999 (add %998 (bv #x00000001 32)))
    (store %999 %866 (bitvector 32) #:align 4)
    (br %1086))

; %1000
  (define-label (%1000) #:merge #f
    (set! %1001 (shl %995 (bv #x00000007 32)))
    (set! %1002 (shl %995 (bv #x00000014 32)))
    (set! %1003 (or %1002 %1001))
    (set! %1004 (or %1003 (bv #x0002e033 32)))
    (set! %1005 (getelementptr %992 (array-offset %993 4)))
    (store %1004 %1005 (bitvector 32) #:align 4)
    (set! %1006 (load %866 (bitvector 32) #:align 4))
    (set! %1007 (load %863 pointer #:align 4))
    (set! %1008 (add %1006 (bv #x00000001 32)))
    (store %1008 %866 (bitvector 32) #:align 4)
    (set! %1009 (load %39 (bitvector 8) #:align 1))
    (set! %1010 (zext %1009 (bitvector 32)))
    (set! %1011 (icmp/eq %1007 nullptr))
    (br %1011 %1086 %1012))

; %1012
  (define-label (%1012) #:merge #f
    (set! %1013 (shl %1010 (bv #x00000007 32)))
    (set! %1014 (shl %1010 (bv #x0000000f 32)))
    (set! %1015 (load %862 (bitvector 8) #:align 1))
    (set! %1016 (zext %1015 (bitvector 32)))
    (set! %1017 (shl %1016 (bv #x00000014 32)))
    (set! %1018 (or %1014 %1013))
    (set! %1019 (or %1018 %1017))
    (set! %1020 (or %1019 (bv #x40005033 32)))
    (set! %1021 (getelementptr %1007 (array-offset %1008 4)))
    (store %1020 %1021 (bitvector 32) #:align 4)
    (set! %1022 (load %866 (bitvector 32) #:align 4))
    (br %1086))

; %1023
  (define-label (%1023) #:merge #f
    (set! %1024 (getelementptr %39 (array-offset (bv #x00000001 32) 1)))
    (set! %1025 (load %1024 (bitvector 8) #:align 1))
    (set! %1026 (zext %1025 (bitvector 32)))
    (set! %1027 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1028 (load %1027 pointer #:align 4))
    (set! %1029 (icmp/eq %1028 nullptr))
    (br %1029 %1030 %1034))

; %1030
  (define-label (%1030) #:merge #f
    (set! %1031 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1032 (load %1031 (bitvector 32) #:align 4))
    (set! %1033 (add %1032 (bv #x00000001 32)))
    (store %1033 %1031 (bitvector 32) #:align 4)
    (br %1047))

; %1034
  (define-label (%1034) #:merge #f
    (set! %1035 (shl %1026 (bv #x00000007 32)))
    (set! %1036 (shl %1026 (bv #x00000014 32)))
    (set! %1037 (or %1036 %1035))
    (set! %1038 (or %1037 (bv #x40000033 32)))
    (set! %1039 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1040 (load %1039 (bitvector 32) #:align 4))
    (set! %1041 (getelementptr %1028 (array-offset %1040 4)))
    (store %1038 %1041 (bitvector 32) #:align 4)
    (set! %1042 (load %1027 pointer #:align 4))
    (set! %1043 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1044 (load %1043 (bitvector 32) #:align 4))
    (set! %1045 (add %1044 (bv #x00000001 32)))
    (store %1045 %1043 (bitvector 32) #:align 4)
    (set! %1046 (icmp/eq %1042 nullptr))
    (br %1046 %1047 %1051))

; %1047
  (define-label (%1047) #:merge #f
    (set! %1048 (phi [%1031 %1030] [%1043 %1034]))
    (set! %1049 (phi [%1033 %1030] [%1045 %1034]))
    (set! %1050 (add %1049 (bv #x00000001 32)))
    (store %1050 %1048 (bitvector 32) #:align 4)
    (br %1063))

; %1051
  (define-label (%1051) #:merge #f
    (set! %1052 (load %1024 (bitvector 8) #:align 1))
    (set! %1053 (zext %1052 (bitvector 32)))
    (set! %1054 (shl %1053 (bv #x00000014 32)))
    (set! %1055 (or %1054 (bv #x000032b3 32)))
    (set! %1056 (getelementptr %1042 (array-offset %1045 4)))
    (store %1055 %1056 (bitvector 32) #:align 4)
    (set! %1057 (load %1043 (bitvector 32) #:align 4))
    (set! %1058 (load %1027 pointer #:align 4))
    (set! %1059 (add %1057 (bv #x00000001 32)))
    (store %1059 %1043 (bitvector 32) #:align 4)
    (set! %1060 (load %39 (bitvector 8) #:align 1))
    (set! %1061 (zext %1060 (bitvector 32)))
    (set! %1062 (icmp/eq %1058 nullptr))
    (br %1062 %1063 %1067))

; %1063
  (define-label (%1063) #:merge #f
    (set! %1064 (phi [%1048 %1047] [%1043 %1051]))
    (set! %1065 (phi [%1050 %1047] [%1059 %1051]))
    (set! %1066 (add %1065 (bv #x00000001 32)))
    (store %1066 %1064 (bitvector 32) #:align 4)
    (br %1086))

; %1067
  (define-label (%1067) #:merge #f
    (set! %1068 (shl %1061 (bv #x00000007 32)))
    (set! %1069 (shl %1061 (bv #x00000014 32)))
    (set! %1070 (or %1069 %1068))
    (set! %1071 (or %1070 (bv #x40000033 32)))
    (set! %1072 (getelementptr %1058 (array-offset %1059 4)))
    (store %1071 %1072 (bitvector 32) #:align 4)
    (set! %1073 (load %1043 (bitvector 32) #:align 4))
    (set! %1074 (load %1027 pointer #:align 4))
    (set! %1075 (add %1073 (bv #x00000001 32)))
    (store %1075 %1043 (bitvector 32) #:align 4)
    (set! %1076 (load %39 (bitvector 8) #:align 1))
    (set! %1077 (zext %1076 (bitvector 32)))
    (set! %1078 (icmp/eq %1074 nullptr))
    (br %1078 %1086 %1079))

; %1079
  (define-label (%1079) #:merge #f
    (set! %1080 (shl %1077 (bv #x00000007 32)))
    (set! %1081 (shl %1077 (bv #x0000000f 32)))
    (set! %1082 (or %1081 %1080))
    (set! %1083 (or %1082 (bv #x40500033 32)))
    (set! %1084 (getelementptr %1074 (array-offset %1075 4)))
    (store %1083 %1084 (bitvector 32) #:align 4)
    (set! %1085 (load %1043 (bitvector 32) #:align 4))
    (br %1086))

; %1086
  (define-label (%1086) #:merge #f
    (set! %1087 (phi [%104 %87] [%116 %106] [%86 %83] [%166 %158] [%176 %170] [%157 %155] [%240 %228] [%250 %244] [%227 %224] [%303 %295] [%317 %307] [%294 %292] [%343 %339] [%357 %347] [%383 %379] [%397 %387] [%423 %419] [%437 %427] [%530 %518] [%540 %534] [%517 %515] [%686 %678] [%700 %690] [%677 %675] [%846 %838] [%860 %850] [%837 %835] [%1008 %1000] [%1022 %1012] [%999 %997] [%1075 %1067] [%1085 %1079] [%1066 %1063]))
    (set! %1088 (phi [%102 %87] [%102 %106] [%84 %83] [%135 %158] [%135 %170] [%135 %155] [%200 %228] [%200 %244] [%225 %224] [%270 %295] [%270 %307] [%270 %292] [%341 %339] [%341 %347] [%381 %379] [%381 %387] [%421 %419] [%421 %427] [%458 %518] [%458 %534] [%458 %515] [%546 %678] [%546 %690] [%546 %675] [%706 %838] [%706 %850] [%706 %835] [%866 %1000] [%866 %1012] [%866 %997] [%1043 %1067] [%1043 %1079] [%1064 %1063]))
    (set! %1089 (add %1087 (bv #x00000001 32)))
    (store %1089 %1088 (bitvector 32) #:align 4)
    (br %1090))

; %1090
  (define-label (%1090) #:merge #f
    (set! %1091 (load %0 (bitvector 8) #:align 1))
    (set! %1092 (icmp/slt %1091 (bv #x00 8)))
    (br %1092 %1093 %1143))

; %1093
  (define-label (%1093) #:merge #f
    (set! %1094 (sext %1091 (bitvector 16)))
    (set! %1095 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %1096 (load %1095 pointer #:align 4))
    (set! %1097 (icmp/eq %1096 nullptr))
    (br %1097 %1115 %1098))

; %1098
  (define-label (%1098) #:merge #f
    (set! %1099 (lshr %1094 (bv #x0005 16)))
    (set! %1100 (zext %1099 (bitvector 32)))
    (set! %1101 (shl %1100 (bv #x00000019 32)))
    (set! %1102 (load %39 (bitvector 8) #:align 1))
    (set! %1103 (zext %1102 (bitvector 32)))
    (set! %1104 (shl %1103 (bv #x00000014 32)))
    (set! %1105 (shl %1094 (bv #x0007 16)))
    (set! %1106 (and %1105 (bv #x0f80 16)))
    (set! %1107 (zext %1106 (bitvector 32)))
    (set! %1108 (or %1101 %1107))
    (set! %1109 (or %1108 %1104))
    (set! %1110 (or %1109 (bv #x00042023 32)))
    (set! %1111 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1112 (load %1111 (bitvector 32) #:align 4))
    (set! %1113 (getelementptr %1096 (array-offset %1112 4)))
    (store %1110 %1113 (bitvector 32) #:align 4)
    (set! %1114 (load %1095 pointer #:align 4))
    (br %1115))

; %1115
  (define-label (%1115) #:merge #f
    (set! %1116 (phi [#(struct:nullptr) %1093] [%1114 %1098]))
    (set! %1117 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %1118 (load %1117 (bitvector 32) #:align 4))
    (set! %1119 (add %1118 (bv #x00000001 32)))
    (store %1119 %1117 (bitvector 32) #:align 4)
    (set! %1120 (getelementptr %0 (array-offset (bv #x00000001 32) 1)))
    (set! %1121 (load %1120 (bitvector 8) #:align 1))
    (set! %1122 (sext %1121 (bitvector 16)))
    (set! %1123 (icmp/eq %1116 nullptr))
    (br %1123 %1140 %1124))

; %1124
  (define-label (%1124) #:merge #f
    (set! %1125 (lshr %1122 (bv #x0005 16)))
    (set! %1126 (zext %1125 (bitvector 32)))
    (set! %1127 (shl %1126 (bv #x00000019 32)))
    (set! %1128 (getelementptr %39 (array-offset (bv #x00000001 32) 1)))
    (set! %1129 (load %1128 (bitvector 8) #:align 1))
    (set! %1130 (zext %1129 (bitvector 32)))
    (set! %1131 (shl %1130 (bv #x00000014 32)))
    (set! %1132 (shl %1122 (bv #x0007 16)))
    (set! %1133 (and %1132 (bv #x0f80 16)))
    (set! %1134 (zext %1133 (bitvector 32)))
    (set! %1135 (or %1127 %1134))
    (set! %1136 (or %1135 %1131))
    (set! %1137 (or %1136 (bv #x00042023 32)))
    (set! %1138 (getelementptr %1116 (array-offset %1119 4)))
    (store %1137 %1138 (bitvector 32) #:align 4)
    (set! %1139 (load %1117 (bitvector 32) #:align 4))
    (br %1140))

; %1140
  (define-label (%1140) #:merge #f
    (set! %1141 (phi [%1119 %1115] [%1139 %1124]))
    (set! %1142 (add %1141 (bv #x00000001 32)))
    (store %1142 %1117 (bitvector 32) #:align 4)
    (br %1143))

; %1143
  (define-label (%1143) #:merge #f
    (ret))

  (define-value %5)
  (define-value %6)
  (define-value %8)
  (define-value %9)
  (define-value %10)
  (define-value %12)
  (define-value %13)
  (define-value %14)
  (define-value %16)
  (define-value %17)
  (define-value %18)
  (define-value %19)
  (define-value %20)
  (define-value %21)
  (define-value %22)
  (define-value %23)
  (define-value %24)
  (define-value %25)
  (define-value %27)
  (define-value %28)
  (define-value %29)
  (define-value %30)
  (define-value %31)
  (define-value %32)
  (define-value %33)
  (define-value %35)
  (define-value %36)
  (define-value %37)
  (define-value %39)
  (define-value %40)
  (define-value %41)
  (define-value %43)
  (define-value %44)
  (define-value %45)
  (define-value %47)
  (define-value %48)
  (define-value %49)
  (define-value %51)
  (define-value %52)
  (define-value %53)
  (define-value %54)
  (define-value %55)
  (define-value %56)
  (define-value %57)
  (define-value %58)
  (define-value %59)
  (define-value %60)
  (define-value %62)
  (define-value %63)
  (define-value %64)
  (define-value %65)
  (define-value %66)
  (define-value %67)
  (define-value %68)
  (define-value %70)
  (define-value %71)
  (define-value %72)
  (define-value %74)
  (define-value %75)
  (define-value %76)
  (define-value %77)
  (define-value %78)
  (define-value %80)
  (define-value %81)
  (define-value %82)
  (define-value %84)
  (define-value %85)
  (define-value %86)
  (define-value %88)
  (define-value %89)
  (define-value %90)
  (define-value %91)
  (define-value %92)
  (define-value %93)
  (define-value %94)
  (define-value %95)
  (define-value %96)
  (define-value %97)
  (define-value %98)
  (define-value %99)
  (define-value %100)
  (define-value %101)
  (define-value %102)
  (define-value %103)
  (define-value %104)
  (define-value %105)
  (define-value %107)
  (define-value %108)
  (define-value %109)
  (define-value %110)
  (define-value %111)
  (define-value %112)
  (define-value %113)
  (define-value %114)
  (define-value %115)
  (define-value %116)
  (define-value %118)
  (define-value %119)
  (define-value %120)
  (define-value %122)
  (define-value %123)
  (define-value %124)
  (define-value %126)
  (define-value %127)
  (define-value %128)
  (define-value %129)
  (define-value %130)
  (define-value %131)
  (define-value %132)
  (define-value %134)
  (define-value %135)
  (define-value %136)
  (define-value %137)
  (define-value %138)
  (define-value %139)
  (define-value %140)
  (define-value %142)
  (define-value %144)
  (define-value %145)
  (define-value %146)
  (define-value %147)
  (define-value %148)
  (define-value %149)
  (define-value %150)
  (define-value %151)
  (define-value %152)
  (define-value %153)
  (define-value %154)
  (define-value %156)
  (define-value %157)
  (define-value %159)
  (define-value %160)
  (define-value %161)
  (define-value %162)
  (define-value %163)
  (define-value %164)
  (define-value %165)
  (define-value %166)
  (define-value %167)
  (define-value %168)
  (define-value %169)
  (define-value %171)
  (define-value %172)
  (define-value %173)
  (define-value %174)
  (define-value %175)
  (define-value %176)
  (define-value %178)
  (define-value %179)
  (define-value %180)
  (define-value %181)
  (define-value %182)
  (define-value %184)
  (define-value %185)
  (define-value %186)
  (define-value %188)
  (define-value %189)
  (define-value %190)
  (define-value %191)
  (define-value %192)
  (define-value %193)
  (define-value %194)
  (define-value %195)
  (define-value %196)
  (define-value %197)
  (define-value %198)
  (define-value %199)
  (define-value %200)
  (define-value %201)
  (define-value %202)
  (define-value %203)
  (define-value %205)
  (define-value %206)
  (define-value %207)
  (define-value %209)
  (define-value %210)
  (define-value %211)
  (define-value %212)
  (define-value %213)
  (define-value %214)
  (define-value %215)
  (define-value %216)
  (define-value %217)
  (define-value %218)
  (define-value %219)
  (define-value %220)
  (define-value %221)
  (define-value %222)
  (define-value %223)
  (define-value %225)
  (define-value %226)
  (define-value %227)
  (define-value %229)
  (define-value %230)
  (define-value %231)
  (define-value %232)
  (define-value %233)
  (define-value %234)
  (define-value %235)
  (define-value %236)
  (define-value %237)
  (define-value %238)
  (define-value %239)
  (define-value %240)
  (define-value %241)
  (define-value %242)
  (define-value %243)
  (define-value %245)
  (define-value %246)
  (define-value %247)
  (define-value %248)
  (define-value %249)
  (define-value %250)
  (define-value %252)
  (define-value %253)
  (define-value %254)
  (define-value %256)
  (define-value %257)
  (define-value %258)
  (define-value %259)
  (define-value %260)
  (define-value %261)
  (define-value %262)
  (define-value %263)
  (define-value %264)
  (define-value %265)
  (define-value %266)
  (define-value %267)
  (define-value %269)
  (define-value %270)
  (define-value %271)
  (define-value %272)
  (define-value %273)
  (define-value %274)
  (define-value %275)
  (define-value %277)
  (define-value %279)
  (define-value %280)
  (define-value %281)
  (define-value %282)
  (define-value %283)
  (define-value %284)
  (define-value %285)
  (define-value %286)
  (define-value %287)
  (define-value %288)
  (define-value %289)
  (define-value %290)
  (define-value %291)
  (define-value %293)
  (define-value %294)
  (define-value %296)
  (define-value %297)
  (define-value %298)
  (define-value %299)
  (define-value %300)
  (define-value %301)
  (define-value %302)
  (define-value %303)
  (define-value %304)
  (define-value %305)
  (define-value %306)
  (define-value %308)
  (define-value %309)
  (define-value %310)
  (define-value %311)
  (define-value %312)
  (define-value %313)
  (define-value %314)
  (define-value %315)
  (define-value %316)
  (define-value %317)
  (define-value %319)
  (define-value %320)
  (define-value %321)
  (define-value %322)
  (define-value %323)
  (define-value %324)
  (define-value %326)
  (define-value %327)
  (define-value %328)
  (define-value %329)
  (define-value %330)
  (define-value %331)
  (define-value %332)
  (define-value %333)
  (define-value %334)
  (define-value %335)
  (define-value %336)
  (define-value %337)
  (define-value %338)
  (define-value %340)
  (define-value %341)
  (define-value %342)
  (define-value %343)
  (define-value %344)
  (define-value %345)
  (define-value %346)
  (define-value %348)
  (define-value %349)
  (define-value %350)
  (define-value %351)
  (define-value %352)
  (define-value %353)
  (define-value %354)
  (define-value %355)
  (define-value %356)
  (define-value %357)
  (define-value %359)
  (define-value %360)
  (define-value %361)
  (define-value %362)
  (define-value %363)
  (define-value %364)
  (define-value %366)
  (define-value %367)
  (define-value %368)
  (define-value %369)
  (define-value %370)
  (define-value %371)
  (define-value %372)
  (define-value %373)
  (define-value %374)
  (define-value %375)
  (define-value %376)
  (define-value %377)
  (define-value %378)
  (define-value %380)
  (define-value %381)
  (define-value %382)
  (define-value %383)
  (define-value %384)
  (define-value %385)
  (define-value %386)
  (define-value %388)
  (define-value %389)
  (define-value %390)
  (define-value %391)
  (define-value %392)
  (define-value %393)
  (define-value %394)
  (define-value %395)
  (define-value %396)
  (define-value %397)
  (define-value %399)
  (define-value %400)
  (define-value %401)
  (define-value %402)
  (define-value %403)
  (define-value %404)
  (define-value %406)
  (define-value %407)
  (define-value %408)
  (define-value %409)
  (define-value %410)
  (define-value %411)
  (define-value %412)
  (define-value %413)
  (define-value %414)
  (define-value %415)
  (define-value %416)
  (define-value %417)
  (define-value %418)
  (define-value %420)
  (define-value %421)
  (define-value %422)
  (define-value %423)
  (define-value %424)
  (define-value %425)
  (define-value %426)
  (define-value %428)
  (define-value %429)
  (define-value %430)
  (define-value %431)
  (define-value %432)
  (define-value %433)
  (define-value %434)
  (define-value %435)
  (define-value %436)
  (define-value %437)
  (define-value %439)
  (define-value %440)
  (define-value %441)
  (define-value %442)
  (define-value %444)
  (define-value %445)
  (define-value %446)
  (define-value %447)
  (define-value %448)
  (define-value %449)
  (define-value %450)
  (define-value %451)
  (define-value %452)
  (define-value %453)
  (define-value %454)
  (define-value %455)
  (define-value %457)
  (define-value %458)
  (define-value %459)
  (define-value %460)
  (define-value %461)
  (define-value %462)
  (define-value %463)
  (define-value %464)
  (define-value %466)
  (define-value %468)
  (define-value %469)
  (define-value %470)
  (define-value %471)
  (define-value %472)
  (define-value %473)
  (define-value %474)
  (define-value %475)
  (define-value %476)
  (define-value %477)
  (define-value %478)
  (define-value %479)
  (define-value %480)
  (define-value %482)
  (define-value %483)
  (define-value %485)
  (define-value %486)
  (define-value %487)
  (define-value %488)
  (define-value %489)
  (define-value %490)
  (define-value %491)
  (define-value %492)
  (define-value %493)
  (define-value %494)
  (define-value %495)
  (define-value %496)
  (define-value %497)
  (define-value %498)
  (define-value %499)
  (define-value %501)
  (define-value %502)
  (define-value %504)
  (define-value %505)
  (define-value %506)
  (define-value %507)
  (define-value %508)
  (define-value %509)
  (define-value %510)
  (define-value %511)
  (define-value %512)
  (define-value %513)
  (define-value %514)
  (define-value %516)
  (define-value %517)
  (define-value %519)
  (define-value %520)
  (define-value %521)
  (define-value %522)
  (define-value %523)
  (define-value %524)
  (define-value %525)
  (define-value %526)
  (define-value %527)
  (define-value %528)
  (define-value %529)
  (define-value %530)
  (define-value %531)
  (define-value %532)
  (define-value %533)
  (define-value %535)
  (define-value %536)
  (define-value %537)
  (define-value %538)
  (define-value %539)
  (define-value %540)
  (define-value %542)
  (define-value %543)
  (define-value %544)
  (define-value %545)
  (define-value %546)
  (define-value %547)
  (define-value %549)
  (define-value %551)
  (define-value %552)
  (define-value %553)
  (define-value %554)
  (define-value %555)
  (define-value %556)
  (define-value %557)
  (define-value %558)
  (define-value %559)
  (define-value %561)
  (define-value %562)
  (define-value %564)
  (define-value %565)
  (define-value %566)
  (define-value %567)
  (define-value %568)
  (define-value %569)
  (define-value %571)
  (define-value %572)
  (define-value %574)
  (define-value %575)
  (define-value %576)
  (define-value %577)
  (define-value %578)
  (define-value %579)
  (define-value %580)
  (define-value %581)
  (define-value %582)
  (define-value %583)
  (define-value %584)
  (define-value %585)
  (define-value %586)
  (define-value %588)
  (define-value %589)
  (define-value %591)
  (define-value %592)
  (define-value %593)
  (define-value %594)
  (define-value %595)
  (define-value %596)
  (define-value %597)
  (define-value %598)
  (define-value %599)
  (define-value %601)
  (define-value %603)
  (define-value %604)
  (define-value %605)
  (define-value %606)
  (define-value %607)
  (define-value %609)
  (define-value %611)
  (define-value %612)
  (define-value %614)
  (define-value %615)
  (define-value %616)
  (define-value %617)
  (define-value %618)
  (define-value %620)
  (define-value %621)
  (define-value %623)
  (define-value %624)
  (define-value %625)
  (define-value %626)
  (define-value %627)
  (define-value %628)
  (define-value %629)
  (define-value %630)
  (define-value %631)
  (define-value %633)
  (define-value %634)
  (define-value %636)
  (define-value %637)
  (define-value %638)
  (define-value %639)
  (define-value %640)
  (define-value %641)
  (define-value %642)
  (define-value %643)
  (define-value %644)
  (define-value %646)
  (define-value %647)
  (define-value %649)
  (define-value %650)
  (define-value %651)
  (define-value %652)
  (define-value %653)
  (define-value %654)
  (define-value %655)
  (define-value %657)
  (define-value %658)
  (define-value %660)
  (define-value %661)
  (define-value %662)
  (define-value %663)
  (define-value %664)
  (define-value %665)
  (define-value %666)
  (define-value %667)
  (define-value %668)
  (define-value %669)
  (define-value %670)
  (define-value %671)
  (define-value %672)
  (define-value %673)
  (define-value %674)
  (define-value %676)
  (define-value %677)
  (define-value %679)
  (define-value %680)
  (define-value %681)
  (define-value %682)
  (define-value %683)
  (define-value %684)
  (define-value %685)
  (define-value %686)
  (define-value %687)
  (define-value %688)
  (define-value %689)
  (define-value %691)
  (define-value %692)
  (define-value %693)
  (define-value %694)
  (define-value %695)
  (define-value %696)
  (define-value %697)
  (define-value %698)
  (define-value %699)
  (define-value %700)
  (define-value %702)
  (define-value %703)
  (define-value %704)
  (define-value %705)
  (define-value %706)
  (define-value %707)
  (define-value %709)
  (define-value %711)
  (define-value %712)
  (define-value %713)
  (define-value %714)
  (define-value %715)
  (define-value %716)
  (define-value %717)
  (define-value %718)
  (define-value %719)
  (define-value %721)
  (define-value %722)
  (define-value %724)
  (define-value %725)
  (define-value %726)
  (define-value %727)
  (define-value %728)
  (define-value %729)
  (define-value %731)
  (define-value %732)
  (define-value %734)
  (define-value %735)
  (define-value %736)
  (define-value %737)
  (define-value %738)
  (define-value %739)
  (define-value %740)
  (define-value %741)
  (define-value %742)
  (define-value %743)
  (define-value %744)
  (define-value %745)
  (define-value %746)
  (define-value %748)
  (define-value %749)
  (define-value %751)
  (define-value %752)
  (define-value %753)
  (define-value %754)
  (define-value %755)
  (define-value %756)
  (define-value %757)
  (define-value %758)
  (define-value %759)
  (define-value %761)
  (define-value %763)
  (define-value %764)
  (define-value %765)
  (define-value %766)
  (define-value %767)
  (define-value %769)
  (define-value %771)
  (define-value %772)
  (define-value %774)
  (define-value %775)
  (define-value %776)
  (define-value %777)
  (define-value %778)
  (define-value %780)
  (define-value %781)
  (define-value %783)
  (define-value %784)
  (define-value %785)
  (define-value %786)
  (define-value %787)
  (define-value %788)
  (define-value %789)
  (define-value %790)
  (define-value %791)
  (define-value %793)
  (define-value %794)
  (define-value %796)
  (define-value %797)
  (define-value %798)
  (define-value %799)
  (define-value %800)
  (define-value %801)
  (define-value %802)
  (define-value %803)
  (define-value %804)
  (define-value %806)
  (define-value %807)
  (define-value %809)
  (define-value %810)
  (define-value %811)
  (define-value %812)
  (define-value %813)
  (define-value %814)
  (define-value %815)
  (define-value %817)
  (define-value %818)
  (define-value %820)
  (define-value %821)
  (define-value %822)
  (define-value %823)
  (define-value %824)
  (define-value %825)
  (define-value %826)
  (define-value %827)
  (define-value %828)
  (define-value %829)
  (define-value %830)
  (define-value %831)
  (define-value %832)
  (define-value %833)
  (define-value %834)
  (define-value %836)
  (define-value %837)
  (define-value %839)
  (define-value %840)
  (define-value %841)
  (define-value %842)
  (define-value %843)
  (define-value %844)
  (define-value %845)
  (define-value %846)
  (define-value %847)
  (define-value %848)
  (define-value %849)
  (define-value %851)
  (define-value %852)
  (define-value %853)
  (define-value %854)
  (define-value %855)
  (define-value %856)
  (define-value %857)
  (define-value %858)
  (define-value %859)
  (define-value %860)
  (define-value %862)
  (define-value %863)
  (define-value %864)
  (define-value %865)
  (define-value %866)
  (define-value %867)
  (define-value %869)
  (define-value %871)
  (define-value %872)
  (define-value %873)
  (define-value %874)
  (define-value %875)
  (define-value %876)
  (define-value %877)
  (define-value %878)
  (define-value %879)
  (define-value %881)
  (define-value %882)
  (define-value %884)
  (define-value %885)
  (define-value %886)
  (define-value %887)
  (define-value %888)
  (define-value %889)
  (define-value %891)
  (define-value %892)
  (define-value %894)
  (define-value %895)
  (define-value %896)
  (define-value %897)
  (define-value %898)
  (define-value %899)
  (define-value %900)
  (define-value %901)
  (define-value %902)
  (define-value %903)
  (define-value %904)
  (define-value %905)
  (define-value %906)
  (define-value %907)
  (define-value %908)
  (define-value %910)
  (define-value %911)
  (define-value %913)
  (define-value %914)
  (define-value %915)
  (define-value %916)
  (define-value %917)
  (define-value %918)
  (define-value %919)
  (define-value %920)
  (define-value %921)
  (define-value %923)
  (define-value %925)
  (define-value %926)
  (define-value %927)
  (define-value %928)
  (define-value %929)
  (define-value %931)
  (define-value %933)
  (define-value %934)
  (define-value %936)
  (define-value %937)
  (define-value %938)
  (define-value %939)
  (define-value %940)
  (define-value %942)
  (define-value %943)
  (define-value %945)
  (define-value %946)
  (define-value %947)
  (define-value %948)
  (define-value %949)
  (define-value %950)
  (define-value %951)
  (define-value %952)
  (define-value %953)
  (define-value %955)
  (define-value %956)
  (define-value %958)
  (define-value %959)
  (define-value %960)
  (define-value %961)
  (define-value %962)
  (define-value %963)
  (define-value %964)
  (define-value %965)
  (define-value %966)
  (define-value %968)
  (define-value %969)
  (define-value %971)
  (define-value %972)
  (define-value %973)
  (define-value %974)
  (define-value %975)
  (define-value %976)
  (define-value %977)
  (define-value %979)
  (define-value %980)
  (define-value %982)
  (define-value %983)
  (define-value %984)
  (define-value %985)
  (define-value %986)
  (define-value %987)
  (define-value %988)
  (define-value %989)
  (define-value %990)
  (define-value %991)
  (define-value %992)
  (define-value %993)
  (define-value %994)
  (define-value %995)
  (define-value %996)
  (define-value %998)
  (define-value %999)
  (define-value %1001)
  (define-value %1002)
  (define-value %1003)
  (define-value %1004)
  (define-value %1005)
  (define-value %1006)
  (define-value %1007)
  (define-value %1008)
  (define-value %1009)
  (define-value %1010)
  (define-value %1011)
  (define-value %1013)
  (define-value %1014)
  (define-value %1015)
  (define-value %1016)
  (define-value %1017)
  (define-value %1018)
  (define-value %1019)
  (define-value %1020)
  (define-value %1021)
  (define-value %1022)
  (define-value %1024)
  (define-value %1025)
  (define-value %1026)
  (define-value %1027)
  (define-value %1028)
  (define-value %1029)
  (define-value %1031)
  (define-value %1032)
  (define-value %1033)
  (define-value %1035)
  (define-value %1036)
  (define-value %1037)
  (define-value %1038)
  (define-value %1039)
  (define-value %1040)
  (define-value %1041)
  (define-value %1042)
  (define-value %1043)
  (define-value %1044)
  (define-value %1045)
  (define-value %1046)
  (define-value %1048)
  (define-value %1049)
  (define-value %1050)
  (define-value %1052)
  (define-value %1053)
  (define-value %1054)
  (define-value %1055)
  (define-value %1056)
  (define-value %1057)
  (define-value %1058)
  (define-value %1059)
  (define-value %1060)
  (define-value %1061)
  (define-value %1062)
  (define-value %1064)
  (define-value %1065)
  (define-value %1066)
  (define-value %1068)
  (define-value %1069)
  (define-value %1070)
  (define-value %1071)
  (define-value %1072)
  (define-value %1073)
  (define-value %1074)
  (define-value %1075)
  (define-value %1076)
  (define-value %1077)
  (define-value %1078)
  (define-value %1080)
  (define-value %1081)
  (define-value %1082)
  (define-value %1083)
  (define-value %1084)
  (define-value %1085)
  (define-value %1087)
  (define-value %1088)
  (define-value %1089)
  (define-value %1091)
  (define-value %1092)
  (define-value %1094)
  (define-value %1095)
  (define-value %1096)
  (define-value %1097)
  (define-value %1099)
  (define-value %1100)
  (define-value %1101)
  (define-value %1102)
  (define-value %1103)
  (define-value %1104)
  (define-value %1105)
  (define-value %1106)
  (define-value %1107)
  (define-value %1108)
  (define-value %1109)
  (define-value %1110)
  (define-value %1111)
  (define-value %1112)
  (define-value %1113)
  (define-value %1114)
  (define-value %1116)
  (define-value %1117)
  (define-value %1118)
  (define-value %1119)
  (define-value %1120)
  (define-value %1121)
  (define-value %1122)
  (define-value %1123)
  (define-value %1125)
  (define-value %1126)
  (define-value %1127)
  (define-value %1128)
  (define-value %1129)
  (define-value %1130)
  (define-value %1131)
  (define-value %1132)
  (define-value %1133)
  (define-value %1134)
  (define-value %1135)
  (define-value %1136)
  (define-value %1137)
  (define-value %1138)
  (define-value %1139)
  (define-value %1141)
  (define-value %1142)
  (enter! %4))

(define (@emit_alu_r32 %0 %1 %2 %3)
; %4
  (define-label (%4) #:merge #f
    (set! %5 (getelementptr %0 (array-offset (bv #x00000001 32) 1)))
    (set! %6 (load %5 (bitvector 8) #:align 1))
    (set! %7 (icmp/slt %6 (bv #x00 8)))
    (br %7 %8 %23))

; %8
  (define-label (%8) #:merge #f
    (set! %9 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %10 (load %9 pointer #:align 4))
    (set! %11 (icmp/eq %10 nullptr))
    (br %11 %19 %12))

; %12
  (define-label (%12) #:merge #f
    (set! %13 (sext %6 (bitvector 32)))
    (set! %14 (shl %13 (bv #x00000014 32)))
    (set! %15 (or %14 (bv #x00042383 32)))
    (set! %16 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %17 (load %16 (bitvector 32) #:align 4))
    (set! %18 (getelementptr %10 (array-offset %17 4)))
    (store %15 %18 (bitvector 32) #:align 4)
    (br %19))

; %19
  (define-label (%19) #:merge #f
    (set! %20 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %21 (load %20 (bitvector 32) #:align 4))
    (set! %22 (add %21 (bv #x00000001 32)))
    (store %22 %20 (bitvector 32) #:align 4)
    (br %23))

; %23
  (define-label (%23) #:merge #f
    (set! %24 (phi [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000c 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %19] [%0 %4]))
    (set! %25 (getelementptr %1 (array-offset (bv #x00000001 32) 1)))
    (set! %26 (load %25 (bitvector 8) #:align 1))
    (set! %27 (icmp/slt %26 (bv #x00 8)))
    (br %27 %28 %43))

; %28
  (define-label (%28) #:merge #f
    (set! %29 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %30 (load %29 pointer #:align 4))
    (set! %31 (icmp/eq %30 nullptr))
    (br %31 %39 %32))

; %32
  (define-label (%32) #:merge #f
    (set! %33 (sext %26 (bitvector 32)))
    (set! %34 (shl %33 (bv #x00000014 32)))
    (set! %35 (or %34 (bv #x00042e83 32)))
    (set! %36 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %37 (load %36 (bitvector 32) #:align 4))
    (set! %38 (getelementptr %30 (array-offset %37 4)))
    (store %35 %38 (bitvector 32) #:align 4)
    (br %39))

; %39
  (define-label (%39) #:merge #f
    (set! %40 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %41 (load %40 (bitvector 32) #:align 4))
    (set! %42 (add %41 (bv #x00000001 32)))
    (store %42 %40 (bitvector 32) #:align 4)
    (br %43))

; %43
  (define-label (%43) #:merge #f
    (set! %44 (phi [#(struct:instruction #f #f getelementptr (@bpf2rv32 #(struct:array-offset (bv #x00000000 32) 28) #(struct:array-offset (bv #x0000000d 32) 2) #(struct:array-offset (bv #x00000000 32) 1)) ()) %39] [%1 %23]))
    (set! %45 (zext %3 (bitvector 32)))
    (set! %46 (lshr %45 (bv #x00000004 32)))
    (set! %47 (shl %45 (bv #x0000001c 32)))
    (set! %48 (or %46 %47))
    (switch %48 %306 [(bv #x0000000b 32) %49] [(bv #x00000000 32) %67] [(bv #x00000001 32) %87] [(bv #x00000005 32) %107] [(bv #x00000004 32) %127] [(bv #x0000000a 32) %147] [(bv #x00000002 32) %167] [(bv #x00000003 32) %187] [(bv #x00000009 32) %207] [(bv #x00000006 32) %227] [(bv #x00000007 32) %247] [(bv #x0000000c 32) %267] [(bv #x00000008 32) %287]))

; %49
  (define-label (%49) #:merge #f
    (set! %50 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %51 (load %50 pointer #:align 4))
    (set! %52 (icmp/eq %51 nullptr))
    (br %52 %302 %53))

; %53
  (define-label (%53) #:merge #f
    (set! %54 (getelementptr %24 (array-offset (bv #x00000001 32) 1)))
    (set! %55 (load %54 (bitvector 8) #:align 1))
    (set! %56 (zext %55 (bitvector 32)))
    (set! %57 (shl %56 (bv #x00000007 32)))
    (set! %58 (getelementptr %44 (array-offset (bv #x00000001 32) 1)))
    (set! %59 (load %58 (bitvector 8) #:align 1))
    (set! %60 (zext %59 (bitvector 32)))
    (set! %61 (shl %60 (bv #x0000000f 32)))
    (set! %62 (or %57 %61))
    (set! %63 (or %62 (bv #x00000013 32)))
    (set! %64 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %65 (load %64 (bitvector 32) #:align 4))
    (set! %66 (getelementptr %51 (array-offset %65 4)))
    (store %63 %66 (bitvector 32) #:align 4)
    (br %302))

; %67
  (define-label (%67) #:merge #f
    (set! %68 (getelementptr %24 (array-offset (bv #x00000001 32) 1)))
    (set! %69 (load %68 (bitvector 8) #:align 1))
    (set! %70 (zext %69 (bitvector 32)))
    (set! %71 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %72 (load %71 pointer #:align 4))
    (set! %73 (icmp/eq %72 nullptr))
    (br %73 %302 %74))

; %74
  (define-label (%74) #:merge #f
    (set! %75 (shl %70 (bv #x00000007 32)))
    (set! %76 (shl %70 (bv #x0000000f 32)))
    (set! %77 (getelementptr %44 (array-offset (bv #x00000001 32) 1)))
    (set! %78 (load %77 (bitvector 8) #:align 1))
    (set! %79 (zext %78 (bitvector 32)))
    (set! %80 (shl %79 (bv #x00000014 32)))
    (set! %81 (or %76 %75))
    (set! %82 (or %81 %80))
    (set! %83 (or %82 (bv #x00000033 32)))
    (set! %84 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %85 (load %84 (bitvector 32) #:align 4))
    (set! %86 (getelementptr %72 (array-offset %85 4)))
    (store %83 %86 (bitvector 32) #:align 4)
    (br %302))

; %87
  (define-label (%87) #:merge #f
    (set! %88 (getelementptr %24 (array-offset (bv #x00000001 32) 1)))
    (set! %89 (load %88 (bitvector 8) #:align 1))
    (set! %90 (zext %89 (bitvector 32)))
    (set! %91 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %92 (load %91 pointer #:align 4))
    (set! %93 (icmp/eq %92 nullptr))
    (br %93 %302 %94))

; %94
  (define-label (%94) #:merge #f
    (set! %95 (shl %90 (bv #x00000007 32)))
    (set! %96 (shl %90 (bv #x0000000f 32)))
    (set! %97 (getelementptr %44 (array-offset (bv #x00000001 32) 1)))
    (set! %98 (load %97 (bitvector 8) #:align 1))
    (set! %99 (zext %98 (bitvector 32)))
    (set! %100 (shl %99 (bv #x00000014 32)))
    (set! %101 (or %96 %95))
    (set! %102 (or %101 %100))
    (set! %103 (or %102 (bv #x40000033 32)))
    (set! %104 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %105 (load %104 (bitvector 32) #:align 4))
    (set! %106 (getelementptr %92 (array-offset %105 4)))
    (store %103 %106 (bitvector 32) #:align 4)
    (br %302))

; %107
  (define-label (%107) #:merge #f
    (set! %108 (getelementptr %24 (array-offset (bv #x00000001 32) 1)))
    (set! %109 (load %108 (bitvector 8) #:align 1))
    (set! %110 (zext %109 (bitvector 32)))
    (set! %111 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %112 (load %111 pointer #:align 4))
    (set! %113 (icmp/eq %112 nullptr))
    (br %113 %302 %114))

; %114
  (define-label (%114) #:merge #f
    (set! %115 (shl %110 (bv #x00000007 32)))
    (set! %116 (shl %110 (bv #x0000000f 32)))
    (set! %117 (getelementptr %44 (array-offset (bv #x00000001 32) 1)))
    (set! %118 (load %117 (bitvector 8) #:align 1))
    (set! %119 (zext %118 (bitvector 32)))
    (set! %120 (shl %119 (bv #x00000014 32)))
    (set! %121 (or %116 %115))
    (set! %122 (or %121 %120))
    (set! %123 (or %122 (bv #x00007033 32)))
    (set! %124 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %125 (load %124 (bitvector 32) #:align 4))
    (set! %126 (getelementptr %112 (array-offset %125 4)))
    (store %123 %126 (bitvector 32) #:align 4)
    (br %302))

; %127
  (define-label (%127) #:merge #f
    (set! %128 (getelementptr %24 (array-offset (bv #x00000001 32) 1)))
    (set! %129 (load %128 (bitvector 8) #:align 1))
    (set! %130 (zext %129 (bitvector 32)))
    (set! %131 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %132 (load %131 pointer #:align 4))
    (set! %133 (icmp/eq %132 nullptr))
    (br %133 %302 %134))

; %134
  (define-label (%134) #:merge #f
    (set! %135 (shl %130 (bv #x00000007 32)))
    (set! %136 (shl %130 (bv #x0000000f 32)))
    (set! %137 (getelementptr %44 (array-offset (bv #x00000001 32) 1)))
    (set! %138 (load %137 (bitvector 8) #:align 1))
    (set! %139 (zext %138 (bitvector 32)))
    (set! %140 (shl %139 (bv #x00000014 32)))
    (set! %141 (or %136 %135))
    (set! %142 (or %141 %140))
    (set! %143 (or %142 (bv #x00006033 32)))
    (set! %144 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %145 (load %144 (bitvector 32) #:align 4))
    (set! %146 (getelementptr %132 (array-offset %145 4)))
    (store %143 %146 (bitvector 32) #:align 4)
    (br %302))

; %147
  (define-label (%147) #:merge #f
    (set! %148 (getelementptr %24 (array-offset (bv #x00000001 32) 1)))
    (set! %149 (load %148 (bitvector 8) #:align 1))
    (set! %150 (zext %149 (bitvector 32)))
    (set! %151 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %152 (load %151 pointer #:align 4))
    (set! %153 (icmp/eq %152 nullptr))
    (br %153 %302 %154))

; %154
  (define-label (%154) #:merge #f
    (set! %155 (shl %150 (bv #x00000007 32)))
    (set! %156 (shl %150 (bv #x0000000f 32)))
    (set! %157 (getelementptr %44 (array-offset (bv #x00000001 32) 1)))
    (set! %158 (load %157 (bitvector 8) #:align 1))
    (set! %159 (zext %158 (bitvector 32)))
    (set! %160 (shl %159 (bv #x00000014 32)))
    (set! %161 (or %156 %155))
    (set! %162 (or %161 %160))
    (set! %163 (or %162 (bv #x00004033 32)))
    (set! %164 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %165 (load %164 (bitvector 32) #:align 4))
    (set! %166 (getelementptr %152 (array-offset %165 4)))
    (store %163 %166 (bitvector 32) #:align 4)
    (br %302))

; %167
  (define-label (%167) #:merge #f
    (set! %168 (getelementptr %24 (array-offset (bv #x00000001 32) 1)))
    (set! %169 (load %168 (bitvector 8) #:align 1))
    (set! %170 (zext %169 (bitvector 32)))
    (set! %171 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %172 (load %171 pointer #:align 4))
    (set! %173 (icmp/eq %172 nullptr))
    (br %173 %302 %174))

; %174
  (define-label (%174) #:merge #f
    (set! %175 (shl %170 (bv #x00000007 32)))
    (set! %176 (shl %170 (bv #x0000000f 32)))
    (set! %177 (getelementptr %44 (array-offset (bv #x00000001 32) 1)))
    (set! %178 (load %177 (bitvector 8) #:align 1))
    (set! %179 (zext %178 (bitvector 32)))
    (set! %180 (shl %179 (bv #x00000014 32)))
    (set! %181 (or %176 %175))
    (set! %182 (or %181 %180))
    (set! %183 (or %182 (bv #x02000033 32)))
    (set! %184 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %185 (load %184 (bitvector 32) #:align 4))
    (set! %186 (getelementptr %172 (array-offset %185 4)))
    (store %183 %186 (bitvector 32) #:align 4)
    (br %302))

; %187
  (define-label (%187) #:merge #f
    (set! %188 (getelementptr %24 (array-offset (bv #x00000001 32) 1)))
    (set! %189 (load %188 (bitvector 8) #:align 1))
    (set! %190 (zext %189 (bitvector 32)))
    (set! %191 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %192 (load %191 pointer #:align 4))
    (set! %193 (icmp/eq %192 nullptr))
    (br %193 %302 %194))

; %194
  (define-label (%194) #:merge #f
    (set! %195 (shl %190 (bv #x00000007 32)))
    (set! %196 (shl %190 (bv #x0000000f 32)))
    (set! %197 (getelementptr %44 (array-offset (bv #x00000001 32) 1)))
    (set! %198 (load %197 (bitvector 8) #:align 1))
    (set! %199 (zext %198 (bitvector 32)))
    (set! %200 (shl %199 (bv #x00000014 32)))
    (set! %201 (or %196 %195))
    (set! %202 (or %201 %200))
    (set! %203 (or %202 (bv #x02005033 32)))
    (set! %204 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %205 (load %204 (bitvector 32) #:align 4))
    (set! %206 (getelementptr %192 (array-offset %205 4)))
    (store %203 %206 (bitvector 32) #:align 4)
    (br %302))

; %207
  (define-label (%207) #:merge #f
    (set! %208 (getelementptr %24 (array-offset (bv #x00000001 32) 1)))
    (set! %209 (load %208 (bitvector 8) #:align 1))
    (set! %210 (zext %209 (bitvector 32)))
    (set! %211 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %212 (load %211 pointer #:align 4))
    (set! %213 (icmp/eq %212 nullptr))
    (br %213 %302 %214))

; %214
  (define-label (%214) #:merge #f
    (set! %215 (shl %210 (bv #x00000007 32)))
    (set! %216 (shl %210 (bv #x0000000f 32)))
    (set! %217 (getelementptr %44 (array-offset (bv #x00000001 32) 1)))
    (set! %218 (load %217 (bitvector 8) #:align 1))
    (set! %219 (zext %218 (bitvector 32)))
    (set! %220 (shl %219 (bv #x00000014 32)))
    (set! %221 (or %216 %215))
    (set! %222 (or %221 %220))
    (set! %223 (or %222 (bv #x02007033 32)))
    (set! %224 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %225 (load %224 (bitvector 32) #:align 4))
    (set! %226 (getelementptr %212 (array-offset %225 4)))
    (store %223 %226 (bitvector 32) #:align 4)
    (br %302))

; %227
  (define-label (%227) #:merge #f
    (set! %228 (getelementptr %24 (array-offset (bv #x00000001 32) 1)))
    (set! %229 (load %228 (bitvector 8) #:align 1))
    (set! %230 (zext %229 (bitvector 32)))
    (set! %231 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %232 (load %231 pointer #:align 4))
    (set! %233 (icmp/eq %232 nullptr))
    (br %233 %302 %234))

; %234
  (define-label (%234) #:merge #f
    (set! %235 (shl %230 (bv #x00000007 32)))
    (set! %236 (shl %230 (bv #x0000000f 32)))
    (set! %237 (getelementptr %44 (array-offset (bv #x00000001 32) 1)))
    (set! %238 (load %237 (bitvector 8) #:align 1))
    (set! %239 (zext %238 (bitvector 32)))
    (set! %240 (shl %239 (bv #x00000014 32)))
    (set! %241 (or %236 %235))
    (set! %242 (or %241 %240))
    (set! %243 (or %242 (bv #x00001033 32)))
    (set! %244 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %245 (load %244 (bitvector 32) #:align 4))
    (set! %246 (getelementptr %232 (array-offset %245 4)))
    (store %243 %246 (bitvector 32) #:align 4)
    (br %302))

; %247
  (define-label (%247) #:merge #f
    (set! %248 (getelementptr %24 (array-offset (bv #x00000001 32) 1)))
    (set! %249 (load %248 (bitvector 8) #:align 1))
    (set! %250 (zext %249 (bitvector 32)))
    (set! %251 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %252 (load %251 pointer #:align 4))
    (set! %253 (icmp/eq %252 nullptr))
    (br %253 %302 %254))

; %254
  (define-label (%254) #:merge #f
    (set! %255 (shl %250 (bv #x00000007 32)))
    (set! %256 (shl %250 (bv #x0000000f 32)))
    (set! %257 (getelementptr %44 (array-offset (bv #x00000001 32) 1)))
    (set! %258 (load %257 (bitvector 8) #:align 1))
    (set! %259 (zext %258 (bitvector 32)))
    (set! %260 (shl %259 (bv #x00000014 32)))
    (set! %261 (or %256 %255))
    (set! %262 (or %261 %260))
    (set! %263 (or %262 (bv #x00005033 32)))
    (set! %264 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %265 (load %264 (bitvector 32) #:align 4))
    (set! %266 (getelementptr %252 (array-offset %265 4)))
    (store %263 %266 (bitvector 32) #:align 4)
    (br %302))

; %267
  (define-label (%267) #:merge #f
    (set! %268 (getelementptr %24 (array-offset (bv #x00000001 32) 1)))
    (set! %269 (load %268 (bitvector 8) #:align 1))
    (set! %270 (zext %269 (bitvector 32)))
    (set! %271 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %272 (load %271 pointer #:align 4))
    (set! %273 (icmp/eq %272 nullptr))
    (br %273 %302 %274))

; %274
  (define-label (%274) #:merge #f
    (set! %275 (shl %270 (bv #x00000007 32)))
    (set! %276 (shl %270 (bv #x0000000f 32)))
    (set! %277 (getelementptr %44 (array-offset (bv #x00000001 32) 1)))
    (set! %278 (load %277 (bitvector 8) #:align 1))
    (set! %279 (zext %278 (bitvector 32)))
    (set! %280 (shl %279 (bv #x00000014 32)))
    (set! %281 (or %276 %275))
    (set! %282 (or %281 %280))
    (set! %283 (or %282 (bv #x40005033 32)))
    (set! %284 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %285 (load %284 (bitvector 32) #:align 4))
    (set! %286 (getelementptr %272 (array-offset %285 4)))
    (store %283 %286 (bitvector 32) #:align 4)
    (br %302))

; %287
  (define-label (%287) #:merge #f
    (set! %288 (getelementptr %24 (array-offset (bv #x00000001 32) 1)))
    (set! %289 (load %288 (bitvector 8) #:align 1))
    (set! %290 (zext %289 (bitvector 32)))
    (set! %291 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %292 (load %291 pointer #:align 4))
    (set! %293 (icmp/eq %292 nullptr))
    (br %293 %302 %294))

; %294
  (define-label (%294) #:merge #f
    (set! %295 (shl %290 (bv #x00000007 32)))
    (set! %296 (shl %290 (bv #x00000014 32)))
    (set! %297 (or %296 %295))
    (set! %298 (or %297 (bv #x40000033 32)))
    (set! %299 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %300 (load %299 (bitvector 32) #:align 4))
    (set! %301 (getelementptr %292 (array-offset %300 4)))
    (store %298 %301 (bitvector 32) #:align 4)
    (br %302))

; %302
  (define-label (%302) #:merge #f
    (set! %303 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %304 (load %303 (bitvector 32) #:align 4))
    (set! %305 (add %304 (bv #x00000001 32)))
    (store %305 %303 (bitvector 32) #:align 4)
    (br %306))

; %306
  (define-label (%306) #:merge #f
    (call @bpf_put_reg32 %0 %24 %2)
    (ret))

  (define-value %5)
  (define-value %6)
  (define-value %7)
  (define-value %9)
  (define-value %10)
  (define-value %11)
  (define-value %13)
  (define-value %14)
  (define-value %15)
  (define-value %16)
  (define-value %17)
  (define-value %18)
  (define-value %20)
  (define-value %21)
  (define-value %22)
  (define-value %24)
  (define-value %25)
  (define-value %26)
  (define-value %27)
  (define-value %29)
  (define-value %30)
  (define-value %31)
  (define-value %33)
  (define-value %34)
  (define-value %35)
  (define-value %36)
  (define-value %37)
  (define-value %38)
  (define-value %40)
  (define-value %41)
  (define-value %42)
  (define-value %44)
  (define-value %45)
  (define-value %46)
  (define-value %47)
  (define-value %48)
  (define-value %50)
  (define-value %51)
  (define-value %52)
  (define-value %54)
  (define-value %55)
  (define-value %56)
  (define-value %57)
  (define-value %58)
  (define-value %59)
  (define-value %60)
  (define-value %61)
  (define-value %62)
  (define-value %63)
  (define-value %64)
  (define-value %65)
  (define-value %66)
  (define-value %68)
  (define-value %69)
  (define-value %70)
  (define-value %71)
  (define-value %72)
  (define-value %73)
  (define-value %75)
  (define-value %76)
  (define-value %77)
  (define-value %78)
  (define-value %79)
  (define-value %80)
  (define-value %81)
  (define-value %82)
  (define-value %83)
  (define-value %84)
  (define-value %85)
  (define-value %86)
  (define-value %88)
  (define-value %89)
  (define-value %90)
  (define-value %91)
  (define-value %92)
  (define-value %93)
  (define-value %95)
  (define-value %96)
  (define-value %97)
  (define-value %98)
  (define-value %99)
  (define-value %100)
  (define-value %101)
  (define-value %102)
  (define-value %103)
  (define-value %104)
  (define-value %105)
  (define-value %106)
  (define-value %108)
  (define-value %109)
  (define-value %110)
  (define-value %111)
  (define-value %112)
  (define-value %113)
  (define-value %115)
  (define-value %116)
  (define-value %117)
  (define-value %118)
  (define-value %119)
  (define-value %120)
  (define-value %121)
  (define-value %122)
  (define-value %123)
  (define-value %124)
  (define-value %125)
  (define-value %126)
  (define-value %128)
  (define-value %129)
  (define-value %130)
  (define-value %131)
  (define-value %132)
  (define-value %133)
  (define-value %135)
  (define-value %136)
  (define-value %137)
  (define-value %138)
  (define-value %139)
  (define-value %140)
  (define-value %141)
  (define-value %142)
  (define-value %143)
  (define-value %144)
  (define-value %145)
  (define-value %146)
  (define-value %148)
  (define-value %149)
  (define-value %150)
  (define-value %151)
  (define-value %152)
  (define-value %153)
  (define-value %155)
  (define-value %156)
  (define-value %157)
  (define-value %158)
  (define-value %159)
  (define-value %160)
  (define-value %161)
  (define-value %162)
  (define-value %163)
  (define-value %164)
  (define-value %165)
  (define-value %166)
  (define-value %168)
  (define-value %169)
  (define-value %170)
  (define-value %171)
  (define-value %172)
  (define-value %173)
  (define-value %175)
  (define-value %176)
  (define-value %177)
  (define-value %178)
  (define-value %179)
  (define-value %180)
  (define-value %181)
  (define-value %182)
  (define-value %183)
  (define-value %184)
  (define-value %185)
  (define-value %186)
  (define-value %188)
  (define-value %189)
  (define-value %190)
  (define-value %191)
  (define-value %192)
  (define-value %193)
  (define-value %195)
  (define-value %196)
  (define-value %197)
  (define-value %198)
  (define-value %199)
  (define-value %200)
  (define-value %201)
  (define-value %202)
  (define-value %203)
  (define-value %204)
  (define-value %205)
  (define-value %206)
  (define-value %208)
  (define-value %209)
  (define-value %210)
  (define-value %211)
  (define-value %212)
  (define-value %213)
  (define-value %215)
  (define-value %216)
  (define-value %217)
  (define-value %218)
  (define-value %219)
  (define-value %220)
  (define-value %221)
  (define-value %222)
  (define-value %223)
  (define-value %224)
  (define-value %225)
  (define-value %226)
  (define-value %228)
  (define-value %229)
  (define-value %230)
  (define-value %231)
  (define-value %232)
  (define-value %233)
  (define-value %235)
  (define-value %236)
  (define-value %237)
  (define-value %238)
  (define-value %239)
  (define-value %240)
  (define-value %241)
  (define-value %242)
  (define-value %243)
  (define-value %244)
  (define-value %245)
  (define-value %246)
  (define-value %248)
  (define-value %249)
  (define-value %250)
  (define-value %251)
  (define-value %252)
  (define-value %253)
  (define-value %255)
  (define-value %256)
  (define-value %257)
  (define-value %258)
  (define-value %259)
  (define-value %260)
  (define-value %261)
  (define-value %262)
  (define-value %263)
  (define-value %264)
  (define-value %265)
  (define-value %266)
  (define-value %268)
  (define-value %269)
  (define-value %270)
  (define-value %271)
  (define-value %272)
  (define-value %273)
  (define-value %275)
  (define-value %276)
  (define-value %277)
  (define-value %278)
  (define-value %279)
  (define-value %280)
  (define-value %281)
  (define-value %282)
  (define-value %283)
  (define-value %284)
  (define-value %285)
  (define-value %286)
  (define-value %288)
  (define-value %289)
  (define-value %290)
  (define-value %291)
  (define-value %292)
  (define-value %293)
  (define-value %295)
  (define-value %296)
  (define-value %297)
  (define-value %298)
  (define-value %299)
  (define-value %300)
  (define-value %301)
  (define-value %303)
  (define-value %304)
  (define-value %305)
  (enter! %4))

(define (@printk %0)
  (unreachable))

(define (@emit_rev32 %0 %1)
; %2
  (define-label (%2) #:merge #f
    (set! %3 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %4 (load %3 pointer #:align 4))
    (set! %5 (icmp/eq %4 nullptr))
    (br %5 %11 %6))

; %6
  (define-label (%6) #:merge #f
    (set! %7 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %8 (load %7 (bitvector 32) #:align 4))
    (set! %9 (getelementptr %4 (array-offset %8 4)))
    (store (bv #x00000313 32) %9 (bitvector 32) #:align 4)
    (set! %10 (load %3 pointer #:align 4))
    (br %11))

; %11
  (define-label (%11) #:merge #f
    (set! %12 (phi [#(struct:nullptr) %2] [%10 %6]))
    (set! %13 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %14 (load %13 (bitvector 32) #:align 4))
    (set! %15 (add %14 (bv #x00000001 32)))
    (store %15 %13 (bitvector 32) #:align 4)
    (set! %16 (zext %0 (bitvector 32)))
    (set! %17 (shl %16 (bv #x0000000f 32)))
    (set! %18 (or %17 (bv #x0ff07293 32)))
    (set! %19 (icmp/eq %12 nullptr))
    (br %19 %20 %22))

; %20
  (define-label (%20) #:merge #f
    (set! %21 (add %14 (bv #x00000003 32)))
    (br %36))

; %22
  (define-label (%22) #:merge #f
    (set! %23 (getelementptr %12 (array-offset %15 4)))
    (store %18 %23 (bitvector 32) #:align 4)
    (set! %24 (load %3 pointer #:align 4))
    (set! %25 (load %13 (bitvector 32) #:align 4))
    (set! %26 (add %25 (bv #x00000001 32)))
    (store %26 %13 (bitvector 32) #:align 4)
    (set! %27 (icmp/eq %24 nullptr))
    (br %27 %28 %30))

; %28
  (define-label (%28) #:merge #f
    (set! %29 (add %25 (bv #x00000002 32)))
    (br %36))

; %30
  (define-label (%30) #:merge #f
    (set! %31 (getelementptr %24 (array-offset %26 4)))
    (store (bv #x00530333 32) %31 (bitvector 32) #:align 4)
    (set! %32 (load %3 pointer #:align 4))
    (set! %33 (load %13 (bitvector 32) #:align 4))
    (set! %34 (add %33 (bv #x00000001 32)))
    (store %34 %13 (bitvector 32) #:align 4)
    (set! %35 (icmp/eq %32 nullptr))
    (br %35 %38 %41))

; %36
  (define-label (%36) #:merge #f
    (set! %37 (phi [%29 %28] [%21 %20]))
    (store %37 %13 (bitvector 32) #:align 4)
    (br %38))

; %38
  (define-label (%38) #:merge #f
    (set! %39 (phi [%34 %30] [%37 %36]))
    (set! %40 (add %39 (bv #x00000001 32)))
    (store %40 %13 (bitvector 32) #:align 4)
    (br %50))

; %41
  (define-label (%41) #:merge #f
    (set! %42 (getelementptr %32 (array-offset %34 4)))
    (store (bv #x00831313 32) %42 (bitvector 32) #:align 4)
    (set! %43 (load %13 (bitvector 32) #:align 4))
    (set! %44 (load %3 pointer #:align 4))
    (set! %45 (add %43 (bv #x00000001 32)))
    (store %45 %13 (bitvector 32) #:align 4)
    (set! %46 (shl %16 (bv #x00000007 32)))
    (set! %47 (or %17 %46))
    (set! %48 (or %47 (bv #x00805013 32)))
    (set! %49 (icmp/eq %44 nullptr))
    (br %49 %50 %54))

; %50
  (define-label (%50) #:merge #f
    (set! %51 (phi [%39 %38] [%43 %41]))
    (set! %52 (add %51 (bv #x00000002 32)))
    (set! %53 (add %51 (bv #x00000003 32)))
    (store %53 %13 (bitvector 32) #:align 4)
    (br %69))

; %54
  (define-label (%54) #:merge #f
    (set! %55 (getelementptr %44 (array-offset %45 4)))
    (store %48 %55 (bitvector 32) #:align 4)
    (set! %56 (load %3 pointer #:align 4))
    (set! %57 (load %13 (bitvector 32) #:align 4))
    (set! %58 (add %57 (bv #x00000001 32)))
    (store %58 %13 (bitvector 32) #:align 4)
    (set! %59 (icmp/eq %56 nullptr))
    (br %59 %60 %63))

; %60
  (define-label (%60) #:merge #f
    (set! %61 (add %57 (bv #x00000002 32)))
    (set! %62 (add %57 (bv #x00000003 32)))
    (store %62 %13 (bitvector 32) #:align 4)
    (br %79))

; %63
  (define-label (%63) #:merge #f
    (set! %64 (getelementptr %56 (array-offset %58 4)))
    (store %18 %64 (bitvector 32) #:align 4)
    (set! %65 (load %3 pointer #:align 4))
    (set! %66 (load %13 (bitvector 32) #:align 4))
    (set! %67 (add %66 (bv #x00000001 32)))
    (store %67 %13 (bitvector 32) #:align 4)
    (set! %68 (icmp/eq %65 nullptr))
    (br %68 %69 %73))

; %69
  (define-label (%69) #:merge #f
    (set! %70 (phi [%52 %50] [%66 %63]))
    (set! %71 (add %70 (bv #x00000002 32)))
    (set! %72 (add %70 (bv #x00000003 32)))
    (store %72 %13 (bitvector 32) #:align 4)
    (br %89))

; %73
  (define-label (%73) #:merge #f
    (set! %74 (getelementptr %65 (array-offset %67 4)))
    (store (bv #x00530333 32) %74 (bitvector 32) #:align 4)
    (set! %75 (load %3 pointer #:align 4))
    (set! %76 (load %13 (bitvector 32) #:align 4))
    (set! %77 (add %76 (bv #x00000001 32)))
    (store %77 %13 (bitvector 32) #:align 4)
    (set! %78 (icmp/eq %75 nullptr))
    (br %78 %79 %83))

; %79
  (define-label (%79) #:merge #f
    (set! %80 (phi [%61 %60] [%76 %73]))
    (set! %81 (add %80 (bv #x00000002 32)))
    (set! %82 (add %80 (bv #x00000003 32)))
    (store %82 %13 (bitvector 32) #:align 4)
    (br %99))

; %83
  (define-label (%83) #:merge #f
    (set! %84 (getelementptr %75 (array-offset %77 4)))
    (store (bv #x00831313 32) %84 (bitvector 32) #:align 4)
    (set! %85 (load %3 pointer #:align 4))
    (set! %86 (load %13 (bitvector 32) #:align 4))
    (set! %87 (add %86 (bv #x00000001 32)))
    (store %87 %13 (bitvector 32) #:align 4)
    (set! %88 (icmp/eq %85 nullptr))
    (br %88 %89 %93))

; %89
  (define-label (%89) #:merge #f
    (set! %90 (phi [%71 %69] [%86 %83]))
    (set! %91 (add %90 (bv #x00000002 32)))
    (set! %92 (add %90 (bv #x00000003 32)))
    (store %92 %13 (bitvector 32) #:align 4)
    (br %109))

; %93
  (define-label (%93) #:merge #f
    (set! %94 (getelementptr %85 (array-offset %87 4)))
    (store %48 %94 (bitvector 32) #:align 4)
    (set! %95 (load %3 pointer #:align 4))
    (set! %96 (load %13 (bitvector 32) #:align 4))
    (set! %97 (add %96 (bv #x00000001 32)))
    (store %97 %13 (bitvector 32) #:align 4)
    (set! %98 (icmp/eq %95 nullptr))
    (br %98 %99 %103))

; %99
  (define-label (%99) #:merge #f
    (set! %100 (phi [%81 %79] [%96 %93]))
    (set! %101 (add %100 (bv #x00000002 32)))
    (set! %102 (add %100 (bv #x00000003 32)))
    (store %102 %13 (bitvector 32) #:align 4)
    (br %119))

; %103
  (define-label (%103) #:merge #f
    (set! %104 (getelementptr %95 (array-offset %97 4)))
    (store %18 %104 (bitvector 32) #:align 4)
    (set! %105 (load %3 pointer #:align 4))
    (set! %106 (load %13 (bitvector 32) #:align 4))
    (set! %107 (add %106 (bv #x00000001 32)))
    (store %107 %13 (bitvector 32) #:align 4)
    (set! %108 (icmp/eq %105 nullptr))
    (br %108 %109 %113))

; %109
  (define-label (%109) #:merge #f
    (set! %110 (phi [%91 %89] [%106 %103]))
    (set! %111 (add %110 (bv #x00000002 32)))
    (set! %112 (add %110 (bv #x00000003 32)))
    (store %112 %13 (bitvector 32) #:align 4)
    (br %129))

; %113
  (define-label (%113) #:merge #f
    (set! %114 (getelementptr %105 (array-offset %107 4)))
    (store (bv #x00530333 32) %114 (bitvector 32) #:align 4)
    (set! %115 (load %3 pointer #:align 4))
    (set! %116 (load %13 (bitvector 32) #:align 4))
    (set! %117 (add %116 (bv #x00000001 32)))
    (store %117 %13 (bitvector 32) #:align 4)
    (set! %118 (icmp/eq %115 nullptr))
    (br %118 %119 %123))

; %119
  (define-label (%119) #:merge #f
    (set! %120 (phi [%101 %99] [%116 %113]))
    (set! %121 (add %120 (bv #x00000002 32)))
    (set! %122 (add %120 (bv #x00000003 32)))
    (store %122 %13 (bitvector 32) #:align 4)
    (br %139))

; %123
  (define-label (%123) #:merge #f
    (set! %124 (getelementptr %115 (array-offset %117 4)))
    (store (bv #x00831313 32) %124 (bitvector 32) #:align 4)
    (set! %125 (load %3 pointer #:align 4))
    (set! %126 (load %13 (bitvector 32) #:align 4))
    (set! %127 (add %126 (bv #x00000001 32)))
    (store %127 %13 (bitvector 32) #:align 4)
    (set! %128 (icmp/eq %125 nullptr))
    (br %128 %129 %133))

; %129
  (define-label (%129) #:merge #f
    (set! %130 (phi [%111 %109] [%126 %123]))
    (set! %131 (add %130 (bv #x00000002 32)))
    (set! %132 (add %130 (bv #x00000003 32)))
    (store %132 %13 (bitvector 32) #:align 4)
    (br %148))

; %133
  (define-label (%133) #:merge #f
    (set! %134 (getelementptr %125 (array-offset %127 4)))
    (store %48 %134 (bitvector 32) #:align 4)
    (set! %135 (load %3 pointer #:align 4))
    (set! %136 (load %13 (bitvector 32) #:align 4))
    (set! %137 (add %136 (bv #x00000001 32)))
    (store %137 %13 (bitvector 32) #:align 4)
    (set! %138 (icmp/eq %135 nullptr))
    (br %138 %139 %142))

; %139
  (define-label (%139) #:merge #f
    (set! %140 (phi [%121 %119] [%136 %133]))
    (set! %141 (add %140 (bv #x00000003 32)))
    (store %141 %13 (bitvector 32) #:align 4)
    (br %161))

; %142
  (define-label (%142) #:merge #f
    (set! %143 (getelementptr %135 (array-offset %137 4)))
    (store %18 %143 (bitvector 32) #:align 4)
    (set! %144 (load %3 pointer #:align 4))
    (set! %145 (load %13 (bitvector 32) #:align 4))
    (set! %146 (add %145 (bv #x00000001 32)))
    (store %146 %13 (bitvector 32) #:align 4)
    (set! %147 (icmp/eq %144 nullptr))
    (br %147 %148 %151))

; %148
  (define-label (%148) #:merge #f
    (set! %149 (phi [%131 %129] [%145 %142]))
    (set! %150 (add %149 (bv #x00000002 32)))
    (store %150 %13 (bitvector 32) #:align 4)
    (br %161))

; %151
  (define-label (%151) #:merge #f
    (set! %152 (getelementptr %144 (array-offset %146 4)))
    (store (bv #x00530333 32) %152 (bitvector 32) #:align 4)
    (set! %153 (load %3 pointer #:align 4))
    (set! %154 (load %13 (bitvector 32) #:align 4))
    (set! %155 (add %154 (bv #x00000001 32)))
    (store %155 %13 (bitvector 32) #:align 4)
    (set! %156 (icmp/eq %153 nullptr))
    (br %156 %161 %157))

; %157
  (define-label (%157) #:merge #f
    (set! %158 (or %46 (bv #x00030013 32)))
    (set! %159 (getelementptr %153 (array-offset %155 4)))
    (store %158 %159 (bitvector 32) #:align 4)
    (set! %160 (load %13 (bitvector 32) #:align 4))
    (br %161))

; %161
  (define-label (%161) #:merge #f
    (set! %162 (phi [%150 %148] [%155 %151] [%160 %157] [%141 %139]))
    (set! %163 (add %162 (bv #x00000001 32)))
    (store %163 %13 (bitvector 32) #:align 4)
    (ret))

  (define-value %3)
  (define-value %4)
  (define-value %5)
  (define-value %7)
  (define-value %8)
  (define-value %9)
  (define-value %10)
  (define-value %12)
  (define-value %13)
  (define-value %14)
  (define-value %15)
  (define-value %16)
  (define-value %17)
  (define-value %18)
  (define-value %19)
  (define-value %21)
  (define-value %23)
  (define-value %24)
  (define-value %25)
  (define-value %26)
  (define-value %27)
  (define-value %29)
  (define-value %31)
  (define-value %32)
  (define-value %33)
  (define-value %34)
  (define-value %35)
  (define-value %37)
  (define-value %39)
  (define-value %40)
  (define-value %42)
  (define-value %43)
  (define-value %44)
  (define-value %45)
  (define-value %46)
  (define-value %47)
  (define-value %48)
  (define-value %49)
  (define-value %51)
  (define-value %52)
  (define-value %53)
  (define-value %55)
  (define-value %56)
  (define-value %57)
  (define-value %58)
  (define-value %59)
  (define-value %61)
  (define-value %62)
  (define-value %64)
  (define-value %65)
  (define-value %66)
  (define-value %67)
  (define-value %68)
  (define-value %70)
  (define-value %71)
  (define-value %72)
  (define-value %74)
  (define-value %75)
  (define-value %76)
  (define-value %77)
  (define-value %78)
  (define-value %80)
  (define-value %81)
  (define-value %82)
  (define-value %84)
  (define-value %85)
  (define-value %86)
  (define-value %87)
  (define-value %88)
  (define-value %90)
  (define-value %91)
  (define-value %92)
  (define-value %94)
  (define-value %95)
  (define-value %96)
  (define-value %97)
  (define-value %98)
  (define-value %100)
  (define-value %101)
  (define-value %102)
  (define-value %104)
  (define-value %105)
  (define-value %106)
  (define-value %107)
  (define-value %108)
  (define-value %110)
  (define-value %111)
  (define-value %112)
  (define-value %114)
  (define-value %115)
  (define-value %116)
  (define-value %117)
  (define-value %118)
  (define-value %120)
  (define-value %121)
  (define-value %122)
  (define-value %124)
  (define-value %125)
  (define-value %126)
  (define-value %127)
  (define-value %128)
  (define-value %130)
  (define-value %131)
  (define-value %132)
  (define-value %134)
  (define-value %135)
  (define-value %136)
  (define-value %137)
  (define-value %138)
  (define-value %140)
  (define-value %141)
  (define-value %143)
  (define-value %144)
  (define-value %145)
  (define-value %146)
  (define-value %147)
  (define-value %149)
  (define-value %150)
  (define-value %152)
  (define-value %153)
  (define-value %154)
  (define-value %155)
  (define-value %156)
  (define-value %158)
  (define-value %159)
  (define-value %160)
  (define-value %162)
  (define-value %163)
  (enter! %2))

(define (@bpf_jit_get_func_addr %0 %1 %2 %3 %4)
  (unreachable))

(define (@bpf_jit_build_prologue %0)
; %1
  (define-label (%1) #:merge #f
    (set! %2 (getelementptr %0 (array-offset (bv #x00000000 32) 28) (struct-offset 0)))
    (set! %3 (load %2 pointer #:align 4))
    (set! %4 (getelementptr %3 (array-offset (bv #x00000000 32) 40) (struct-offset 28)))
    (set! %5 (load %4 pointer #:align 4))
    (set! %6 (getelementptr %5 (array-offset (bv #x00000000 32) 384) (struct-offset 24)))
    (set! %7 (load %6 (bitvector 32) #:align 8))
    (set! %8 (add %7 (bv #xffffffff 32)))
    (set! %9 (or %8 (bv #x0000000f 32)))
    (set! %10 (add %9 (bv #x0000004c 32)))
    (set! %11 (or %10 (bv #x0000000f 32)))
    (set! %12 (add %11 (bv #x00000001 32)))
    (set! %13 (getelementptr %0 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %14 (load %13 pointer #:align 4))
    (set! %15 (icmp/eq %14 nullptr))
    (set! %16 (getelementptr %0 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %17 (load %16 (bitvector 32) #:align 4))
    (br %15 %18 %20))

; %18
  (define-label (%18) #:merge #f
    (set! %19 (add %17 (bv #x00000001 32)))
    (store %19 %16 (bitvector 32) #:align 4)
    (br %27))

; %20
  (define-label (%20) #:merge #f
    (set! %21 (getelementptr %14 (array-offset %17 4)))
    (store (bv #x02000f93 32) %21 (bitvector 32) #:align 4)
    (set! %22 (load %13 pointer #:align 4))
    (set! %23 (getelementptr %0 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %24 (load %23 (bitvector 32) #:align 4))
    (set! %25 (add %24 (bv #x00000001 32)))
    (store %25 %23 (bitvector 32) #:align 4)
    (set! %26 (icmp/eq %22 nullptr))
    (br %26 %27 %31))

; %27
  (define-label (%27) #:merge #f
    (set! %28 (phi [%16 %18] [%23 %20]))
    (set! %29 (phi [%19 %18] [%25 %20]))
    (set! %30 (add %29 (bv #x00000001 32)))
    (store %30 %28 (bitvector 32) #:align 4)
    (br %42))

; %31
  (define-label (%31) #:merge #f
    (set! %32 (shl %10 (bv #x00000014 32)))
    (set! %33 (and %32 (bv #xff000000 32)))
    (set! %34 (xor %33 (bv #xff010113 32)))
    (set! %35 (getelementptr %22 (array-offset %25 4)))
    (store %34 %35 (bitvector 32) #:align 4)
    (set! %36 (load %23 (bitvector 32) #:align 4))
    (set! %37 (load %13 pointer #:align 4))
    (set! %38 (add %36 (bv #x00000001 32)))
    (store %38 %23 (bitvector 32) #:align 4)
    (set! %39 (trunc %11 (bitvector 16)))
    (set! %40 (add %39 (bv #xfffd 16)))
    (set! %41 (icmp/eq %37 nullptr))
    (br %41 %42 %46))

; %42
  (define-label (%42) #:merge #f
    (set! %43 (phi [%28 %27] [%23 %31]))
    (set! %44 (phi [%30 %27] [%38 %31]))
    (set! %45 (add %44 (bv #x00000001 32)))
    (store %45 %43 (bitvector 32) #:align 4)
    (br %61))

; %46
  (define-label (%46) #:merge #f
    (set! %47 (lshr %40 (bv #x0005 16)))
    (set! %48 (zext %47 (bitvector 32)))
    (set! %49 (shl %48 (bv #x00000019 32)))
    (set! %50 (shl %40 (bv #x0007 16)))
    (set! %51 (and %50 (bv #x0e00 16)))
    (set! %52 (zext %51 (bitvector 32)))
    (set! %53 (or %49 %52))
    (set! %54 (or %53 (bv #x00112023 32)))
    (set! %55 (getelementptr %37 (array-offset %38 4)))
    (store %54 %55 (bitvector 32) #:align 4)
    (set! %56 (load %23 (bitvector 32) #:align 4))
    (set! %57 (load %13 pointer #:align 4))
    (set! %58 (add %56 (bv #x00000001 32)))
    (store %58 %23 (bitvector 32) #:align 4)
    (set! %59 (add %39 (bv #xfff9 16)))
    (set! %60 (icmp/eq %57 nullptr))
    (br %60 %61 %65))

; %61
  (define-label (%61) #:merge #f
    (set! %62 (phi [%43 %42] [%23 %46]))
    (set! %63 (phi [%45 %42] [%58 %46]))
    (set! %64 (add %63 (bv #x00000001 32)))
    (store %64 %62 (bitvector 32) #:align 4)
    (br %80))

; %65
  (define-label (%65) #:merge #f
    (set! %66 (lshr %59 (bv #x0005 16)))
    (set! %67 (zext %66 (bitvector 32)))
    (set! %68 (shl %67 (bv #x00000019 32)))
    (set! %69 (shl %59 (bv #x0007 16)))
    (set! %70 (and %69 (bv #x0c00 16)))
    (set! %71 (zext %70 (bitvector 32)))
    (set! %72 (or %68 %71))
    (set! %73 (or %72 (bv #x00812023 32)))
    (set! %74 (getelementptr %57 (array-offset %58 4)))
    (store %73 %74 (bitvector 32) #:align 4)
    (set! %75 (load %23 (bitvector 32) #:align 4))
    (set! %76 (load %13 pointer #:align 4))
    (set! %77 (add %75 (bv #x00000001 32)))
    (store %77 %23 (bitvector 32) #:align 4)
    (set! %78 (add %39 (bv #xfff5 16)))
    (set! %79 (icmp/eq %76 nullptr))
    (br %79 %80 %84))

; %80
  (define-label (%80) #:merge #f
    (set! %81 (phi [%62 %61] [%23 %65]))
    (set! %82 (phi [%64 %61] [%77 %65]))
    (set! %83 (add %82 (bv #x00000001 32)))
    (store %83 %81 (bitvector 32) #:align 4)
    (br %98))

; %84
  (define-label (%84) #:merge #f
    (set! %85 (lshr %78 (bv #x0005 16)))
    (set! %86 (zext %85 (bitvector 32)))
    (set! %87 (shl %86 (bv #x00000019 32)))
    (set! %88 (shl %78 (bv #x0007 16)))
    (set! %89 (and %88 (bv #x0a00 16)))
    (set! %90 (zext %89 (bitvector 32)))
    (set! %91 (or %87 %90))
    (set! %92 (or %91 (bv #x00912023 32)))
    (set! %93 (getelementptr %76 (array-offset %77 4)))
    (store %92 %93 (bitvector 32) #:align 4)
    (set! %94 (load %23 (bitvector 32) #:align 4))
    (set! %95 (load %13 pointer #:align 4))
    (set! %96 (add %94 (bv #x00000001 32)))
    (store %96 %23 (bitvector 32) #:align 4)
    (set! %97 (icmp/eq %95 nullptr))
    (br %97 %98 %102))

; %98
  (define-label (%98) #:merge #f
    (set! %99 (phi [%81 %80] [%23 %84]))
    (set! %100 (phi [%83 %80] [%96 %84]))
    (set! %101 (add %100 (bv #x00000001 32)))
    (store %101 %99 (bitvector 32) #:align 4)
    (br %115))

; %102
  (define-label (%102) #:merge #f
    (set! %103 (lshr %10 (bv #x00000005 32)))
    (set! %104 (shl %103 (bv #x00000019 32)))
    (set! %105 (shl %10 (bv #x00000007 32)))
    (set! %106 (and %105 (bv #x00000800 32)))
    (set! %107 (or %106 %104))
    (set! %108 (or %107 (bv #x01212023 32)))
    (set! %109 (getelementptr %95 (array-offset %96 4)))
    (store %108 %109 (bitvector 32) #:align 4)
    (set! %110 (load %23 (bitvector 32) #:align 4))
    (set! %111 (load %13 pointer #:align 4))
    (set! %112 (add %110 (bv #x00000001 32)))
    (store %112 %23 (bitvector 32) #:align 4)
    (set! %113 (add %39 (bv #xffed 16)))
    (set! %114 (icmp/eq %111 nullptr))
    (br %114 %115 %119))

; %115
  (define-label (%115) #:merge #f
    (set! %116 (phi [%99 %98] [%23 %102]))
    (set! %117 (phi [%101 %98] [%112 %102]))
    (set! %118 (add %117 (bv #x00000001 32)))
    (store %118 %116 (bitvector 32) #:align 4)
    (br %134))

; %119
  (define-label (%119) #:merge #f
    (set! %120 (lshr %113 (bv #x0005 16)))
    (set! %121 (zext %120 (bitvector 32)))
    (set! %122 (shl %121 (bv #x00000019 32)))
    (set! %123 (shl %113 (bv #x0007 16)))
    (set! %124 (and %123 (bv #x0e00 16)))
    (set! %125 (zext %124 (bitvector 32)))
    (set! %126 (or %122 %125))
    (set! %127 (or %126 (bv #x01312023 32)))
    (set! %128 (getelementptr %111 (array-offset %112 4)))
    (store %127 %128 (bitvector 32) #:align 4)
    (set! %129 (load %23 (bitvector 32) #:align 4))
    (set! %130 (load %13 pointer #:align 4))
    (set! %131 (add %129 (bv #x00000001 32)))
    (store %131 %23 (bitvector 32) #:align 4)
    (set! %132 (add %39 (bv #xffe9 16)))
    (set! %133 (icmp/eq %130 nullptr))
    (br %133 %134 %138))

; %134
  (define-label (%134) #:merge #f
    (set! %135 (phi [%116 %115] [%23 %119]))
    (set! %136 (phi [%118 %115] [%131 %119]))
    (set! %137 (add %136 (bv #x00000001 32)))
    (store %137 %135 (bitvector 32) #:align 4)
    (br %153))

; %138
  (define-label (%138) #:merge #f
    (set! %139 (lshr %132 (bv #x0005 16)))
    (set! %140 (zext %139 (bitvector 32)))
    (set! %141 (shl %140 (bv #x00000019 32)))
    (set! %142 (shl %132 (bv #x0007 16)))
    (set! %143 (and %142 (bv #x0c00 16)))
    (set! %144 (zext %143 (bitvector 32)))
    (set! %145 (or %141 %144))
    (set! %146 (or %145 (bv #x01412023 32)))
    (set! %147 (getelementptr %130 (array-offset %131 4)))
    (store %146 %147 (bitvector 32) #:align 4)
    (set! %148 (load %23 (bitvector 32) #:align 4))
    (set! %149 (load %13 pointer #:align 4))
    (set! %150 (add %148 (bv #x00000001 32)))
    (store %150 %23 (bitvector 32) #:align 4)
    (set! %151 (add %39 (bv #xffe5 16)))
    (set! %152 (icmp/eq %149 nullptr))
    (br %152 %153 %157))

; %153
  (define-label (%153) #:merge #f
    (set! %154 (phi [%135 %134] [%23 %138]))
    (set! %155 (phi [%137 %134] [%150 %138]))
    (set! %156 (add %155 (bv #x00000001 32)))
    (store %156 %154 (bitvector 32) #:align 4)
    (br %172))

; %157
  (define-label (%157) #:merge #f
    (set! %158 (lshr %151 (bv #x0005 16)))
    (set! %159 (zext %158 (bitvector 32)))
    (set! %160 (shl %159 (bv #x00000019 32)))
    (set! %161 (shl %151 (bv #x0007 16)))
    (set! %162 (and %161 (bv #x0a00 16)))
    (set! %163 (zext %162 (bitvector 32)))
    (set! %164 (or %160 %163))
    (set! %165 (or %164 (bv #x01512023 32)))
    (set! %166 (getelementptr %149 (array-offset %150 4)))
    (store %165 %166 (bitvector 32) #:align 4)
    (set! %167 (load %23 (bitvector 32) #:align 4))
    (set! %168 (load %13 pointer #:align 4))
    (set! %169 (add %167 (bv #x00000001 32)))
    (store %169 %23 (bitvector 32) #:align 4)
    (set! %170 (add %39 (bv #xffe1 16)))
    (set! %171 (icmp/eq %168 nullptr))
    (br %171 %172 %176))

; %172
  (define-label (%172) #:merge #f
    (set! %173 (phi [%154 %153] [%23 %157]))
    (set! %174 (phi [%156 %153] [%169 %157]))
    (set! %175 (add %174 (bv #x00000001 32)))
    (store %175 %173 (bitvector 32) #:align 4)
    (br %191))

; %176
  (define-label (%176) #:merge #f
    (set! %177 (lshr %170 (bv #x0005 16)))
    (set! %178 (zext %177 (bitvector 32)))
    (set! %179 (shl %178 (bv #x00000019 32)))
    (set! %180 (shl %170 (bv #x0007 16)))
    (set! %181 (and %180 (bv #x0800 16)))
    (set! %182 (zext %181 (bitvector 32)))
    (set! %183 (or %179 %182))
    (set! %184 (or %183 (bv #x01612023 32)))
    (set! %185 (getelementptr %168 (array-offset %169 4)))
    (store %184 %185 (bitvector 32) #:align 4)
    (set! %186 (load %23 (bitvector 32) #:align 4))
    (set! %187 (load %13 pointer #:align 4))
    (set! %188 (add %186 (bv #x00000001 32)))
    (store %188 %23 (bitvector 32) #:align 4)
    (set! %189 (add %39 (bv #xffdd 16)))
    (set! %190 (icmp/eq %187 nullptr))
    (br %190 %191 %195))

; %191
  (define-label (%191) #:merge #f
    (set! %192 (phi [%173 %172] [%23 %176]))
    (set! %193 (phi [%175 %172] [%188 %176]))
    (set! %194 (add %193 (bv #x00000001 32)))
    (store %194 %192 (bitvector 32) #:align 4)
    (br %209))

; %195
  (define-label (%195) #:merge #f
    (set! %196 (lshr %189 (bv #x0005 16)))
    (set! %197 (zext %196 (bitvector 32)))
    (set! %198 (shl %197 (bv #x00000019 32)))
    (set! %199 (shl %189 (bv #x0007 16)))
    (set! %200 (and %199 (bv #x0e00 16)))
    (set! %201 (zext %200 (bitvector 32)))
    (set! %202 (or %198 %201))
    (set! %203 (or %202 (bv #x01712023 32)))
    (set! %204 (getelementptr %187 (array-offset %188 4)))
    (store %203 %204 (bitvector 32) #:align 4)
    (set! %205 (load %23 (bitvector 32) #:align 4))
    (set! %206 (load %13 pointer #:align 4))
    (set! %207 (add %205 (bv #x00000001 32)))
    (store %207 %23 (bitvector 32) #:align 4)
    (set! %208 (icmp/eq %206 nullptr))
    (br %208 %209 %213))

; %209
  (define-label (%209) #:merge #f
    (set! %210 (phi [%192 %191] [%23 %195]))
    (set! %211 (phi [%194 %191] [%207 %195]))
    (set! %212 (add %211 (bv #x00000001 32)))
    (store %212 %210 (bitvector 32) #:align 4)
    (br %221))

; %213
  (define-label (%213) #:merge #f
    (set! %214 (shl %12 (bv #x00000014 32)))
    (set! %215 (or %214 (bv #x00010413 32)))
    (set! %216 (getelementptr %206 (array-offset %207 4)))
    (store %215 %216 (bitvector 32) #:align 4)
    (set! %217 (load %23 (bitvector 32) #:align 4))
    (set! %218 (load %13 pointer #:align 4))
    (set! %219 (add %217 (bv #x00000001 32)))
    (store %219 %23 (bitvector 32) #:align 4)
    (set! %220 (icmp/eq %218 nullptr))
    (br %220 %221 %226))

; %221
  (define-label (%221) #:merge #f
    (set! %222 (phi [%211 %209] [%217 %213]))
    (set! %223 (phi [%210 %209] [%23 %213]))
    (set! %224 (add %222 (bv #x00000002 32)))
    (set! %225 (add %222 (bv #x00000003 32)))
    (store %225 %223 (bitvector 32) #:align 4)
    (br %243))

; %226
  (define-label (%226) #:merge #f
    (set! %227 (shl %9 (bv #x00000014 32)))
    (set! %228 (add %227 (bv #x00100000 32)))
    (set! %229 (or %228 (bv #x00010a93 32)))
    (set! %230 (getelementptr %218 (array-offset %219 4)))
    (store %229 %230 (bitvector 32) #:align 4)
    (set! %231 (load %13 pointer #:align 4))
    (set! %232 (load %23 (bitvector 32) #:align 4))
    (set! %233 (add %232 (bv #x00000001 32)))
    (store %233 %23 (bitvector 32) #:align 4)
    (set! %234 (icmp/eq %231 nullptr))
    (br %234 %235 %237))

; %235
  (define-label (%235) #:merge #f
    (set! %236 (add %232 (bv #x00000003 32)))
    (store %236 %23 (bitvector 32) #:align 4)
    (br %256))

; %237
  (define-label (%237) #:merge #f
    (set! %238 (getelementptr %231 (array-offset %233 4)))
    (store (bv #x00000b13 32) %238 (bitvector 32) #:align 4)
    (set! %239 (load %13 pointer #:align 4))
    (set! %240 (load %23 (bitvector 32) #:align 4))
    (set! %241 (add %240 (bv #x00000001 32)))
    (store %241 %23 (bitvector 32) #:align 4)
    (set! %242 (icmp/eq %239 nullptr))
    (br %242 %243 %247))

; %243
  (define-label (%243) #:merge #f
    (set! %244 (phi [%224 %221] [%240 %237]))
    (set! %245 (phi [%223 %221] [%23 %237]))
    (set! %246 (add %244 (bv #x00000002 32)))
    (store %246 %245 (bitvector 32) #:align 4)
    (br %256))

; %247
  (define-label (%247) #:merge #f
    (set! %248 (getelementptr %239 (array-offset %241 4)))
    (store (bv #x00050513 32) %248 (bitvector 32) #:align 4)
    (set! %249 (load %13 pointer #:align 4))
    (set! %250 (load %23 (bitvector 32) #:align 4))
    (set! %251 (add %250 (bv #x00000001 32)))
    (store %251 %23 (bitvector 32) #:align 4)
    (set! %252 (icmp/eq %249 nullptr))
    (br %252 %256 %253))

; %253
  (define-label (%253) #:merge #f
    (set! %254 (getelementptr %249 (array-offset %251 4)))
    (store (bv #x00000593 32) %254 (bitvector 32) #:align 4)
    (set! %255 (load %23 (bitvector 32) #:align 4))
    (br %256))

; %256
  (define-label (%256) #:merge #f
    (set! %257 (phi [%245 %243] [%23 %247] [%23 %253] [%23 %235]))
    (set! %258 (phi [%246 %243] [%251 %247] [%255 %253] [%236 %235]))
    (set! %259 (add %258 (bv #x00000001 32)))
    (store %259 %257 (bitvector 32) #:align 4)
    (set! %260 (getelementptr %0 (array-offset (bv #x00000000 32) 28) (struct-offset 24)))
    (store %12 %260 (bitvector 32) #:align 4)
    (ret))

  (define-value %2)
  (define-value %3)
  (define-value %4)
  (define-value %5)
  (define-value %6)
  (define-value %7)
  (define-value %8)
  (define-value %9)
  (define-value %10)
  (define-value %11)
  (define-value %12)
  (define-value %13)
  (define-value %14)
  (define-value %15)
  (define-value %16)
  (define-value %17)
  (define-value %19)
  (define-value %21)
  (define-value %22)
  (define-value %23)
  (define-value %24)
  (define-value %25)
  (define-value %26)
  (define-value %28)
  (define-value %29)
  (define-value %30)
  (define-value %32)
  (define-value %33)
  (define-value %34)
  (define-value %35)
  (define-value %36)
  (define-value %37)
  (define-value %38)
  (define-value %39)
  (define-value %40)
  (define-value %41)
  (define-value %43)
  (define-value %44)
  (define-value %45)
  (define-value %47)
  (define-value %48)
  (define-value %49)
  (define-value %50)
  (define-value %51)
  (define-value %52)
  (define-value %53)
  (define-value %54)
  (define-value %55)
  (define-value %56)
  (define-value %57)
  (define-value %58)
  (define-value %59)
  (define-value %60)
  (define-value %62)
  (define-value %63)
  (define-value %64)
  (define-value %66)
  (define-value %67)
  (define-value %68)
  (define-value %69)
  (define-value %70)
  (define-value %71)
  (define-value %72)
  (define-value %73)
  (define-value %74)
  (define-value %75)
  (define-value %76)
  (define-value %77)
  (define-value %78)
  (define-value %79)
  (define-value %81)
  (define-value %82)
  (define-value %83)
  (define-value %85)
  (define-value %86)
  (define-value %87)
  (define-value %88)
  (define-value %89)
  (define-value %90)
  (define-value %91)
  (define-value %92)
  (define-value %93)
  (define-value %94)
  (define-value %95)
  (define-value %96)
  (define-value %97)
  (define-value %99)
  (define-value %100)
  (define-value %101)
  (define-value %103)
  (define-value %104)
  (define-value %105)
  (define-value %106)
  (define-value %107)
  (define-value %108)
  (define-value %109)
  (define-value %110)
  (define-value %111)
  (define-value %112)
  (define-value %113)
  (define-value %114)
  (define-value %116)
  (define-value %117)
  (define-value %118)
  (define-value %120)
  (define-value %121)
  (define-value %122)
  (define-value %123)
  (define-value %124)
  (define-value %125)
  (define-value %126)
  (define-value %127)
  (define-value %128)
  (define-value %129)
  (define-value %130)
  (define-value %131)
  (define-value %132)
  (define-value %133)
  (define-value %135)
  (define-value %136)
  (define-value %137)
  (define-value %139)
  (define-value %140)
  (define-value %141)
  (define-value %142)
  (define-value %143)
  (define-value %144)
  (define-value %145)
  (define-value %146)
  (define-value %147)
  (define-value %148)
  (define-value %149)
  (define-value %150)
  (define-value %151)
  (define-value %152)
  (define-value %154)
  (define-value %155)
  (define-value %156)
  (define-value %158)
  (define-value %159)
  (define-value %160)
  (define-value %161)
  (define-value %162)
  (define-value %163)
  (define-value %164)
  (define-value %165)
  (define-value %166)
  (define-value %167)
  (define-value %168)
  (define-value %169)
  (define-value %170)
  (define-value %171)
  (define-value %173)
  (define-value %174)
  (define-value %175)
  (define-value %177)
  (define-value %178)
  (define-value %179)
  (define-value %180)
  (define-value %181)
  (define-value %182)
  (define-value %183)
  (define-value %184)
  (define-value %185)
  (define-value %186)
  (define-value %187)
  (define-value %188)
  (define-value %189)
  (define-value %190)
  (define-value %192)
  (define-value %193)
  (define-value %194)
  (define-value %196)
  (define-value %197)
  (define-value %198)
  (define-value %199)
  (define-value %200)
  (define-value %201)
  (define-value %202)
  (define-value %203)
  (define-value %204)
  (define-value %205)
  (define-value %206)
  (define-value %207)
  (define-value %208)
  (define-value %210)
  (define-value %211)
  (define-value %212)
  (define-value %214)
  (define-value %215)
  (define-value %216)
  (define-value %217)
  (define-value %218)
  (define-value %219)
  (define-value %220)
  (define-value %222)
  (define-value %223)
  (define-value %224)
  (define-value %225)
  (define-value %227)
  (define-value %228)
  (define-value %229)
  (define-value %230)
  (define-value %231)
  (define-value %232)
  (define-value %233)
  (define-value %234)
  (define-value %236)
  (define-value %238)
  (define-value %239)
  (define-value %240)
  (define-value %241)
  (define-value %242)
  (define-value %244)
  (define-value %245)
  (define-value %246)
  (define-value %248)
  (define-value %249)
  (define-value %250)
  (define-value %251)
  (define-value %252)
  (define-value %254)
  (define-value %255)
  (define-value %257)
  (define-value %258)
  (define-value %259)
  (define-value %260)
  (enter! %1))

(define (@bpf_jit_build_epilogue %0)
; %1
  (define-label (%1) #:merge #f
    (call @__build_epilogue (bv #b0 1) %0)
    (ret))

  (enter! %1))

(define (@__build_epilogue %0 %1)
; %2
  (define-label (%2) #:merge #f
    (set! %3 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 24)))
    (set! %4 (load %3 (bitvector 32) #:align 4))
    (br %0 %25 %5))

; %5
  (define-label (%5) #:merge #f
    (set! %6 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %7 (load %6 pointer #:align 4))
    (set! %8 (icmp/eq %7 nullptr))
    (set! %9 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %10 (load %9 (bitvector 32) #:align 4))
    (br %8 %11 %13))

; %11
  (define-label (%11) #:merge #f
    (set! %12 (add %10 (bv #x00000001 32)))
    (store %12 %9 (bitvector 32) #:align 4)
    (br %22))

; %13
  (define-label (%13) #:merge #f
    (set! %14 (getelementptr %7 (array-offset %10 4)))
    (store (bv #x00048513 32) %14 (bitvector 32) #:align 4)
    (set! %15 (load %6 pointer #:align 4))
    (set! %16 (load %9 (bitvector 32) #:align 4))
    (set! %17 (add %16 (bv #x00000001 32)))
    (store %17 %9 (bitvector 32) #:align 4)
    (set! %18 (icmp/eq %15 nullptr))
    (br %18 %22 %19))

; %19
  (define-label (%19) #:merge #f
    (set! %20 (getelementptr %15 (array-offset %17 4)))
    (store (bv #x00090593 32) %20 (bitvector 32) #:align 4)
    (set! %21 (load %9 (bitvector 32) #:align 4))
    (br %22))

; %22
  (define-label (%22) #:merge #f
    (set! %23 (phi [%12 %11] [%17 %13] [%21 %19]))
    (set! %24 (add %23 (bv #x00000001 32)))
    (store %24 %9 (bitvector 32) #:align 4)
    (br %25))

; %25
  (define-label (%25) #:merge #f
    (set! %26 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %27 (load %26 pointer #:align 4))
    (set! %28 (icmp/eq %27 nullptr))
    (br %28 %29 %33))

; %29
  (define-label (%29) #:merge #f
    (set! %30 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %31 (load %30 (bitvector 32) #:align 4))
    (set! %32 (add %31 (bv #x00000001 32)))
    (store %32 %30 (bitvector 32) #:align 4)
    (br %45))

; %33
  (define-label (%33) #:merge #f
    (set! %34 (shl %4 (bv #x00000014 32)))
    (set! %35 (add %34 (bv #xffc00000 32)))
    (set! %36 (or %35 (bv #x00012083 32)))
    (set! %37 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %38 (load %37 (bitvector 32) #:align 4))
    (set! %39 (getelementptr %27 (array-offset %38 4)))
    (store %36 %39 (bitvector 32) #:align 4)
    (set! %40 (load %26 pointer #:align 4))
    (set! %41 (getelementptr %1 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %42 (load %41 (bitvector 32) #:align 4))
    (set! %43 (add %42 (bv #x00000001 32)))
    (store %43 %41 (bitvector 32) #:align 4)
    (set! %44 (icmp/eq %40 nullptr))
    (br %44 %45 %49))

; %45
  (define-label (%45) #:merge #f
    (set! %46 (phi [%30 %29] [%41 %33]))
    (set! %47 (phi [%32 %29] [%43 %33]))
    (set! %48 (add %47 (bv #x00000001 32)))
    (store %48 %46 (bitvector 32) #:align 4)
    (br %58))

; %49
  (define-label (%49) #:merge #f
    (set! %50 (shl %4 (bv #x00000014 32)))
    (set! %51 (add %50 (bv #xff800000 32)))
    (set! %52 (or %51 (bv #x00012403 32)))
    (set! %53 (getelementptr %40 (array-offset %43 4)))
    (store %52 %53 (bitvector 32) #:align 4)
    (set! %54 (load %41 (bitvector 32) #:align 4))
    (set! %55 (load %26 pointer #:align 4))
    (set! %56 (add %54 (bv #x00000001 32)))
    (store %56 %41 (bitvector 32) #:align 4)
    (set! %57 (icmp/eq %55 nullptr))
    (br %57 %58 %62))

; %58
  (define-label (%58) #:merge #f
    (set! %59 (phi [%46 %45] [%41 %49]))
    (set! %60 (phi [%48 %45] [%56 %49]))
    (set! %61 (add %60 (bv #x00000001 32)))
    (store %61 %59 (bitvector 32) #:align 4)
    (br %71))

; %62
  (define-label (%62) #:merge #f
    (set! %63 (shl %4 (bv #x00000014 32)))
    (set! %64 (add %63 (bv #xff400000 32)))
    (set! %65 (or %64 (bv #x00012483 32)))
    (set! %66 (getelementptr %55 (array-offset %56 4)))
    (store %65 %66 (bitvector 32) #:align 4)
    (set! %67 (load %41 (bitvector 32) #:align 4))
    (set! %68 (load %26 pointer #:align 4))
    (set! %69 (add %67 (bv #x00000001 32)))
    (store %69 %41 (bitvector 32) #:align 4)
    (set! %70 (icmp/eq %68 nullptr))
    (br %70 %71 %75))

; %71
  (define-label (%71) #:merge #f
    (set! %72 (phi [%59 %58] [%41 %62]))
    (set! %73 (phi [%61 %58] [%69 %62]))
    (set! %74 (add %73 (bv #x00000001 32)))
    (store %74 %72 (bitvector 32) #:align 4)
    (br %84))

; %75
  (define-label (%75) #:merge #f
    (set! %76 (shl %4 (bv #x00000014 32)))
    (set! %77 (add %76 (bv #xff000000 32)))
    (set! %78 (or %77 (bv #x00012903 32)))
    (set! %79 (getelementptr %68 (array-offset %69 4)))
    (store %78 %79 (bitvector 32) #:align 4)
    (set! %80 (load %41 (bitvector 32) #:align 4))
    (set! %81 (load %26 pointer #:align 4))
    (set! %82 (add %80 (bv #x00000001 32)))
    (store %82 %41 (bitvector 32) #:align 4)
    (set! %83 (icmp/eq %81 nullptr))
    (br %83 %84 %88))

; %84
  (define-label (%84) #:merge #f
    (set! %85 (phi [%72 %71] [%41 %75]))
    (set! %86 (phi [%74 %71] [%82 %75]))
    (set! %87 (add %86 (bv #x00000001 32)))
    (store %87 %85 (bitvector 32) #:align 4)
    (br %97))

; %88
  (define-label (%88) #:merge #f
    (set! %89 (shl %4 (bv #x00000014 32)))
    (set! %90 (add %89 (bv #xfec00000 32)))
    (set! %91 (or %90 (bv #x00012983 32)))
    (set! %92 (getelementptr %81 (array-offset %82 4)))
    (store %91 %92 (bitvector 32) #:align 4)
    (set! %93 (load %41 (bitvector 32) #:align 4))
    (set! %94 (load %26 pointer #:align 4))
    (set! %95 (add %93 (bv #x00000001 32)))
    (store %95 %41 (bitvector 32) #:align 4)
    (set! %96 (icmp/eq %94 nullptr))
    (br %96 %97 %101))

; %97
  (define-label (%97) #:merge #f
    (set! %98 (phi [%85 %84] [%41 %88]))
    (set! %99 (phi [%87 %84] [%95 %88]))
    (set! %100 (add %99 (bv #x00000001 32)))
    (store %100 %98 (bitvector 32) #:align 4)
    (br %110))

; %101
  (define-label (%101) #:merge #f
    (set! %102 (shl %4 (bv #x00000014 32)))
    (set! %103 (add %102 (bv #xfe800000 32)))
    (set! %104 (or %103 (bv #x00012a03 32)))
    (set! %105 (getelementptr %94 (array-offset %95 4)))
    (store %104 %105 (bitvector 32) #:align 4)
    (set! %106 (load %41 (bitvector 32) #:align 4))
    (set! %107 (load %26 pointer #:align 4))
    (set! %108 (add %106 (bv #x00000001 32)))
    (store %108 %41 (bitvector 32) #:align 4)
    (set! %109 (icmp/eq %107 nullptr))
    (br %109 %110 %114))

; %110
  (define-label (%110) #:merge #f
    (set! %111 (phi [%98 %97] [%41 %101]))
    (set! %112 (phi [%100 %97] [%108 %101]))
    (set! %113 (add %112 (bv #x00000001 32)))
    (store %113 %111 (bitvector 32) #:align 4)
    (br %123))

; %114
  (define-label (%114) #:merge #f
    (set! %115 (shl %4 (bv #x00000014 32)))
    (set! %116 (add %115 (bv #xfe400000 32)))
    (set! %117 (or %116 (bv #x00012a83 32)))
    (set! %118 (getelementptr %107 (array-offset %108 4)))
    (store %117 %118 (bitvector 32) #:align 4)
    (set! %119 (load %41 (bitvector 32) #:align 4))
    (set! %120 (load %26 pointer #:align 4))
    (set! %121 (add %119 (bv #x00000001 32)))
    (store %121 %41 (bitvector 32) #:align 4)
    (set! %122 (icmp/eq %120 nullptr))
    (br %122 %123 %127))

; %123
  (define-label (%123) #:merge #f
    (set! %124 (phi [%111 %110] [%41 %114]))
    (set! %125 (phi [%113 %110] [%121 %114]))
    (set! %126 (add %125 (bv #x00000001 32)))
    (store %126 %124 (bitvector 32) #:align 4)
    (br %136))

; %127
  (define-label (%127) #:merge #f
    (set! %128 (shl %4 (bv #x00000014 32)))
    (set! %129 (add %128 (bv #xfe000000 32)))
    (set! %130 (or %129 (bv #x00012b03 32)))
    (set! %131 (getelementptr %120 (array-offset %121 4)))
    (store %130 %131 (bitvector 32) #:align 4)
    (set! %132 (load %41 (bitvector 32) #:align 4))
    (set! %133 (load %26 pointer #:align 4))
    (set! %134 (add %132 (bv #x00000001 32)))
    (store %134 %41 (bitvector 32) #:align 4)
    (set! %135 (icmp/eq %133 nullptr))
    (br %135 %136 %140))

; %136
  (define-label (%136) #:merge #f
    (set! %137 (phi [%124 %123] [%41 %127]))
    (set! %138 (phi [%126 %123] [%134 %127]))
    (set! %139 (add %138 (bv #x00000001 32)))
    (store %139 %137 (bitvector 32) #:align 4)
    (br %154))

; %140
  (define-label (%140) #:merge #f
    (set! %141 (shl %4 (bv #x00000014 32)))
    (set! %142 (add %141 (bv #xfdc00000 32)))
    (set! %143 (or %142 (bv #x00012b83 32)))
    (set! %144 (getelementptr %133 (array-offset %134 4)))
    (store %143 %144 (bitvector 32) #:align 4)
    (set! %145 (load %41 (bitvector 32) #:align 4))
    (set! %146 (load %26 pointer #:align 4))
    (set! %147 (add %145 (bv #x00000001 32)))
    (store %147 %41 (bitvector 32) #:align 4)
    (set! %148 (icmp/eq %146 nullptr))
    (br %148 %154 %149))

; %149
  (define-label (%149) #:merge #f
    (set! %150 (or %141 (bv #x00010113 32)))
    (set! %151 (getelementptr %146 (array-offset %147 4)))
    (store %150 %151 (bitvector 32) #:align 4)
    (set! %152 (load %41 (bitvector 32) #:align 4))
    (set! %153 (load %26 pointer #:align 4))
    (br %154))

; %154
  (define-label (%154) #:merge #f
    (set! %155 (phi [%41 %140] [%41 %149] [%137 %136]))
    (set! %156 (phi [#(struct:nullptr) %140] [%153 %149] [#(struct:nullptr) %136]))
    (set! %157 (phi [%147 %140] [%152 %149] [%139 %136]))
    (set! %158 (add %157 (bv #x00000001 32)))
    (store %158 %155 (bitvector 32) #:align 4)
    (set! %159 (icmp/eq %156 nullptr))
    (br %0 %160 %163))

; %160
  (define-label (%160) #:merge #f
    (br %159 %166 %161))

; %161
  (define-label (%161) #:merge #f
    (set! %162 (getelementptr %156 (array-offset %158 4)))
    (store (bv #x00428067 32) %162 (bitvector 32) #:align 4)
    (br %166))

; %163
  (define-label (%163) #:merge #f
    (br %159 %166 %164))

; %164
  (define-label (%164) #:merge #f
    (set! %165 (getelementptr %156 (array-offset %158 4)))
    (store (bv #x00008067 32) %165 (bitvector 32) #:align 4)
    (br %166))

; %166
  (define-label (%166) #:merge #f
    (set! %167 (load %155 (bitvector 32) #:align 4))
    (set! %168 (add %167 (bv #x00000001 32)))
    (store %168 %155 (bitvector 32) #:align 4)
    (ret))

  (define-value %3)
  (define-value %4)
  (define-value %6)
  (define-value %7)
  (define-value %8)
  (define-value %9)
  (define-value %10)
  (define-value %12)
  (define-value %14)
  (define-value %15)
  (define-value %16)
  (define-value %17)
  (define-value %18)
  (define-value %20)
  (define-value %21)
  (define-value %23)
  (define-value %24)
  (define-value %26)
  (define-value %27)
  (define-value %28)
  (define-value %30)
  (define-value %31)
  (define-value %32)
  (define-value %34)
  (define-value %35)
  (define-value %36)
  (define-value %37)
  (define-value %38)
  (define-value %39)
  (define-value %40)
  (define-value %41)
  (define-value %42)
  (define-value %43)
  (define-value %44)
  (define-value %46)
  (define-value %47)
  (define-value %48)
  (define-value %50)
  (define-value %51)
  (define-value %52)
  (define-value %53)
  (define-value %54)
  (define-value %55)
  (define-value %56)
  (define-value %57)
  (define-value %59)
  (define-value %60)
  (define-value %61)
  (define-value %63)
  (define-value %64)
  (define-value %65)
  (define-value %66)
  (define-value %67)
  (define-value %68)
  (define-value %69)
  (define-value %70)
  (define-value %72)
  (define-value %73)
  (define-value %74)
  (define-value %76)
  (define-value %77)
  (define-value %78)
  (define-value %79)
  (define-value %80)
  (define-value %81)
  (define-value %82)
  (define-value %83)
  (define-value %85)
  (define-value %86)
  (define-value %87)
  (define-value %89)
  (define-value %90)
  (define-value %91)
  (define-value %92)
  (define-value %93)
  (define-value %94)
  (define-value %95)
  (define-value %96)
  (define-value %98)
  (define-value %99)
  (define-value %100)
  (define-value %102)
  (define-value %103)
  (define-value %104)
  (define-value %105)
  (define-value %106)
  (define-value %107)
  (define-value %108)
  (define-value %109)
  (define-value %111)
  (define-value %112)
  (define-value %113)
  (define-value %115)
  (define-value %116)
  (define-value %117)
  (define-value %118)
  (define-value %119)
  (define-value %120)
  (define-value %121)
  (define-value %122)
  (define-value %124)
  (define-value %125)
  (define-value %126)
  (define-value %128)
  (define-value %129)
  (define-value %130)
  (define-value %131)
  (define-value %132)
  (define-value %133)
  (define-value %134)
  (define-value %135)
  (define-value %137)
  (define-value %138)
  (define-value %139)
  (define-value %141)
  (define-value %142)
  (define-value %143)
  (define-value %144)
  (define-value %145)
  (define-value %146)
  (define-value %147)
  (define-value %148)
  (define-value %150)
  (define-value %151)
  (define-value %152)
  (define-value %153)
  (define-value %155)
  (define-value %156)
  (define-value %157)
  (define-value %158)
  (define-value %159)
  (define-value %162)
  (define-value %165)
  (define-value %167)
  (define-value %168)
  (enter! %2))

(define (@bpf_put_reg32 %0 %1 %2)
; %3
  (define-label (%3) #:merge #f
    (set! %4 (getelementptr %0 (array-offset (bv #x00000001 32) 1)))
    (set! %5 (load %4 (bitvector 8) #:align 1))
    (set! %6 (icmp/slt %5 (bv #x00 8)))
    (br %6 %7 %59))

; %7
  (define-label (%7) #:merge #f
    (set! %8 (sext %5 (bitvector 16)))
    (set! %9 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %10 (load %9 pointer #:align 4))
    (set! %11 (icmp/eq %10 nullptr))
    (br %11 %29 %12))

; %12
  (define-label (%12) #:merge #f
    (set! %13 (lshr %8 (bv #x0005 16)))
    (set! %14 (zext %13 (bitvector 32)))
    (set! %15 (shl %14 (bv #x00000019 32)))
    (set! %16 (getelementptr %1 (array-offset (bv #x00000001 32) 1)))
    (set! %17 (load %16 (bitvector 8) #:align 1))
    (set! %18 (zext %17 (bitvector 32)))
    (set! %19 (shl %18 (bv #x00000014 32)))
    (set! %20 (shl %8 (bv #x0007 16)))
    (set! %21 (and %20 (bv #x0f80 16)))
    (set! %22 (zext %21 (bitvector 32)))
    (set! %23 (or %15 %22))
    (set! %24 (or %23 %19))
    (set! %25 (or %24 (bv #x00042023 32)))
    (set! %26 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %27 (load %26 (bitvector 32) #:align 4))
    (set! %28 (getelementptr %10 (array-offset %27 4)))
    (store %25 %28 (bitvector 32) #:align 4)
    (br %29))

; %29
  (define-label (%29) #:merge #f
    (set! %30 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %31 (load %30 (bitvector 32) #:align 4))
    (set! %32 (add %31 (bv #x00000001 32)))
    (store %32 %30 (bitvector 32) #:align 4)
    (set! %33 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 0)))
    (set! %34 (load %33 pointer #:align 4))
    (set! %35 (getelementptr %34 (array-offset (bv #x00000000 32) 40) (struct-offset 28)))
    (set! %36 (load %35 pointer #:align 4))
    (set! %37 (getelementptr %36 (array-offset (bv #x00000000 32) 384) (struct-offset 56)))
    (set! %38 (load %37 (bitvector 8) #:align 8))
    (set! %39 (icmp/eq %38 (bv #x00 8)))
    (br %39 %40 %83))

; %40
  (define-label (%40) #:merge #f
    (set! %41 (load %0 (bitvector 8) #:align 1))
    (set! %42 (sext %41 (bitvector 16)))
    (set! %43 (load %9 pointer #:align 4))
    (set! %44 (icmp/eq %43 nullptr))
    (br %44 %56 %45))

; %45
  (define-label (%45) #:merge #f
    (set! %46 (lshr %42 (bv #x0005 16)))
    (set! %47 (zext %46 (bitvector 32)))
    (set! %48 (shl %47 (bv #x00000019 32)))
    (set! %49 (shl %42 (bv #x0007 16)))
    (set! %50 (and %49 (bv #x0f80 16)))
    (set! %51 (zext %50 (bitvector 32)))
    (set! %52 (or %48 %51))
    (set! %53 (or %52 (bv #x00042023 32)))
    (set! %54 (getelementptr %43 (array-offset %32 4)))
    (store %53 %54 (bitvector 32) #:align 4)
    (set! %55 (load %30 (bitvector 32) #:align 4))
    (br %56))

; %56
  (define-label (%56) #:merge #f
    (set! %57 (phi [%32 %40] [%55 %45]))
    (set! %58 (add %57 (bv #x00000001 32)))
    (store %58 %30 (bitvector 32) #:align 4)
    (br %83))

; %59
  (define-label (%59) #:merge #f
    (set! %60 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 0)))
    (set! %61 (load %60 pointer #:align 4))
    (set! %62 (getelementptr %61 (array-offset (bv #x00000000 32) 40) (struct-offset 28)))
    (set! %63 (load %62 pointer #:align 4))
    (set! %64 (getelementptr %63 (array-offset (bv #x00000000 32) 384) (struct-offset 56)))
    (set! %65 (load %64 (bitvector 8) #:align 8))
    (set! %66 (icmp/eq %65 (bv #x00 8)))
    (br %66 %67 %83))

; %67
  (define-label (%67) #:merge #f
    (set! %68 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %69 (load %68 pointer #:align 4))
    (set! %70 (icmp/eq %69 nullptr))
    (br %70 %79 %71))

; %71
  (define-label (%71) #:merge #f
    (set! %72 (load %0 (bitvector 8) #:align 1))
    (set! %73 (zext %72 (bitvector 32)))
    (set! %74 (shl %73 (bv #x00000007 32)))
    (set! %75 (or %74 (bv #x00000013 32)))
    (set! %76 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %77 (load %76 (bitvector 32) #:align 4))
    (set! %78 (getelementptr %69 (array-offset %77 4)))
    (store %75 %78 (bitvector 32) #:align 4)
    (br %79))

; %79
  (define-label (%79) #:merge #f
    (set! %80 (getelementptr %2 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %81 (load %80 (bitvector 32) #:align 4))
    (set! %82 (add %81 (bv #x00000001 32)))
    (store %82 %80 (bitvector 32) #:align 4)
    (br %83))

; %83
  (define-label (%83) #:merge #f
    (ret))

  (define-value %4)
  (define-value %5)
  (define-value %6)
  (define-value %8)
  (define-value %9)
  (define-value %10)
  (define-value %11)
  (define-value %13)
  (define-value %14)
  (define-value %15)
  (define-value %16)
  (define-value %17)
  (define-value %18)
  (define-value %19)
  (define-value %20)
  (define-value %21)
  (define-value %22)
  (define-value %23)
  (define-value %24)
  (define-value %25)
  (define-value %26)
  (define-value %27)
  (define-value %28)
  (define-value %30)
  (define-value %31)
  (define-value %32)
  (define-value %33)
  (define-value %34)
  (define-value %35)
  (define-value %36)
  (define-value %37)
  (define-value %38)
  (define-value %39)
  (define-value %41)
  (define-value %42)
  (define-value %43)
  (define-value %44)
  (define-value %46)
  (define-value %47)
  (define-value %48)
  (define-value %49)
  (define-value %50)
  (define-value %51)
  (define-value %52)
  (define-value %53)
  (define-value %54)
  (define-value %55)
  (define-value %57)
  (define-value %58)
  (define-value %60)
  (define-value %61)
  (define-value %62)
  (define-value %63)
  (define-value %64)
  (define-value %65)
  (define-value %66)
  (define-value %68)
  (define-value %69)
  (define-value %70)
  (define-value %72)
  (define-value %73)
  (define-value %74)
  (define-value %75)
  (define-value %76)
  (define-value %77)
  (define-value %78)
  (define-value %80)
  (define-value %81)
  (define-value %82)
  (enter! %3))

(define (@emit_bcc %0 %1 %2 %3 %4)
; %5
  (define-label (%5) #:merge #f
    (set! %6 (getelementptr %4 (array-offset (bv #x00000000 32) 28) (struct-offset 8)))
    (set! %7 (load %6 (bitvector 32) #:align 4))
    (set! %8 (icmp/eq %0 (bv #x40 8)))
    (br %8 %31 %9))

; %9
  (define-label (%9) #:merge #f
    (set! %10 (add %3 (bv #x00001000 32)))
    (set! %11 (icmp/ult %10 (bv #x00002000 32)))
    (br %11 %28 %12))

; %12
  (define-label (%12) #:merge #f
    (set! %13 (zext %0 (bitvector 32)))
    (set! %14 (add %13 (bv #xfffffff0 32)))
    (set! %15 (lshr %14 (bv #x00000004 32)))
    (set! %16 (shl %14 (bv #x0000001c 32)))
    (set! %17 (or %15 %16))
    (switch %17 %27 [(bv #x00000000 32) %31] [(bv #x00000001 32) %18] [(bv #x00000009 32) %19] [(bv #x00000002 32) %20] [(bv #x0000000a 32) %21] [(bv #x00000004 32) %22] [(bv #x00000005 32) %23] [(bv #x0000000b 32) %24] [(bv #x00000006 32) %25] [(bv #x0000000c 32) %26]))

; %18
  (define-label (%18) #:merge #f
    (br %31))

; %19
  (define-label (%19) #:merge #f
    (br %31))

; %20
  (define-label (%20) #:merge #f
    (br %31))

; %21
  (define-label (%21) #:merge #f
    (br %31))

; %22
  (define-label (%22) #:merge #f
    (br %31))

; %23
  (define-label (%23) #:merge #f
    (br %31))

; %24
  (define-label (%24) #:merge #f
    (br %31))

; %25
  (define-label (%25) #:merge #f
    (br %31))

; %26
  (define-label (%26) #:merge #f
    (br %31))

; %27
  (define-label (%27) #:merge #f
    (br %31))

; %28
  (define-label (%28) #:merge #f
    (set! %29 (lshr %3 (bv #x00000001 32)))
    (set! %30 (and %29 (bv #x0000ffff 32)))
    (br %31))

; %31
  (define-label (%31) #:merge #f
    (set! %32 (phi [%0 %28] [(bv #x40 8) %5] [(bv #xff 8) %27] [(bv #x60 8) %26] [(bv #xc0 8) %25] [(bv #x70 8) %24] [(bv #xd0 8) %23] [(bv #x10 8) %22] [(bv #x20 8) %21] [(bv #xa0 8) %20] [(bv #x30 8) %19] [(bv #xb0 8) %18] [(bv #x50 8) %12]))
    (set! %33 (phi [(bv #b0 1) %28] [(bv #b1 1) %5] [(bv #b1 1) %27] [(bv #b1 1) %26] [(bv #b1 1) %25] [(bv #b1 1) %24] [(bv #b1 1) %23] [(bv #b1 1) %22] [(bv #b1 1) %21] [(bv #b1 1) %20] [(bv #b1 1) %19] [(bv #b1 1) %18] [(bv #b1 1) %12]))
    (set! %34 (phi [%30 %28] [(bv #x00000006 32) %5] [(bv #x00000006 32) %27] [(bv #x00000006 32) %26] [(bv #x00000006 32) %25] [(bv #x00000006 32) %24] [(bv #x00000006 32) %23] [(bv #x00000006 32) %22] [(bv #x00000006 32) %21] [(bv #x00000006 32) %20] [(bv #x00000006 32) %19] [(bv #x00000006 32) %18] [(bv #x00000006 32) %12]))
    (set! %35 (zext %32 (bitvector 32)))
    (set! %36 (add %35 (bv #xfffffff0 32)))
    (set! %37 (lshr %36 (bv #x00000004 32)))
    (set! %38 (shl %36 (bv #x0000001c 32)))
    (set! %39 (or %37 %38))
    (switch %39 %380 [(bv #x00000000 32) %40] [(bv #x00000001 32) %70] [(bv #x00000009 32) %100] [(bv #x00000002 32) %130] [(bv #x0000000a 32) %160] [(bv #x00000004 32) %190] [(bv #x00000005 32) %220] [(bv #x0000000b 32) %250] [(bv #x00000006 32) %280] [(bv #x0000000c 32) %310] [(bv #x00000003 32) %340]))

; %40
  (define-label (%40) #:merge #f
    (set! %41 (getelementptr %4 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %42 (load %41 pointer #:align 4))
    (set! %43 (icmp/eq %42 nullptr))
    (br %43 %67 %44))

; %44
  (define-label (%44) #:merge #f
    (set! %45 (zext %1 (bitvector 32)))
    (set! %46 (shl %45 (bv #x0000000f 32)))
    (set! %47 (zext %2 (bitvector 32)))
    (set! %48 (shl %47 (bv #x00000014 32)))
    (set! %49 (lshr %34 (bv #x00000005 32)))
    (set! %50 (and %49 (bv #x00000040 32)))
    (set! %51 (lshr %34 (bv #x00000004 32)))
    (set! %52 (and %51 (bv #x0000003f 32)))
    (set! %53 (or %50 %52))
    (set! %54 (shl %53 (bv #x00000019 32)))
    (set! %55 (shl %34 (bv #x00000001 32)))
    (set! %56 (and %55 (bv #x0000001e 32)))
    (set! %57 (lshr %34 (bv #x0000000a 32)))
    (set! %58 (and %57 (bv #x00000001 32)))
    (set! %59 (or %56 %58))
    (set! %60 (shl %59 (bv #x00000007 32)))
    (set! %61 (or %46 %48))
    (set! %62 (or %61 %54))
    (set! %63 (or %62 %60))
    (set! %64 (or %63 (bv #x00000063 32)))
    (set! %65 (getelementptr %42 (array-offset %7 4)))
    (store %64 %65 (bitvector 32) #:align 4)
    (set! %66 (load %6 (bitvector 32) #:align 4))
    (br %67))

; %67
  (define-label (%67) #:merge #f
    (set! %68 (phi [%7 %40] [%66 %44]))
    (set! %69 (add %68 (bv #x00000001 32)))
    (br %378))

; %70
  (define-label (%70) #:merge #f
    (set! %71 (getelementptr %4 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %72 (load %71 pointer #:align 4))
    (set! %73 (icmp/eq %72 nullptr))
    (br %73 %97 %74))

; %74
  (define-label (%74) #:merge #f
    (set! %75 (zext %1 (bitvector 32)))
    (set! %76 (shl %75 (bv #x00000014 32)))
    (set! %77 (zext %2 (bitvector 32)))
    (set! %78 (shl %77 (bv #x0000000f 32)))
    (set! %79 (lshr %34 (bv #x00000005 32)))
    (set! %80 (and %79 (bv #x00000040 32)))
    (set! %81 (lshr %34 (bv #x00000004 32)))
    (set! %82 (and %81 (bv #x0000003f 32)))
    (set! %83 (or %80 %82))
    (set! %84 (shl %83 (bv #x00000019 32)))
    (set! %85 (shl %34 (bv #x00000001 32)))
    (set! %86 (and %85 (bv #x0000001e 32)))
    (set! %87 (lshr %34 (bv #x0000000a 32)))
    (set! %88 (and %87 (bv #x00000001 32)))
    (set! %89 (or %86 %88))
    (set! %90 (shl %89 (bv #x00000007 32)))
    (set! %91 (or %76 %78))
    (set! %92 (or %91 %84))
    (set! %93 (or %92 %90))
    (set! %94 (or %93 (bv #x00006063 32)))
    (set! %95 (getelementptr %72 (array-offset %7 4)))
    (store %94 %95 (bitvector 32) #:align 4)
    (set! %96 (load %6 (bitvector 32) #:align 4))
    (br %97))

; %97
  (define-label (%97) #:merge #f
    (set! %98 (phi [%7 %70] [%96 %74]))
    (set! %99 (add %98 (bv #x00000001 32)))
    (br %378))

; %100
  (define-label (%100) #:merge #f
    (set! %101 (getelementptr %4 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %102 (load %101 pointer #:align 4))
    (set! %103 (icmp/eq %102 nullptr))
    (br %103 %127 %104))

; %104
  (define-label (%104) #:merge #f
    (set! %105 (zext %1 (bitvector 32)))
    (set! %106 (shl %105 (bv #x0000000f 32)))
    (set! %107 (zext %2 (bitvector 32)))
    (set! %108 (shl %107 (bv #x00000014 32)))
    (set! %109 (lshr %34 (bv #x00000005 32)))
    (set! %110 (and %109 (bv #x00000040 32)))
    (set! %111 (lshr %34 (bv #x00000004 32)))
    (set! %112 (and %111 (bv #x0000003f 32)))
    (set! %113 (or %110 %112))
    (set! %114 (shl %113 (bv #x00000019 32)))
    (set! %115 (shl %34 (bv #x00000001 32)))
    (set! %116 (and %115 (bv #x0000001e 32)))
    (set! %117 (lshr %34 (bv #x0000000a 32)))
    (set! %118 (and %117 (bv #x00000001 32)))
    (set! %119 (or %116 %118))
    (set! %120 (shl %119 (bv #x00000007 32)))
    (set! %121 (or %106 %108))
    (set! %122 (or %121 %114))
    (set! %123 (or %122 %120))
    (set! %124 (or %123 (bv #x00006063 32)))
    (set! %125 (getelementptr %102 (array-offset %7 4)))
    (store %124 %125 (bitvector 32) #:align 4)
    (set! %126 (load %6 (bitvector 32) #:align 4))
    (br %127))

; %127
  (define-label (%127) #:merge #f
    (set! %128 (phi [%7 %100] [%126 %104]))
    (set! %129 (add %128 (bv #x00000001 32)))
    (br %378))

; %130
  (define-label (%130) #:merge #f
    (set! %131 (getelementptr %4 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %132 (load %131 pointer #:align 4))
    (set! %133 (icmp/eq %132 nullptr))
    (br %133 %157 %134))

; %134
  (define-label (%134) #:merge #f
    (set! %135 (zext %1 (bitvector 32)))
    (set! %136 (shl %135 (bv #x0000000f 32)))
    (set! %137 (zext %2 (bitvector 32)))
    (set! %138 (shl %137 (bv #x00000014 32)))
    (set! %139 (lshr %34 (bv #x00000005 32)))
    (set! %140 (and %139 (bv #x00000040 32)))
    (set! %141 (lshr %34 (bv #x00000004 32)))
    (set! %142 (and %141 (bv #x0000003f 32)))
    (set! %143 (or %140 %142))
    (set! %144 (shl %143 (bv #x00000019 32)))
    (set! %145 (shl %34 (bv #x00000001 32)))
    (set! %146 (and %145 (bv #x0000001e 32)))
    (set! %147 (lshr %34 (bv #x0000000a 32)))
    (set! %148 (and %147 (bv #x00000001 32)))
    (set! %149 (or %146 %148))
    (set! %150 (shl %149 (bv #x00000007 32)))
    (set! %151 (or %136 %138))
    (set! %152 (or %151 %144))
    (set! %153 (or %152 %150))
    (set! %154 (or %153 (bv #x00007063 32)))
    (set! %155 (getelementptr %132 (array-offset %7 4)))
    (store %154 %155 (bitvector 32) #:align 4)
    (set! %156 (load %6 (bitvector 32) #:align 4))
    (br %157))

; %157
  (define-label (%157) #:merge #f
    (set! %158 (phi [%7 %130] [%156 %134]))
    (set! %159 (add %158 (bv #x00000001 32)))
    (br %378))

; %160
  (define-label (%160) #:merge #f
    (set! %161 (getelementptr %4 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %162 (load %161 pointer #:align 4))
    (set! %163 (icmp/eq %162 nullptr))
    (br %163 %187 %164))

; %164
  (define-label (%164) #:merge #f
    (set! %165 (zext %1 (bitvector 32)))
    (set! %166 (shl %165 (bv #x00000014 32)))
    (set! %167 (zext %2 (bitvector 32)))
    (set! %168 (shl %167 (bv #x0000000f 32)))
    (set! %169 (lshr %34 (bv #x00000005 32)))
    (set! %170 (and %169 (bv #x00000040 32)))
    (set! %171 (lshr %34 (bv #x00000004 32)))
    (set! %172 (and %171 (bv #x0000003f 32)))
    (set! %173 (or %170 %172))
    (set! %174 (shl %173 (bv #x00000019 32)))
    (set! %175 (shl %34 (bv #x00000001 32)))
    (set! %176 (and %175 (bv #x0000001e 32)))
    (set! %177 (lshr %34 (bv #x0000000a 32)))
    (set! %178 (and %177 (bv #x00000001 32)))
    (set! %179 (or %176 %178))
    (set! %180 (shl %179 (bv #x00000007 32)))
    (set! %181 (or %166 %168))
    (set! %182 (or %181 %174))
    (set! %183 (or %182 %180))
    (set! %184 (or %183 (bv #x00007063 32)))
    (set! %185 (getelementptr %162 (array-offset %7 4)))
    (store %184 %185 (bitvector 32) #:align 4)
    (set! %186 (load %6 (bitvector 32) #:align 4))
    (br %187))

; %187
  (define-label (%187) #:merge #f
    (set! %188 (phi [%7 %160] [%186 %164]))
    (set! %189 (add %188 (bv #x00000001 32)))
    (br %378))

; %190
  (define-label (%190) #:merge #f
    (set! %191 (getelementptr %4 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %192 (load %191 pointer #:align 4))
    (set! %193 (icmp/eq %192 nullptr))
    (br %193 %217 %194))

; %194
  (define-label (%194) #:merge #f
    (set! %195 (zext %1 (bitvector 32)))
    (set! %196 (shl %195 (bv #x0000000f 32)))
    (set! %197 (zext %2 (bitvector 32)))
    (set! %198 (shl %197 (bv #x00000014 32)))
    (set! %199 (lshr %34 (bv #x00000005 32)))
    (set! %200 (and %199 (bv #x00000040 32)))
    (set! %201 (lshr %34 (bv #x00000004 32)))
    (set! %202 (and %201 (bv #x0000003f 32)))
    (set! %203 (or %200 %202))
    (set! %204 (shl %203 (bv #x00000019 32)))
    (set! %205 (shl %34 (bv #x00000001 32)))
    (set! %206 (and %205 (bv #x0000001e 32)))
    (set! %207 (lshr %34 (bv #x0000000a 32)))
    (set! %208 (and %207 (bv #x00000001 32)))
    (set! %209 (or %206 %208))
    (set! %210 (shl %209 (bv #x00000007 32)))
    (set! %211 (or %196 %198))
    (set! %212 (or %211 %204))
    (set! %213 (or %212 %210))
    (set! %214 (or %213 (bv #x00001063 32)))
    (set! %215 (getelementptr %192 (array-offset %7 4)))
    (store %214 %215 (bitvector 32) #:align 4)
    (set! %216 (load %6 (bitvector 32) #:align 4))
    (br %217))

; %217
  (define-label (%217) #:merge #f
    (set! %218 (phi [%7 %190] [%216 %194]))
    (set! %219 (add %218 (bv #x00000001 32)))
    (br %378))

; %220
  (define-label (%220) #:merge #f
    (set! %221 (getelementptr %4 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %222 (load %221 pointer #:align 4))
    (set! %223 (icmp/eq %222 nullptr))
    (br %223 %247 %224))

; %224
  (define-label (%224) #:merge #f
    (set! %225 (zext %1 (bitvector 32)))
    (set! %226 (shl %225 (bv #x00000014 32)))
    (set! %227 (zext %2 (bitvector 32)))
    (set! %228 (shl %227 (bv #x0000000f 32)))
    (set! %229 (lshr %34 (bv #x00000005 32)))
    (set! %230 (and %229 (bv #x00000040 32)))
    (set! %231 (lshr %34 (bv #x00000004 32)))
    (set! %232 (and %231 (bv #x0000003f 32)))
    (set! %233 (or %230 %232))
    (set! %234 (shl %233 (bv #x00000019 32)))
    (set! %235 (shl %34 (bv #x00000001 32)))
    (set! %236 (and %235 (bv #x0000001e 32)))
    (set! %237 (lshr %34 (bv #x0000000a 32)))
    (set! %238 (and %237 (bv #x00000001 32)))
    (set! %239 (or %236 %238))
    (set! %240 (shl %239 (bv #x00000007 32)))
    (set! %241 (or %226 %228))
    (set! %242 (or %241 %234))
    (set! %243 (or %242 %240))
    (set! %244 (or %243 (bv #x00004063 32)))
    (set! %245 (getelementptr %222 (array-offset %7 4)))
    (store %244 %245 (bitvector 32) #:align 4)
    (set! %246 (load %6 (bitvector 32) #:align 4))
    (br %247))

; %247
  (define-label (%247) #:merge #f
    (set! %248 (phi [%7 %220] [%246 %224]))
    (set! %249 (add %248 (bv #x00000001 32)))
    (br %378))

; %250
  (define-label (%250) #:merge #f
    (set! %251 (getelementptr %4 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %252 (load %251 pointer #:align 4))
    (set! %253 (icmp/eq %252 nullptr))
    (br %253 %277 %254))

; %254
  (define-label (%254) #:merge #f
    (set! %255 (zext %1 (bitvector 32)))
    (set! %256 (shl %255 (bv #x0000000f 32)))
    (set! %257 (zext %2 (bitvector 32)))
    (set! %258 (shl %257 (bv #x00000014 32)))
    (set! %259 (lshr %34 (bv #x00000005 32)))
    (set! %260 (and %259 (bv #x00000040 32)))
    (set! %261 (lshr %34 (bv #x00000004 32)))
    (set! %262 (and %261 (bv #x0000003f 32)))
    (set! %263 (or %260 %262))
    (set! %264 (shl %263 (bv #x00000019 32)))
    (set! %265 (shl %34 (bv #x00000001 32)))
    (set! %266 (and %265 (bv #x0000001e 32)))
    (set! %267 (lshr %34 (bv #x0000000a 32)))
    (set! %268 (and %267 (bv #x00000001 32)))
    (set! %269 (or %266 %268))
    (set! %270 (shl %269 (bv #x00000007 32)))
    (set! %271 (or %256 %258))
    (set! %272 (or %271 %264))
    (set! %273 (or %272 %270))
    (set! %274 (or %273 (bv #x00004063 32)))
    (set! %275 (getelementptr %252 (array-offset %7 4)))
    (store %274 %275 (bitvector 32) #:align 4)
    (set! %276 (load %6 (bitvector 32) #:align 4))
    (br %277))

; %277
  (define-label (%277) #:merge #f
    (set! %278 (phi [%7 %250] [%276 %254]))
    (set! %279 (add %278 (bv #x00000001 32)))
    (br %378))

; %280
  (define-label (%280) #:merge #f
    (set! %281 (getelementptr %4 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %282 (load %281 pointer #:align 4))
    (set! %283 (icmp/eq %282 nullptr))
    (br %283 %307 %284))

; %284
  (define-label (%284) #:merge #f
    (set! %285 (zext %1 (bitvector 32)))
    (set! %286 (shl %285 (bv #x0000000f 32)))
    (set! %287 (zext %2 (bitvector 32)))
    (set! %288 (shl %287 (bv #x00000014 32)))
    (set! %289 (lshr %34 (bv #x00000005 32)))
    (set! %290 (and %289 (bv #x00000040 32)))
    (set! %291 (lshr %34 (bv #x00000004 32)))
    (set! %292 (and %291 (bv #x0000003f 32)))
    (set! %293 (or %290 %292))
    (set! %294 (shl %293 (bv #x00000019 32)))
    (set! %295 (shl %34 (bv #x00000001 32)))
    (set! %296 (and %295 (bv #x0000001e 32)))
    (set! %297 (lshr %34 (bv #x0000000a 32)))
    (set! %298 (and %297 (bv #x00000001 32)))
    (set! %299 (or %296 %298))
    (set! %300 (shl %299 (bv #x00000007 32)))
    (set! %301 (or %286 %288))
    (set! %302 (or %301 %294))
    (set! %303 (or %302 %300))
    (set! %304 (or %303 (bv #x00005063 32)))
    (set! %305 (getelementptr %282 (array-offset %7 4)))
    (store %304 %305 (bitvector 32) #:align 4)
    (set! %306 (load %6 (bitvector 32) #:align 4))
    (br %307))

; %307
  (define-label (%307) #:merge #f
    (set! %308 (phi [%7 %280] [%306 %284]))
    (set! %309 (add %308 (bv #x00000001 32)))
    (br %378))

; %310
  (define-label (%310) #:merge #f
    (set! %311 (getelementptr %4 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %312 (load %311 pointer #:align 4))
    (set! %313 (icmp/eq %312 nullptr))
    (br %313 %337 %314))

; %314
  (define-label (%314) #:merge #f
    (set! %315 (zext %1 (bitvector 32)))
    (set! %316 (shl %315 (bv #x00000014 32)))
    (set! %317 (zext %2 (bitvector 32)))
    (set! %318 (shl %317 (bv #x0000000f 32)))
    (set! %319 (lshr %34 (bv #x00000005 32)))
    (set! %320 (and %319 (bv #x00000040 32)))
    (set! %321 (lshr %34 (bv #x00000004 32)))
    (set! %322 (and %321 (bv #x0000003f 32)))
    (set! %323 (or %320 %322))
    (set! %324 (shl %323 (bv #x00000019 32)))
    (set! %325 (shl %34 (bv #x00000001 32)))
    (set! %326 (and %325 (bv #x0000001e 32)))
    (set! %327 (lshr %34 (bv #x0000000a 32)))
    (set! %328 (and %327 (bv #x00000001 32)))
    (set! %329 (or %326 %328))
    (set! %330 (shl %329 (bv #x00000007 32)))
    (set! %331 (or %316 %318))
    (set! %332 (or %331 %324))
    (set! %333 (or %332 %330))
    (set! %334 (or %333 (bv #x00005063 32)))
    (set! %335 (getelementptr %312 (array-offset %7 4)))
    (store %334 %335 (bitvector 32) #:align 4)
    (set! %336 (load %6 (bitvector 32) #:align 4))
    (br %337))

; %337
  (define-label (%337) #:merge #f
    (set! %338 (phi [%7 %310] [%336 %314]))
    (set! %339 (add %338 (bv #x00000001 32)))
    (br %378))

; %340
  (define-label (%340) #:merge #f
    (set! %341 (getelementptr %4 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %342 (load %341 pointer #:align 4))
    (set! %343 (icmp/eq %342 nullptr))
    (br %343 %344 %346))

; %344
  (define-label (%344) #:merge #f
    (set! %345 (add %7 (bv #x00000001 32)))
    (store %345 %6 (bitvector 32) #:align 4)
    (br %375))

; %346
  (define-label (%346) #:merge #f
    (set! %347 (zext %1 (bitvector 32)))
    (set! %348 (shl %347 (bv #x0000000f 32)))
    (set! %349 (zext %2 (bitvector 32)))
    (set! %350 (shl %349 (bv #x00000014 32)))
    (set! %351 (or %348 %350))
    (set! %352 (or %351 (bv #x000072b3 32)))
    (set! %353 (getelementptr %342 (array-offset %7 4)))
    (store %352 %353 (bitvector 32) #:align 4)
    (set! %354 (load %6 (bitvector 32) #:align 4))
    (set! %355 (load %341 pointer #:align 4))
    (set! %356 (add %354 (bv #x00000001 32)))
    (store %356 %6 (bitvector 32) #:align 4)
    (set! %357 (icmp/eq %355 nullptr))
    (br %357 %375 %358))

; %358
  (define-label (%358) #:merge #f
    (set! %359 (lshr %34 (bv #x00000005 32)))
    (set! %360 (and %359 (bv #x00000040 32)))
    (set! %361 (lshr %34 (bv #x00000004 32)))
    (set! %362 (and %361 (bv #x0000003f 32)))
    (set! %363 (or %360 %362))
    (set! %364 (shl %363 (bv #x00000019 32)))
    (set! %365 (shl %34 (bv #x00000001 32)))
    (set! %366 (and %365 (bv #x0000001e 32)))
    (set! %367 (lshr %34 (bv #x0000000a 32)))
    (set! %368 (and %367 (bv #x00000001 32)))
    (set! %369 (or %366 %368))
    (set! %370 (shl %369 (bv #x00000007 32)))
    (set! %371 (or %370 %364))
    (set! %372 (or %371 (bv #x00028063 32)))
    (set! %373 (getelementptr %355 (array-offset %356 4)))
    (store %372 %373 (bitvector 32) #:align 4)
    (set! %374 (load %6 (bitvector 32) #:align 4))
    (br %375))

; %375
  (define-label (%375) #:merge #f
    (set! %376 (phi [%356 %346] [%374 %358] [%345 %344]))
    (set! %377 (add %376 (bv #x00000001 32)))
    (br %378))

; %378
  (define-label (%378) #:merge #f
    (set! %379 (phi [%377 %375] [%339 %337] [%309 %307] [%279 %277] [%249 %247] [%219 %217] [%189 %187] [%159 %157] [%129 %127] [%99 %97] [%69 %67]))
    (store %379 %6 (bitvector 32) #:align 4)
    (br %380))

; %380
  (define-label (%380) #:merge #f
    (set! %381 (phi [%7 %31] [%379 %378]))
    (br %33 %382 %408))

; %382
  (define-label (%382) #:merge #f
    (set! %383 (sub %381 %7))
    (set! %384 (shl %383 (bv #x00000002 32)))
    (set! %385 (sub %3 %384))
    (set! %386 (getelementptr %4 (array-offset (bv #x00000000 32) 28) (struct-offset 4)))
    (set! %387 (load %386 pointer #:align 4))
    (set! %388 (icmp/eq %387 nullptr))
    (br %388 %389 %391))

; %389
  (define-label (%389) #:merge #f
    (set! %390 (add %381 (bv #x00000001 32)))
    (store %390 %6 (bitvector 32) #:align 4)
    (br %405))

; %391
  (define-label (%391) #:merge #f
    (set! %392 (add %385 (bv #x00000800 32)))
    (set! %393 (and %392 (bv #xfffff000 32)))
    (set! %394 (or %393 (bv #x00000317 32)))
    (set! %395 (getelementptr %387 (array-offset %381 4)))
    (store %394 %395 (bitvector 32) #:align 4)
    (set! %396 (load %386 pointer #:align 4))
    (set! %397 (load %6 (bitvector 32) #:align 4))
    (set! %398 (add %397 (bv #x00000001 32)))
    (store %398 %6 (bitvector 32) #:align 4)
    (set! %399 (icmp/eq %396 nullptr))
    (br %399 %405 %400))

; %400
  (define-label (%400) #:merge #f
    (set! %401 (shl %385 (bv #x00000014 32)))
    (set! %402 (or %401 (bv #x00030067 32)))
    (set! %403 (getelementptr %396 (array-offset %398 4)))
    (store %402 %403 (bitvector 32) #:align 4)
    (set! %404 (load %6 (bitvector 32) #:align 4))
    (br %405))

; %405
  (define-label (%405) #:merge #f
    (set! %406 (phi [%398 %391] [%404 %400] [%390 %389]))
    (set! %407 (add %406 (bv #x00000001 32)))
    (store %407 %6 (bitvector 32) #:align 4)
    (br %408))

; %408
  (define-label (%408) #:merge #f
    (ret))

  (define-value %6)
  (define-value %7)
  (define-value %8)
  (define-value %10)
  (define-value %11)
  (define-value %13)
  (define-value %14)
  (define-value %15)
  (define-value %16)
  (define-value %17)
  (define-value %29)
  (define-value %30)
  (define-value %32)
  (define-value %33)
  (define-value %34)
  (define-value %35)
  (define-value %36)
  (define-value %37)
  (define-value %38)
  (define-value %39)
  (define-value %41)
  (define-value %42)
  (define-value %43)
  (define-value %45)
  (define-value %46)
  (define-value %47)
  (define-value %48)
  (define-value %49)
  (define-value %50)
  (define-value %51)
  (define-value %52)
  (define-value %53)
  (define-value %54)
  (define-value %55)
  (define-value %56)
  (define-value %57)
  (define-value %58)
  (define-value %59)
  (define-value %60)
  (define-value %61)
  (define-value %62)
  (define-value %63)
  (define-value %64)
  (define-value %65)
  (define-value %66)
  (define-value %68)
  (define-value %69)
  (define-value %71)
  (define-value %72)
  (define-value %73)
  (define-value %75)
  (define-value %76)
  (define-value %77)
  (define-value %78)
  (define-value %79)
  (define-value %80)
  (define-value %81)
  (define-value %82)
  (define-value %83)
  (define-value %84)
  (define-value %85)
  (define-value %86)
  (define-value %87)
  (define-value %88)
  (define-value %89)
  (define-value %90)
  (define-value %91)
  (define-value %92)
  (define-value %93)
  (define-value %94)
  (define-value %95)
  (define-value %96)
  (define-value %98)
  (define-value %99)
  (define-value %101)
  (define-value %102)
  (define-value %103)
  (define-value %105)
  (define-value %106)
  (define-value %107)
  (define-value %108)
  (define-value %109)
  (define-value %110)
  (define-value %111)
  (define-value %112)
  (define-value %113)
  (define-value %114)
  (define-value %115)
  (define-value %116)
  (define-value %117)
  (define-value %118)
  (define-value %119)
  (define-value %120)
  (define-value %121)
  (define-value %122)
  (define-value %123)
  (define-value %124)
  (define-value %125)
  (define-value %126)
  (define-value %128)
  (define-value %129)
  (define-value %131)
  (define-value %132)
  (define-value %133)
  (define-value %135)
  (define-value %136)
  (define-value %137)
  (define-value %138)
  (define-value %139)
  (define-value %140)
  (define-value %141)
  (define-value %142)
  (define-value %143)
  (define-value %144)
  (define-value %145)
  (define-value %146)
  (define-value %147)
  (define-value %148)
  (define-value %149)
  (define-value %150)
  (define-value %151)
  (define-value %152)
  (define-value %153)
  (define-value %154)
  (define-value %155)
  (define-value %156)
  (define-value %158)
  (define-value %159)
  (define-value %161)
  (define-value %162)
  (define-value %163)
  (define-value %165)
  (define-value %166)
  (define-value %167)
  (define-value %168)
  (define-value %169)
  (define-value %170)
  (define-value %171)
  (define-value %172)
  (define-value %173)
  (define-value %174)
  (define-value %175)
  (define-value %176)
  (define-value %177)
  (define-value %178)
  (define-value %179)
  (define-value %180)
  (define-value %181)
  (define-value %182)
  (define-value %183)
  (define-value %184)
  (define-value %185)
  (define-value %186)
  (define-value %188)
  (define-value %189)
  (define-value %191)
  (define-value %192)
  (define-value %193)
  (define-value %195)
  (define-value %196)
  (define-value %197)
  (define-value %198)
  (define-value %199)
  (define-value %200)
  (define-value %201)
  (define-value %202)
  (define-value %203)
  (define-value %204)
  (define-value %205)
  (define-value %206)
  (define-value %207)
  (define-value %208)
  (define-value %209)
  (define-value %210)
  (define-value %211)
  (define-value %212)
  (define-value %213)
  (define-value %214)
  (define-value %215)
  (define-value %216)
  (define-value %218)
  (define-value %219)
  (define-value %221)
  (define-value %222)
  (define-value %223)
  (define-value %225)
  (define-value %226)
  (define-value %227)
  (define-value %228)
  (define-value %229)
  (define-value %230)
  (define-value %231)
  (define-value %232)
  (define-value %233)
  (define-value %234)
  (define-value %235)
  (define-value %236)
  (define-value %237)
  (define-value %238)
  (define-value %239)
  (define-value %240)
  (define-value %241)
  (define-value %242)
  (define-value %243)
  (define-value %244)
  (define-value %245)
  (define-value %246)
  (define-value %248)
  (define-value %249)
  (define-value %251)
  (define-value %252)
  (define-value %253)
  (define-value %255)
  (define-value %256)
  (define-value %257)
  (define-value %258)
  (define-value %259)
  (define-value %260)
  (define-value %261)
  (define-value %262)
  (define-value %263)
  (define-value %264)
  (define-value %265)
  (define-value %266)
  (define-value %267)
  (define-value %268)
  (define-value %269)
  (define-value %270)
  (define-value %271)
  (define-value %272)
  (define-value %273)
  (define-value %274)
  (define-value %275)
  (define-value %276)
  (define-value %278)
  (define-value %279)
  (define-value %281)
  (define-value %282)
  (define-value %283)
  (define-value %285)
  (define-value %286)
  (define-value %287)
  (define-value %288)
  (define-value %289)
  (define-value %290)
  (define-value %291)
  (define-value %292)
  (define-value %293)
  (define-value %294)
  (define-value %295)
  (define-value %296)
  (define-value %297)
  (define-value %298)
  (define-value %299)
  (define-value %300)
  (define-value %301)
  (define-value %302)
  (define-value %303)
  (define-value %304)
  (define-value %305)
  (define-value %306)
  (define-value %308)
  (define-value %309)
  (define-value %311)
  (define-value %312)
  (define-value %313)
  (define-value %315)
  (define-value %316)
  (define-value %317)
  (define-value %318)
  (define-value %319)
  (define-value %320)
  (define-value %321)
  (define-value %322)
  (define-value %323)
  (define-value %324)
  (define-value %325)
  (define-value %326)
  (define-value %327)
  (define-value %328)
  (define-value %329)
  (define-value %330)
  (define-value %331)
  (define-value %332)
  (define-value %333)
  (define-value %334)
  (define-value %335)
  (define-value %336)
  (define-value %338)
  (define-value %339)
  (define-value %341)
  (define-value %342)
  (define-value %343)
  (define-value %345)
  (define-value %347)
  (define-value %348)
  (define-value %349)
  (define-value %350)
  (define-value %351)
  (define-value %352)
  (define-value %353)
  (define-value %354)
  (define-value %355)
  (define-value %356)
  (define-value %357)
  (define-value %359)
  (define-value %360)
  (define-value %361)
  (define-value %362)
  (define-value %363)
  (define-value %364)
  (define-value %365)
  (define-value %366)
  (define-value %367)
  (define-value %368)
  (define-value %369)
  (define-value %370)
  (define-value %371)
  (define-value %372)
  (define-value %373)
  (define-value %374)
  (define-value %376)
  (define-value %377)
  (define-value %379)
  (define-value %381)
  (define-value %383)
  (define-value %384)
  (define-value %385)
  (define-value %386)
  (define-value %387)
  (define-value %388)
  (define-value %390)
  (define-value %392)
  (define-value %393)
  (define-value %394)
  (define-value %395)
  (define-value %396)
  (define-value %397)
  (define-value %398)
  (define-value %399)
  (define-value %401)
  (define-value %402)
  (define-value %403)
  (define-value %404)
  (define-value %406)
  (define-value %407)
  (enter! %5))
